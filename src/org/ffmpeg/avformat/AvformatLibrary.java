package org.ffmpeg.avformat;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
import org.bridj.util.DefaultParameterizedType;
import org.ffmpeg.avcodec.AVBitStreamFilterContext;
import org.ffmpeg.avcodec.AVCodec;
import org.ffmpeg.avcodec.AVCodecContext;
import org.ffmpeg.avcodec.AVCodecParserContext;
import org.ffmpeg.avcodec.AVPacket;
import org.ffmpeg.avcodec.AvcodecLibrary.AVCodecID;
import org.ffmpeg.avcodec.AvcodecLibrary.AVPacketSideDataType;
import org.ffmpeg.avutil.AVBPrint;
import org.ffmpeg.avutil.AVClass;
import org.ffmpeg.avutil.AVDictionary;
import org.ffmpeg.avutil.AVFrame;
import org.ffmpeg.avutil.AVRational;
import org.ffmpeg.avutil.AvutilLibrary.AVMediaType;
/**
 * Wrapper for library <b>avformat</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("avformat") 
@Runtime(CRuntime.class) 
public class AvformatLibrary {
	static {
		BridJ.register();
	}
	/**
	 * Directory entry types.<br>
	 * enum values<br>
	 * <i>native declaration : libavformat/avio.h:28</i>
	 */
	public enum AVIODirEntryType implements IntValuedEnum<AVIODirEntryType > {
		AVIO_ENTRY_UNKNOWN(0),
		AVIO_ENTRY_BLOCK_DEVICE(1),
		AVIO_ENTRY_CHARACTER_DEVICE(2),
		AVIO_ENTRY_DIRECTORY(3),
		AVIO_ENTRY_NAMED_PIPE(4),
		AVIO_ENTRY_SYMBOLIC_LINK(5),
		AVIO_ENTRY_SOCKET(6),
		AVIO_ENTRY_FILE(7),
		AVIO_ENTRY_SERVER(8),
		AVIO_ENTRY_SHARE(9),
		AVIO_ENTRY_WORKGROUP(10);
		AVIODirEntryType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVIODirEntryType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVIODirEntryType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * Different data types that can be returned via the AVIO<br>
	 * write_data_type callback.<br>
	 * enum values<br>
	 * <i>native declaration : libavformat/avio.h:91</i>
	 */
	public enum AVIODataMarkerType implements IntValuedEnum<AVIODataMarkerType > {
		/** Header data; this needs to be present for the stream to be decodeable. */
		AVIO_DATA_MARKER_HEADER(0),
		/**
		 * A point in the output bytestream where a decoder can start decoding<br>
		 * (i.e. a keyframe). A demuxer/decoder given the data flagged with<br>
		 * AVIO_DATA_MARKER_HEADER, followed by any AVIO_DATA_MARKER_SYNC_POINT,<br>
		 * should give decodeable results.
		 */
		AVIO_DATA_MARKER_SYNC_POINT(1),
		/**
		 * A point in the output bytestream where a demuxer can start parsing<br>
		 * (for non self synchronizing bytestream formats). That is, any<br>
		 * non-keyframe packet start point.
		 */
		AVIO_DATA_MARKER_BOUNDARY_POINT(2),
		/**
		 * This is any, unlabelled data. It can either be a muxer not marking<br>
		 * any positions at all, it can be an actual boundary/sync point<br>
		 * that the muxer chooses not to mark, or a later part of a packet/fragment<br>
		 * that is cut into multiple write callbacks due to limited IO buffer size.
		 */
		AVIO_DATA_MARKER_UNKNOWN(3),
		/**
		 * Trailer data, which doesn't contain actual content, but only for<br>
		 * finalizing the output file.
		 */
		AVIO_DATA_MARKER_TRAILER(4),
		/**
		 * A point in the output bytestream where the underlying AVIOContext might<br>
		 * flush the buffer depending on latency or buffering requirements. Typically<br>
		 * means the end of a packet.
		 */
		AVIO_DATA_MARKER_FLUSH_POINT(5);
		AVIODataMarkerType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVIODataMarkerType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVIODataMarkerType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : libavformat/avformat.h:318</i>
	 */
	public enum AVStreamParseType implements IntValuedEnum<AVStreamParseType > {
		AVSTREAM_PARSE_NONE(0),
		/** < full parsing and repack */
		AVSTREAM_PARSE_FULL(1),
		/** < Only parse headers, do not repack. */
		AVSTREAM_PARSE_HEADERS(2),
		/** < full parsing and interpolation of timestamps for frames not starting on a packet boundary */
		AVSTREAM_PARSE_TIMESTAMPS(3),
		/** < full parsing and repack of the first frame only, only implemented for H.264 currently */
		AVSTREAM_PARSE_FULL_ONCE(4),
		/**
		 * < full parsing and repack with timestamp and position generation by parser for raw<br>
		 * this assumes that each packet in the file contains no demuxer level headers and<br>
		 * just codec level data, otherwise position generation would fail
		 */
		AVSTREAM_PARSE_FULL_RAW(5);
		AVStreamParseType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVStreamParseType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVStreamParseType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * The duration of a video can be estimated through various ways, and this enum can be used<br>
	 * to know how the duration was estimated.<br>
	 * enum values<br>
	 * <i>native declaration : libavformat/avformat.h:666</i>
	 */
	public enum AVDurationEstimationMethod implements IntValuedEnum<AVDurationEstimationMethod > {
		/** < Duration accurately estimated from PTSes */
		AVFMT_DURATION_FROM_PTS(0),
		/** < Duration estimated from a stream with a known duration */
		AVFMT_DURATION_FROM_STREAM(1),
		/** < Duration estimated from bitrate (less accurate) */
		AVFMT_DURATION_FROM_BITRATE(2);
		AVDurationEstimationMethod(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVDurationEstimationMethod > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVDurationEstimationMethod > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : libavformat/avformat.h:1989</i>
	 */
	public enum AVTimebaseSource implements IntValuedEnum<AVTimebaseSource > {
		AVFMT_TBCF_AUTO(-1),
		AVFMT_TBCF_DECODER(0),
		AVFMT_TBCF_DEMUXER(1),
		AVFMT_TBCF_R_FRAMERATE(2);
		AVTimebaseSource(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVTimebaseSource > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVTimebaseSource > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * Conversion Error : a.num<br>
	 * SKIPPED:<br>
	 * <i>native declaration : libavutil/rational.h:0</i><br>
	 * const int64_t tmp = a.num * (int64_t)b.den - b.num * (int64_t)a.den;
	 */
	/** <i>native declaration : libavformat/avio.h</i> */
	public static final int AVIO_FLAG_READ = (int)1;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_ALLOW_FLUSH = (int)0x10000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_NOTIMESTAMPS = (int)0x0080;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final boolean FF_API_OLD_RTSP_OPTIONS = (boolean)(58 < 59);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVSTREAM_INIT_IN_INIT_OUTPUT = (int)1;
	/** <i>native declaration : libavformat/avio.h</i> */
	public static final int AVSEEK_SIZE = (int)0x10000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVPROBE_SCORE_MAX = (int)100;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_FLUSH_PACKETS = (int)0x0200;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final int FF_API_R_FRAME_RATE = (int)1;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AV_DISPOSITION_KARAOKE = (int)0x0020;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_NOBINSEARCH = (int)0x2000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_NOBUFFER = (int)0x0040;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_NONBLOCK = (int)0x0004;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVSEEK_FLAG_BYTE = (int)2;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVPROBE_SCORE_RETRY = (int)(100 / 4);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_BITEXACT = (int)0x0400;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_NOGENSEARCH = (int)0x4000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_AVOID_NEG_TS_MAKE_NON_NEGATIVE = (int)1;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVINDEX_DISCARD_FRAME = (int)0x0002;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_TS_DISCONT = (int)0x0200;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AV_DISPOSITION_DUB = (int)0x0002;
	/** <i>native declaration : libavformat/avio.h</i> */
	public static final int AVIO_FLAG_NONBLOCK = (int)8;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_IGNDTS = (int)0x0008;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AV_DISPOSITION_ATTACHED_PIC = (int)0x0400;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AV_DISPOSITION_ORIGINAL = (int)0x0004;
	/** <i>native declaration : libavformat/avio.h</i> */
	public static final int AVSEEK_FORCE = (int)0x20000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVPROBE_SCORE_STREAM_RETRY = (int)(100 / 4 - 1);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_GLOBALHEADER = (int)0x0040;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVSEEK_FLAG_FRAME = (int)8;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AV_PTS_WRAP_SUB_OFFSET = (int)-1;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int MAX_STD_TIMEBASES = (int)(30 * 12 + 30 + 3 + 6);
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final int LIBAVFORMAT_VERSION_MAJOR = (int)58;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_DISCARD_CORRUPT = (int)0x0100;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_EVENT_FLAG_METADATA_UPDATED = (int)0x0001;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_NOSTREAMS = (int)0x1000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_GENPTS = (int)0x0001;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_NEEDNUMBER = (int)0x0002;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final int LIBAVFORMAT_BUILD = (int)((58) << 16 | (12) << 8 | (100));
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final String LIBAVFORMAT_IDENT = (String)"Lavf58.12.100";
	/** <i>native declaration : libavformat/avio.h</i> */
	public static final int AVIO_SEEKABLE_TIME = (int)(1 << 1);
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final boolean FF_API_FORMAT_FILENAME = (boolean)(58 < 59);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_AVOID_NEG_TS_AUTO = (int)-1;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_SHOW_IDS = (int)0x0008;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVSEEK_FLAG_ANY = (int)4;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final boolean FF_API_FORMAT_GET_SET = (boolean)(58 < 59);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AV_DISPOSITION_CLEAN_EFFECTS = (int)0x0200;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMTCTX_NOHEADER = (int)0x0001;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AV_PTS_WRAP_IGNORE = (int)0;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_NO_BYTE_SEEK = (int)0x8000;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final int LIBAVFORMAT_VERSION_MINOR = (int)12;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int MAX_REORDER_DELAY = (int)16;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final boolean FF_API_LAVF_KEEPSIDE_FLAG = (boolean)(58 < 59);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AV_PROGRAM_RUNNING = (int)1;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final boolean FF_API_HLS_WRAP = (boolean)(58 < 59);
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final boolean FF_API_OLD_AVIO_EOF_0 = (boolean)(58 < 59);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_CUSTOM_IO = (int)0x0080;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_TS_NEGATIVE = (int)0x40000;
	/** <i>native declaration : libavformat/avio.h</i> */
	public static final int AVIO_FLAG_DIRECT = (int)0x8000;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final int LIBAVFORMAT_VERSION_INT = (int)((58) << 16 | (12) << 8 | (100));
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVSTREAM_INIT_IN_WRITE_HEADER = (int)0;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVSEEK_FLAG_BACKWARD = (int)1;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final boolean FF_API_COMPUTE_PKT_FIELDS2 = (boolean)(58 < 59);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AV_DISPOSITION_TIMED_THUMBNAILS = (int)0x0800;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AV_PTS_WRAP_ADD_OFFSET = (int)1;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_AVOID_NEG_TS_MAKE_ZERO = (int)2;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMTCTX_UNSEEKABLE = (int)0x0002;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AV_DISPOSITION_COMMENT = (int)0x0008;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AV_FRAME_FILENAME_FLAGS_MULTIPLE = (int)1;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVPROBE_SCORE_MIME = (int)75;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVPROBE_SCORE_EXTENSION = (int)50;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_FAST_SEEK = (int)0x80000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_TS_NONSTRICT = (int)0x20000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_PRIV_OPT = (int)0x20000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_SHORTEST = (int)0x100000;
	/**
	 * define<br>
	 * Conversion Error : 58.12.<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ./libavformat/version.h:0</i><br>
	 * 58.12.
	 */
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_GENERIC_INDEX = (int)0x0100;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVINDEX_KEYFRAME = (int)0x0001;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_KEEP_SIDE_DATA = (int)0x40000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVPROBE_PADDING_SIZE = (int)32;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_IGNIDX = (int)0x0002;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_NOPARSE = (int)0x0020;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_MP4A_LATM = (int)0x8000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVSTREAM_EVENT_FLAG_METADATA_UPDATED = (int)0x0001;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AV_DISPOSITION_LYRICS = (int)0x0010;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final boolean FF_API_OLD_OPEN_CALLBACKS = (boolean)(58 < 59);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AV_DISPOSITION_DEFAULT = (int)0x0001;
	/** <i>native declaration : libavformat/avio.h</i> */
	public static final int AVIO_FLAG_READ_WRITE = (int)(1 | 2);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AV_DISPOSITION_VISUAL_IMPAIRED = (int)0x0100;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final boolean FF_API_HTTP_USER_AGENT = (boolean)(58 < 59);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_AUTO_BSF = (int)0x200000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_NOFILLIN = (int)0x0010;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final int LIBAVFORMAT_VERSION_MICRO = (int)100;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AV_DISPOSITION_HEARING_IMPAIRED = (int)0x0080;
	/** <i>native declaration : libavformat/avio.h</i> */
	public static final int AVIO_SEEKABLE_NORMAL = (int)(1 << 0);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_NOFILE = (int)0x0001;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AV_DISPOSITION_METADATA = (int)0x40000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AV_DISPOSITION_DEPENDENT = (int)0x80000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AV_DISPOSITION_FORCED = (int)0x0040;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AV_DISPOSITION_CAPTIONS = (int)0x10000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_VARIABLE_FPS = (int)0x0400;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final boolean FF_API_LAVF_FFSERVER = (boolean)(58 < 59);
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final boolean FF_API_OLD_ROTATE_API = (boolean)(58 < 59);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_SORT_DTS = (int)0x10000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_SEEK_TO_PTS = (int)0x4000000;
	/** <i>native declaration : libavformat/avio.h</i> */
	public static final int AVIO_FLAG_WRITE = (int)2;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_NODIMENSIONS = (int)0x0800;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AV_DISPOSITION_DESCRIPTIONS = (int)0x20000;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final boolean FF_API_LAVF_AVCTX = (boolean)(58 < 59);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int FF_FDEBUG_TS = (int)0x0001;
	/** <i>native declaration : libavformat/avio.h:687</i> */
	public static abstract class avio_alloc_context_read_packet_callback extends Callback<avio_alloc_context_read_packet_callback > {
		public int apply(Pointer<? > opaque, Pointer<Byte > buf, int buf_size) {
			return apply(Pointer.getPeer(opaque), Pointer.getPeer(buf), buf_size);
		}
		public int apply(@Ptr long opaque, @Ptr long buf, int buf_size) {
			return apply(Pointer.pointerToAddress(opaque), Pointer.pointerToAddress(buf, Byte.class), buf_size);
		}
	};
	/** <i>native declaration : libavformat/avio.h:688</i> */
	public static abstract class avio_alloc_context_write_packet_callback extends Callback<avio_alloc_context_write_packet_callback > {
		public int apply(Pointer<? > opaque, Pointer<Byte > buf, int buf_size) {
			return apply(Pointer.getPeer(opaque), Pointer.getPeer(buf), buf_size);
		}
		public int apply(@Ptr long opaque, @Ptr long buf, int buf_size) {
			return apply(Pointer.pointerToAddress(opaque), Pointer.pointerToAddress(buf, Byte.class), buf_size);
		}
	};
	/** <i>native declaration : libavformat/avio.h:689</i> */
	public static abstract class avio_alloc_context_seek_callback extends Callback<avio_alloc_context_seek_callback > {
		public long apply(Pointer<? > opaque, long offset, int whence) {
			return apply(Pointer.getPeer(opaque), offset, whence);
		}
		public long apply(@Ptr long opaque, long offset, int whence) {
			return apply(Pointer.pointerToAddress(opaque), offset, whence);
		}
	};
	/** <i>native declaration : libavformat/avformat.h:653</i> */
	public static abstract class av_format_control_message extends Callback<av_format_control_message > {
		public int apply(Pointer<AVFormatContext > s, int type, Pointer<? > data, @Ptr long data_size) {
			return apply(Pointer.getPeer(s), type, Pointer.getPeer(data), data_size);
		}
		public int apply(@Ptr long s, int type, @Ptr long data, @Ptr long data_size) {
			return apply(Pointer.pointerToAddress(s, AVFormatContext.class), type, Pointer.pointerToAddress(data), data_size);
		}
	};
	/** <i>native declaration : libavformat/avformat.h:654</i> */
	public static abstract class AVOpenCallback extends Callback<AVOpenCallback > {
		public int apply(Pointer<AVFormatContext > s, Pointer<Pointer> pb, Pointer<Byte > url, int flags, Pointer<AVIOInterruptCB > int_cb, Pointer<Pointer> options) {
			return apply(Pointer.getPeer(s), Pointer.getPeer(pb), Pointer.getPeer(url), flags, Pointer.getPeer(int_cb), Pointer.getPeer(options));
		}
		public int apply(@Ptr long s, @Ptr long pb, @Ptr long url, int flags, @Ptr long int_cb, @Ptr long options) {
			return apply(Pointer.pointerToAddress(s, AVFormatContext.class), Pointer.pointerToAddress(pb, Pointer.class), Pointer.pointerToAddress(url, Byte.class), flags, Pointer.pointerToAddress(int_cb, AVIOInterruptCB.class), Pointer.pointerToAddress(options, Pointer.class));
		}
	};
	/**
	 * Return the name of the protocol that will handle the passed URL.<br>
	 * * NULL is returned if no protocol could be found for the given URL.<br>
	 * * @return Name of the protocol or NULL.<br>
	 * Original signature : <code>char* avio_find_protocol_name(const char*)</code><br>
	 * <i>native declaration : libavformat/avio.h:269</i>
	 */
	public static Pointer<Byte > avio_find_protocol_name(Pointer<Byte > url) {
		return Pointer.pointerToAddress(avio_find_protocol_name(Pointer.getPeer(url)), Byte.class);
	}
	@Ptr 
	protected native static long avio_find_protocol_name(@Ptr long url);
	/**
	 * Return AVIO_FLAG_* access flags corresponding to the access permissions<br>
	 * of the resource in url, or a negative value corresponding to an<br>
	 * AVERROR code in case of failure. The returned access flags are<br>
	 * masked by the value in flags.<br>
	 * * @note This function is intrinsically unsafe, in the sense that the<br>
	 * checked resource may change its existence or permission status from<br>
	 * one call to another. Thus you should not trust the returned value,<br>
	 * unless you are sure that no other processes are accessing the<br>
	 * checked resource.<br>
	 * Original signature : <code>int avio_check(const char*, int)</code><br>
	 * <i>native declaration : libavformat/avio.h:282</i>
	 */
	public static int avio_check(Pointer<Byte > url, int flags) {
		return avio_check(Pointer.getPeer(url), flags);
	}
	protected native static int avio_check(@Ptr long url, int flags);
	/**
	 * Move or rename a resource.<br>
	 * * @note url_src and url_dst should share the same protocol and authority.<br>
	 * * @param url_src url to resource to be moved<br>
	 * @param url_dst new url to resource if the operation succeeded<br>
	 * @return >=0 on success or negative on error.<br>
	 * Original signature : <code>int avpriv_io_move(const char*, const char*)</code><br>
	 * <i>native declaration : libavformat/avio.h:291</i>
	 */
	public static int avpriv_io_move(Pointer<Byte > url_src, Pointer<Byte > url_dst) {
		return avpriv_io_move(Pointer.getPeer(url_src), Pointer.getPeer(url_dst));
	}
	protected native static int avpriv_io_move(@Ptr long url_src, @Ptr long url_dst);
	/**
	 * Delete a resource.<br>
	 * * @param url resource to be deleted.<br>
	 * @return >=0 on success or negative on error.<br>
	 * Original signature : <code>int avpriv_io_delete(const char*)</code><br>
	 * <i>native declaration : libavformat/avio.h:298</i>
	 */
	public static int avpriv_io_delete(Pointer<Byte > url) {
		return avpriv_io_delete(Pointer.getPeer(url));
	}
	protected native static int avpriv_io_delete(@Ptr long url);
	/**
	 * Open directory for reading.<br>
	 * * @param s       directory read context. Pointer to a NULL pointer must be passed.<br>
	 * @param url     directory to be listed.<br>
	 * @param options A dictionary filled with protocol-private options. On return<br>
	 *                this parameter will be destroyed and replaced with a dictionary<br>
	 *                containing options that were not found. May be NULL.<br>
	 * @return >=0 on success or negative on error.<br>
	 * Original signature : <code>int avio_open_dir(AVIODirContext**, const char*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat/avio.h:309</i>
	 */
	public static int avio_open_dir(Pointer<Pointer<AVIODirContext > > s, Pointer<Byte > url, Pointer<Pointer<AVDictionary > > options) {
		return avio_open_dir(Pointer.getPeer(s), Pointer.getPeer(url), Pointer.getPeer(options));
	}
	protected native static int avio_open_dir(@Ptr long s, @Ptr long url, @Ptr long options);
	/**
	 * Get next directory entry.<br>
	 * * Returned entry must be freed with avio_free_directory_entry(). In particular<br>
	 * it may outlive AVIODirContext.<br>
	 * * @param s         directory read context.<br>
	 * @param[out] next next entry or NULL when no more entries.<br>
	 * @return >=0 on success or negative on error. End of list is not considered an<br>
	 *             error.<br>
	 * Original signature : <code>int avio_read_dir(AVIODirContext*, AVIODirEntry**)</code><br>
	 * <i>native declaration : libavformat/avio.h:320</i>
	 */
	public static int avio_read_dir(Pointer<AVIODirContext > s, Pointer<Pointer<AVIODirEntry > > next) {
		return avio_read_dir(Pointer.getPeer(s), Pointer.getPeer(next));
	}
	protected native static int avio_read_dir(@Ptr long s, @Ptr long next);
	/**
	 * Close directory.<br>
	 * * @note Entries created using avio_read_dir() are not deleted and must be<br>
	 * freeded with avio_free_directory_entry().<br>
	 * * @param s         directory read context.<br>
	 * @return >=0 on success or negative on error.<br>
	 * Original signature : <code>int avio_close_dir(AVIODirContext**)</code><br>
	 * <i>native declaration : libavformat/avio.h:329</i>
	 */
	public static int avio_close_dir(Pointer<Pointer<AVIODirContext > > s) {
		return avio_close_dir(Pointer.getPeer(s));
	}
	protected native static int avio_close_dir(@Ptr long s);
	/**
	 * Free entry allocated by avio_read_dir().<br>
	 * * @param entry entry to be freed.<br>
	 * Original signature : <code>void avio_free_directory_entry(AVIODirEntry**)</code><br>
	 * <i>native declaration : libavformat/avio.h:335</i>
	 */
	public static void avio_free_directory_entry(Pointer<Pointer<AVIODirEntry > > entry) {
		avio_free_directory_entry(Pointer.getPeer(entry));
	}
	protected native static void avio_free_directory_entry(@Ptr long entry);
	/**
	 * Allocate and initialize an AVIOContext for buffered I/O. It must be later<br>
	 * freed with avio_context_free().<br>
	 * * @param buffer Memory block for input/output operations via AVIOContext.<br>
	 *        The buffer must be allocated with av_malloc() and friends.<br>
	 *        It may be freed and replaced with a new buffer by libavformat.<br>
	 *        AVIOContext.buffer holds the buffer currently in use,<br>
	 *        which must be later freed with av_free().<br>
	 * @param buffer_size The buffer size is very important for performance.<br>
	 *        For protocols with fixed blocksize it should be set to this blocksize.<br>
	 *        For others a typical size is a cache page, e.g. 4kb.<br>
	 * @param write_flag Set to 1 if the buffer should be writable, 0 otherwise.<br>
	 * @param opaque An opaque pointer to user-specific data.<br>
	 * @param read_packet  A function for refilling the buffer, may be NULL.<br>
	 *                     For stream protocols, must never return 0 but rather<br>
	 *                     a proper AVERROR code.<br>
	 * @param write_packet A function for writing the buffer contents, may be NULL.<br>
	 *        The function may not change the input buffers content.<br>
	 * @param seek A function for seeking to specified byte position, may be NULL.<br>
	 * * @return Allocated AVIOContext or NULL on failure.<br>
	 * Original signature : <code>AVIOContext* avio_alloc_context(unsigned char*, int, int, void*, avio_alloc_context_read_packet_callback*, avio_alloc_context_write_packet_callback*, avio_alloc_context_seek_callback*)</code><br>
	 * <i>native declaration : libavformat/avio.h:358</i>
	 */
	public static Pointer<AVIOContext > avio_alloc_context(Pointer<Byte > buffer, int buffer_size, int write_flag, Pointer<? > opaque, Pointer<AvformatLibrary.avio_alloc_context_read_packet_callback > read_packet, Pointer<AvformatLibrary.avio_alloc_context_write_packet_callback > write_packet, Pointer<AvformatLibrary.avio_alloc_context_seek_callback > seek) {
		return Pointer.pointerToAddress(avio_alloc_context(Pointer.getPeer(buffer), buffer_size, write_flag, Pointer.getPeer(opaque), Pointer.getPeer(read_packet), Pointer.getPeer(write_packet), Pointer.getPeer(seek)), AVIOContext.class);
	}
	@Ptr 
	protected native static long avio_alloc_context(@Ptr long buffer, int buffer_size, int write_flag, @Ptr long opaque, @Ptr long read_packet, @Ptr long write_packet, @Ptr long seek);
	/**
	 * Free the supplied IO context and everything associated with it.<br>
	 * * @param s Double pointer to the IO context. This function will write NULL<br>
	 * into s.<br>
	 * Original signature : <code>void avio_context_free(AVIOContext**)</code><br>
	 * <i>native declaration : libavformat/avio.h:365</i>
	 */
	public static void avio_context_free(Pointer<Pointer<AVIOContext > > s) {
		avio_context_free(Pointer.getPeer(s));
	}
	protected native static void avio_context_free(@Ptr long s);
	/**
	 * Original signature : <code>void avio_w8(AVIOContext*, int)</code><br>
	 * <i>native declaration : libavformat/avio.h:367</i>
	 */
	public static void avio_w8(Pointer<AVIOContext > s, int b) {
		avio_w8(Pointer.getPeer(s), b);
	}
	protected native static void avio_w8(@Ptr long s, int b);
	/**
	 * Original signature : <code>void avio_write(AVIOContext*, const unsigned char*, int)</code><br>
	 * <i>native declaration : libavformat/avio.h:369</i>
	 */
	public static void avio_write(Pointer<AVIOContext > s, Pointer<Byte > buf, int size) {
		avio_write(Pointer.getPeer(s), Pointer.getPeer(buf), size);
	}
	protected native static void avio_write(@Ptr long s, @Ptr long buf, int size);
	/**
	 * Original signature : <code>void avio_wl64(AVIOContext*, uint64_t)</code><br>
	 * <i>native declaration : libavformat/avio.h:371</i>
	 */
	public static void avio_wl64(Pointer<AVIOContext > s, long val) {
		avio_wl64(Pointer.getPeer(s), val);
	}
	protected native static void avio_wl64(@Ptr long s, long val);
	/**
	 * Original signature : <code>void avio_wb64(AVIOContext*, uint64_t)</code><br>
	 * <i>native declaration : libavformat/avio.h:373</i>
	 */
	public static void avio_wb64(Pointer<AVIOContext > s, long val) {
		avio_wb64(Pointer.getPeer(s), val);
	}
	protected native static void avio_wb64(@Ptr long s, long val);
	/**
	 * Original signature : <code>void avio_wl32(AVIOContext*, unsigned int)</code><br>
	 * <i>native declaration : libavformat/avio.h:375</i>
	 */
	public static void avio_wl32(Pointer<AVIOContext > s, int val) {
		avio_wl32(Pointer.getPeer(s), val);
	}
	protected native static void avio_wl32(@Ptr long s, int val);
	/**
	 * Original signature : <code>void avio_wb32(AVIOContext*, unsigned int)</code><br>
	 * <i>native declaration : libavformat/avio.h:377</i>
	 */
	public static void avio_wb32(Pointer<AVIOContext > s, int val) {
		avio_wb32(Pointer.getPeer(s), val);
	}
	protected native static void avio_wb32(@Ptr long s, int val);
	/**
	 * Original signature : <code>void avio_wl24(AVIOContext*, unsigned int)</code><br>
	 * <i>native declaration : libavformat/avio.h:379</i>
	 */
	public static void avio_wl24(Pointer<AVIOContext > s, int val) {
		avio_wl24(Pointer.getPeer(s), val);
	}
	protected native static void avio_wl24(@Ptr long s, int val);
	/**
	 * Original signature : <code>void avio_wb24(AVIOContext*, unsigned int)</code><br>
	 * <i>native declaration : libavformat/avio.h:381</i>
	 */
	public static void avio_wb24(Pointer<AVIOContext > s, int val) {
		avio_wb24(Pointer.getPeer(s), val);
	}
	protected native static void avio_wb24(@Ptr long s, int val);
	/**
	 * Original signature : <code>void avio_wl16(AVIOContext*, unsigned int)</code><br>
	 * <i>native declaration : libavformat/avio.h:383</i>
	 */
	public static void avio_wl16(Pointer<AVIOContext > s, int val) {
		avio_wl16(Pointer.getPeer(s), val);
	}
	protected native static void avio_wl16(@Ptr long s, int val);
	/**
	 * Original signature : <code>void avio_wb16(AVIOContext*, unsigned int)</code><br>
	 * <i>native declaration : libavformat/avio.h:385</i>
	 */
	public static void avio_wb16(Pointer<AVIOContext > s, int val) {
		avio_wb16(Pointer.getPeer(s), val);
	}
	protected native static void avio_wb16(@Ptr long s, int val);
	/**
	 * Write a NULL-terminated string.<br>
	 * @return number of bytes written.<br>
	 * Original signature : <code>int avio_put_str(AVIOContext*, const char*)</code><br>
	 * <i>native declaration : libavformat/avio.h:391</i>
	 */
	public static int avio_put_str(Pointer<AVIOContext > s, Pointer<Byte > str) {
		return avio_put_str(Pointer.getPeer(s), Pointer.getPeer(str));
	}
	protected native static int avio_put_str(@Ptr long s, @Ptr long str);
	/**
	 * Convert an UTF-8 string to UTF-16LE and write it.<br>
	 * @param s the AVIOContext<br>
	 * @param str NULL-terminated UTF-8 string<br>
	 * * @return number of bytes written.<br>
	 * Original signature : <code>int avio_put_str16le(AVIOContext*, const char*)</code><br>
	 * <i>native declaration : libavformat/avio.h:399</i>
	 */
	public static int avio_put_str16le(Pointer<AVIOContext > s, Pointer<Byte > str) {
		return avio_put_str16le(Pointer.getPeer(s), Pointer.getPeer(str));
	}
	protected native static int avio_put_str16le(@Ptr long s, @Ptr long str);
	/**
	 * Convert an UTF-8 string to UTF-16BE and write it.<br>
	 * @param s the AVIOContext<br>
	 * @param str NULL-terminated UTF-8 string<br>
	 * * @return number of bytes written.<br>
	 * Original signature : <code>int avio_put_str16be(AVIOContext*, const char*)</code><br>
	 * <i>native declaration : libavformat/avio.h:407</i>
	 */
	public static int avio_put_str16be(Pointer<AVIOContext > s, Pointer<Byte > str) {
		return avio_put_str16be(Pointer.getPeer(s), Pointer.getPeer(str));
	}
	protected native static int avio_put_str16be(@Ptr long s, @Ptr long str);
	/**
	 * Mark the written bytestream as a specific type.<br>
	 * * Zero-length ranges are omitted from the output.<br>
	 * * @param time the stream time the current bytestream pos corresponds to<br>
	 *             (in AV_TIME_BASE units), or AV_NOPTS_VALUE if unknown or not<br>
	 *             applicable<br>
	 * @param type the kind of data written starting at the current pos<br>
	 * Original signature : <code>void avio_write_marker(AVIOContext*, int64_t, AVIODataMarkerType)</code><br>
	 * <i>native declaration : libavformat/avio.h:417</i>
	 */
	public static void avio_write_marker(Pointer<AVIOContext > s, long time, IntValuedEnum<AvformatLibrary.AVIODataMarkerType > type) {
		avio_write_marker(Pointer.getPeer(s), time, (int)type.value());
	}
	protected native static void avio_write_marker(@Ptr long s, long time, int type);
	/**
	 * fseek() equivalent for AVIOContext.<br>
	 * @return new position or AVERROR.<br>
	 * Original signature : <code>int64_t avio_seek(AVIOContext*, int64_t, int)</code><br>
	 * <i>native declaration : libavformat/avio.h:423</i>
	 */
	public static long avio_seek(Pointer<AVIOContext > s, long offset, int whence) {
		return avio_seek(Pointer.getPeer(s), offset, whence);
	}
	protected native static long avio_seek(@Ptr long s, long offset, int whence);
	/**
	 * Skip given number of bytes forward<br>
	 * @return new position or AVERROR.<br>
	 * Original signature : <code>int64_t avio_skip(AVIOContext*, int64_t)</code><br>
	 * <i>native declaration : libavformat/avio.h:429</i>
	 */
	public static long avio_skip(Pointer<AVIOContext > s, long offset) {
		return avio_skip(Pointer.getPeer(s), offset);
	}
	protected native static long avio_skip(@Ptr long s, long offset);
	/**
	 * Get the filesize.<br>
	 * @return filesize or AVERROR<br>
	 * Original signature : <code>int64_t avio_size(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat/avio.h:443</i>
	 */
	public static long avio_size(Pointer<AVIOContext > s) {
		return avio_size(Pointer.getPeer(s));
	}
	protected native static long avio_size(@Ptr long s);
	/**
	 * feof() equivalent for AVIOContext.<br>
	 * @return non zero if and only if end of file<br>
	 * Original signature : <code>int avio_feof(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat/avio.h:449</i>
	 */
	public static int avio_feof(Pointer<AVIOContext > s) {
		return avio_feof(Pointer.getPeer(s));
	}
	protected native static int avio_feof(@Ptr long s);
	/**
	 * @warning Writes up to 4 KiB per call<br>
	 * Original signature : <code>int avio_printf(AVIOContext*, const char*, null)</code><br>
	 * <i>native declaration : libavformat/avio.h:454</i>
	 */
	public static int avio_printf(Pointer<AVIOContext > s, Pointer<Byte > fmt, Object... varArgs1) {
		return avio_printf(Pointer.getPeer(s), Pointer.getPeer(fmt), varArgs1);
	}
	protected native static int avio_printf(@Ptr long s, @Ptr long fmt, Object... varArgs1);
	/**
	 * Force flushing of buffered data.<br>
	 * * For write streams, force the buffered data to be immediately written to the output,<br>
	 * without to wait to fill the internal buffer.<br>
	 * * For read streams, discard all currently buffered data, and advance the<br>
	 * reported file position to that of the underlying stream. This does not<br>
	 * read new data, and does not perform any seeks.<br>
	 * Original signature : <code>void avio_flush(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat/avio.h:464</i>
	 */
	public static void avio_flush(Pointer<AVIOContext > s) {
		avio_flush(Pointer.getPeer(s));
	}
	protected native static void avio_flush(@Ptr long s);
	/**
	 * Read size bytes from AVIOContext into buf.<br>
	 * @return number of bytes read or AVERROR<br>
	 * Original signature : <code>int avio_read(AVIOContext*, unsigned char*, int)</code><br>
	 * <i>native declaration : libavformat/avio.h:470</i>
	 */
	public static int avio_read(Pointer<AVIOContext > s, Pointer<Byte > buf, int size) {
		return avio_read(Pointer.getPeer(s), Pointer.getPeer(buf), size);
	}
	protected native static int avio_read(@Ptr long s, @Ptr long buf, int size);
	/**
	 * Read size bytes from AVIOContext into buf. Unlike avio_read(), this is allowed<br>
	 * to read fewer bytes than requested. The missing bytes can be read in the next<br>
	 * call. This always tries to read at least 1 byte.<br>
	 * Useful to reduce latency in certain cases.<br>
	 * @return number of bytes read or AVERROR<br>
	 * Original signature : <code>int avio_read_partial(AVIOContext*, unsigned char*, int)</code><br>
	 * <i>native declaration : libavformat/avio.h:479</i>
	 */
	public static int avio_read_partial(Pointer<AVIOContext > s, Pointer<Byte > buf, int size) {
		return avio_read_partial(Pointer.getPeer(s), Pointer.getPeer(buf), size);
	}
	protected native static int avio_read_partial(@Ptr long s, @Ptr long buf, int size);
	/**
	 * @name Functions for reading from AVIOContext<br>
	 * @{<br>
	 * * @note return 0 if EOF, so you cannot use it if EOF handling is<br>
	 *       necessary<br>
	 * Original signature : <code>int avio_r8(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat/avio.h:487</i>
	 */
	public static int avio_r8(Pointer<AVIOContext > s) {
		return avio_r8(Pointer.getPeer(s));
	}
	protected native static int avio_r8(@Ptr long s);
	/**
	 * Original signature : <code>int avio_rl16(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat/avio.h:489</i>
	 */
	public static int avio_rl16(Pointer<AVIOContext > s) {
		return avio_rl16(Pointer.getPeer(s));
	}
	protected native static int avio_rl16(@Ptr long s);
	/**
	 * Original signature : <code>int avio_rl24(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat/avio.h:491</i>
	 */
	public static int avio_rl24(Pointer<AVIOContext > s) {
		return avio_rl24(Pointer.getPeer(s));
	}
	protected native static int avio_rl24(@Ptr long s);
	/**
	 * Original signature : <code>int avio_rl32(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat/avio.h:493</i>
	 */
	public static int avio_rl32(Pointer<AVIOContext > s) {
		return avio_rl32(Pointer.getPeer(s));
	}
	protected native static int avio_rl32(@Ptr long s);
	/**
	 * Original signature : <code>uint64_t avio_rl64(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat/avio.h:495</i>
	 */
	public static long avio_rl64(Pointer<AVIOContext > s) {
		return avio_rl64(Pointer.getPeer(s));
	}
	protected native static long avio_rl64(@Ptr long s);
	/**
	 * Original signature : <code>int avio_rb16(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat/avio.h:497</i>
	 */
	public static int avio_rb16(Pointer<AVIOContext > s) {
		return avio_rb16(Pointer.getPeer(s));
	}
	protected native static int avio_rb16(@Ptr long s);
	/**
	 * Original signature : <code>int avio_rb24(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat/avio.h:499</i>
	 */
	public static int avio_rb24(Pointer<AVIOContext > s) {
		return avio_rb24(Pointer.getPeer(s));
	}
	protected native static int avio_rb24(@Ptr long s);
	/**
	 * Original signature : <code>int avio_rb32(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat/avio.h:501</i>
	 */
	public static int avio_rb32(Pointer<AVIOContext > s) {
		return avio_rb32(Pointer.getPeer(s));
	}
	protected native static int avio_rb32(@Ptr long s);
	/**
	 * Original signature : <code>uint64_t avio_rb64(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat/avio.h:503</i>
	 */
	public static long avio_rb64(Pointer<AVIOContext > s) {
		return avio_rb64(Pointer.getPeer(s));
	}
	protected native static long avio_rb64(@Ptr long s);
	/**
	 * Read a string from pb into buf. The reading will terminate when either<br>
	 * a NULL character was encountered, maxlen bytes have been read, or nothing<br>
	 * more can be read from pb. The result is guaranteed to be NULL-terminated, it<br>
	 * will be truncated if buf is too small.<br>
	 * Note that the string is not interpreted or validated in any way, it<br>
	 * might get truncated in the middle of a sequence for multi-byte encodings.<br>
	 * * @return number of bytes read (is always <= maxlen).<br>
	 * If reading ends on EOF or error, the return value will be one more than<br>
	 * bytes actually read.<br>
	 * Original signature : <code>int avio_get_str(AVIOContext*, int, char*, int)</code><br>
	 * <i>native declaration : libavformat/avio.h:516</i>
	 */
	public static int avio_get_str(Pointer<AVIOContext > pb, int maxlen, Pointer<Byte > buf, int buflen) {
		return avio_get_str(Pointer.getPeer(pb), maxlen, Pointer.getPeer(buf), buflen);
	}
	protected native static int avio_get_str(@Ptr long pb, int maxlen, @Ptr long buf, int buflen);
	/**
	 * Read a UTF-16 string from pb and convert it to UTF-8.<br>
	 * The reading will terminate when either a null or invalid character was<br>
	 * encountered or maxlen bytes have been read.<br>
	 * @return number of bytes read (is always <= maxlen)<br>
	 * Original signature : <code>int avio_get_str16le(AVIOContext*, int, char*, int)</code><br>
	 * <i>native declaration : libavformat/avio.h:524</i>
	 */
	public static int avio_get_str16le(Pointer<AVIOContext > pb, int maxlen, Pointer<Byte > buf, int buflen) {
		return avio_get_str16le(Pointer.getPeer(pb), maxlen, Pointer.getPeer(buf), buflen);
	}
	protected native static int avio_get_str16le(@Ptr long pb, int maxlen, @Ptr long buf, int buflen);
	/**
	 * Original signature : <code>int avio_get_str16be(AVIOContext*, int, char*, int)</code><br>
	 * <i>native declaration : libavformat/avio.h:526</i>
	 */
	public static int avio_get_str16be(Pointer<AVIOContext > pb, int maxlen, Pointer<Byte > buf, int buflen) {
		return avio_get_str16be(Pointer.getPeer(pb), maxlen, Pointer.getPeer(buf), buflen);
	}
	protected native static int avio_get_str16be(@Ptr long pb, int maxlen, @Ptr long buf, int buflen);
	/**
	 * Create and initialize a AVIOContext for accessing the<br>
	 * resource indicated by url.<br>
	 * @note When the resource indicated by url has been opened in<br>
	 * read+write mode, the AVIOContext can be used only for writing.<br>
	 * * @param s Used to return the pointer to the created AVIOContext.<br>
	 * In case of failure the pointed to value is set to NULL.<br>
	 * @param url resource to access<br>
	 * @param flags flags which control how the resource indicated by url<br>
	 * is to be opened<br>
	 * @return >= 0 in case of success, a negative value corresponding to an<br>
	 * AVERROR code in case of failure<br>
	 * Original signature : <code>int avio_open(AVIOContext**, const char*, int)</code><br>
	 * <i>native declaration : libavformat/avio.h:541</i>
	 */
	public static int avio_open(Pointer<Pointer<AVIOContext > > s, Pointer<Byte > url, int flags) {
		return avio_open(Pointer.getPeer(s), Pointer.getPeer(url), flags);
	}
	protected native static int avio_open(@Ptr long s, @Ptr long url, int flags);
	/**
	 * Create and initialize a AVIOContext for accessing the<br>
	 * resource indicated by url.<br>
	 * @note When the resource indicated by url has been opened in<br>
	 * read+write mode, the AVIOContext can be used only for writing.<br>
	 * * @param s Used to return the pointer to the created AVIOContext.<br>
	 * In case of failure the pointed to value is set to NULL.<br>
	 * @param url resource to access<br>
	 * @param flags flags which control how the resource indicated by url<br>
	 * is to be opened<br>
	 * @param int_cb an interrupt callback to be used at the protocols level<br>
	 * @param options  A dictionary filled with protocol-private options. On return<br>
	 * this parameter will be destroyed and replaced with a dict containing options<br>
	 * that were not found. May be NULL.<br>
	 * @return >= 0 in case of success, a negative value corresponding to an<br>
	 * AVERROR code in case of failure<br>
	 * Original signature : <code>int avio_open2(AVIOContext**, const char*, int, const AVIOInterruptCB*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat/avio.h:560</i>
	 */
	public static int avio_open2(Pointer<Pointer<AVIOContext > > s, Pointer<Byte > url, int flags, Pointer<AVIOInterruptCB > int_cb, Pointer<Pointer<AVDictionary > > options) {
		return avio_open2(Pointer.getPeer(s), Pointer.getPeer(url), flags, Pointer.getPeer(int_cb), Pointer.getPeer(options));
	}
	protected native static int avio_open2(@Ptr long s, @Ptr long url, int flags, @Ptr long int_cb, @Ptr long options);
	/**
	 * Close the resource accessed by the AVIOContext s and free it.<br>
	 * This function can only be used if s was opened by avio_open().<br>
	 * * The internal buffer is automatically flushed before closing the<br>
	 * resource.<br>
	 * * @return 0 on success, an AVERROR < 0 on error.<br>
	 * @see avio_closep<br>
	 * Original signature : <code>int avio_close(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat/avio.h:570</i>
	 */
	public static int avio_close(Pointer<AVIOContext > s) {
		return avio_close(Pointer.getPeer(s));
	}
	protected native static int avio_close(@Ptr long s);
	/**
	 * Close the resource accessed by the AVIOContext *s, free it<br>
	 * and set the pointer pointing to it to NULL.<br>
	 * This function can only be used if s was opened by avio_open().<br>
	 * * The internal buffer is automatically flushed before closing the<br>
	 * resource.<br>
	 * * @return 0 on success, an AVERROR < 0 on error.<br>
	 * @see avio_close<br>
	 * Original signature : <code>int avio_closep(AVIOContext**)</code><br>
	 * <i>native declaration : libavformat/avio.h:581</i>
	 */
	public static int avio_closep(Pointer<Pointer<AVIOContext > > s) {
		return avio_closep(Pointer.getPeer(s));
	}
	protected native static int avio_closep(@Ptr long s);
	/**
	 * Open a write only memory stream.<br>
	 * * @param s new IO context<br>
	 * @return zero if no error.<br>
	 * Original signature : <code>int avio_open_dyn_buf(AVIOContext**)</code><br>
	 * <i>native declaration : libavformat/avio.h:588</i>
	 */
	public static int avio_open_dyn_buf(Pointer<Pointer<AVIOContext > > s) {
		return avio_open_dyn_buf(Pointer.getPeer(s));
	}
	protected native static int avio_open_dyn_buf(@Ptr long s);
	/**
	 * Return the written size and a pointer to the buffer.<br>
	 * The AVIOContext stream is left intact.<br>
	 * The buffer must NOT be freed.<br>
	 * No padding is added to the buffer.<br>
	 * * @param s IO context<br>
	 * @param pbuffer pointer to a byte buffer<br>
	 * @return the length of the byte buffer<br>
	 * Original signature : <code>int avio_get_dyn_buf(AVIOContext*, uint8_t**)</code><br>
	 * <i>native declaration : libavformat/avio.h:599</i>
	 */
	public static int avio_get_dyn_buf(Pointer<AVIOContext > s, Pointer<Pointer<Byte > > pbuffer) {
		return avio_get_dyn_buf(Pointer.getPeer(s), Pointer.getPeer(pbuffer));
	}
	protected native static int avio_get_dyn_buf(@Ptr long s, @Ptr long pbuffer);
	/**
	 * Return the written size and a pointer to the buffer. The buffer<br>
	 * must be freed with av_free().<br>
	 * Padding of AV_INPUT_BUFFER_PADDING_SIZE is added to the buffer.<br>
	 * * @param s IO context<br>
	 * @param pbuffer pointer to a byte buffer<br>
	 * @return the length of the byte buffer<br>
	 * Original signature : <code>int avio_close_dyn_buf(AVIOContext*, uint8_t**)</code><br>
	 * <i>native declaration : libavformat/avio.h:609</i>
	 */
	public static int avio_close_dyn_buf(Pointer<AVIOContext > s, Pointer<Pointer<Byte > > pbuffer) {
		return avio_close_dyn_buf(Pointer.getPeer(s), Pointer.getPeer(pbuffer));
	}
	protected native static int avio_close_dyn_buf(@Ptr long s, @Ptr long pbuffer);
	/**
	 * Iterate through names of available protocols.<br>
	 * * @param opaque A private pointer representing current protocol.<br>
	 *        It must be a pointer to NULL on first iteration and will<br>
	 *        be updated by successive calls to avio_enum_protocols.<br>
	 * @param output If set to 1, iterate over output protocols,<br>
	 *               otherwise over input protocols.<br>
	 * * @return A static string containing the name of current protocol or NULL<br>
	 * Original signature : <code>char* avio_enum_protocols(void**, int)</code><br>
	 * <i>native declaration : libavformat/avio.h:620</i>
	 */
	public static Pointer<Byte > avio_enum_protocols(Pointer<Pointer<? > > opaque, int output) {
		return Pointer.pointerToAddress(avio_enum_protocols(Pointer.getPeer(opaque), output), Byte.class);
	}
	@Ptr 
	protected native static long avio_enum_protocols(@Ptr long opaque, int output);
	/**
	 * Pause and resume playing - only meaningful if using a network streaming<br>
	 * protocol (e.g. MMS).<br>
	 * * @param h     IO context from which to call the read_pause function pointer<br>
	 * @param pause 1 for pause, 0 for resume<br>
	 * Original signature : <code>int avio_pause(AVIOContext*, int)</code><br>
	 * <i>native declaration : libavformat/avio.h:628</i>
	 */
	public static int avio_pause(Pointer<AVIOContext > h, int pause) {
		return avio_pause(Pointer.getPeer(h), pause);
	}
	protected native static int avio_pause(@Ptr long h, int pause);
	/**
	 * Seek to a given timestamp relative to some component stream.<br>
	 * Only meaningful if using a network streaming protocol (e.g. MMS.).<br>
	 * * @param h IO context from which to call the seek function pointers<br>
	 * @param stream_index The stream index that the timestamp is relative to.<br>
	 *        If stream_index is (-1) the timestamp should be in AV_TIME_BASE<br>
	 *        units from the beginning of the presentation.<br>
	 *        If a stream_index >= 0 is used and the protocol does not support<br>
	 *        seeking based on component streams, the call will fail.<br>
	 * @param timestamp timestamp in AVStream.time_base units<br>
	 *        or if there is no stream specified then in AV_TIME_BASE units.<br>
	 * @param flags Optional combination of AVSEEK_FLAG_BACKWARD, AVSEEK_FLAG_BYTE<br>
	 *        and AVSEEK_FLAG_ANY. The protocol may silently ignore<br>
	 *        AVSEEK_FLAG_BACKWARD and AVSEEK_FLAG_ANY, but AVSEEK_FLAG_BYTE will<br>
	 *        fail if used and not supported.<br>
	 * @return >= 0 on success<br>
	 * @see AVInputFormat::read_seek<br>
	 * Original signature : <code>int64_t avio_seek_time(AVIOContext*, int, int64_t, int)</code><br>
	 * <i>native declaration : libavformat/avio.h:648</i>
	 */
	public static long avio_seek_time(Pointer<AVIOContext > h, int stream_index, long timestamp, int flags) {
		return avio_seek_time(Pointer.getPeer(h), stream_index, timestamp, flags);
	}
	protected native static long avio_seek_time(@Ptr long h, int stream_index, long timestamp, int flags);
	/**
	 * Read contents of h into print buffer, up to max_size bytes, or up to EOF.<br>
	 * * @return 0 for success (max_size bytes read or EOF reached), negative error<br>
	 * code otherwise<br>
	 * Original signature : <code>int avio_read_to_bprint(AVIOContext*, AVBPrint*, size_t)</code><br>
	 * <i>native declaration : libavformat/avio.h:657</i>
	 */
	public static int avio_read_to_bprint(Pointer<AVIOContext > h, Pointer<AVBPrint > pb, @Ptr long max_size) {
		return avio_read_to_bprint(Pointer.getPeer(h), Pointer.getPeer(pb), max_size);
	}
	protected native static int avio_read_to_bprint(@Ptr long h, @Ptr long pb, @Ptr long max_size);
	/**
	 * Accept and allocate a client context on a server context.<br>
	 * @param  s the server context<br>
	 * @param  c the client context, must be unallocated<br>
	 * @return   >= 0 on success or a negative value corresponding<br>
	 *           to an AVERROR on failure<br>
	 * Original signature : <code>int avio_accept(AVIOContext*, AVIOContext**)</code><br>
	 * <i>native declaration : libavformat/avio.h:666</i>
	 */
	public static int avio_accept(Pointer<AVIOContext > s, Pointer<Pointer<AVIOContext > > c) {
		return avio_accept(Pointer.getPeer(s), Pointer.getPeer(c));
	}
	protected native static int avio_accept(@Ptr long s, @Ptr long c);
	/**
	 * Perform one step of the protocol handshake to accept a new client.<br>
	 * This function must be called on a client returned by avio_accept() before<br>
	 * using it as a read/write context.<br>
	 * It is separate from avio_accept() because it may block.<br>
	 * A step of the handshake is defined by places where the application may<br>
	 * decide to change the proceedings.<br>
	 * For example, on a protocol with a request header and a reply header, each<br>
	 * one can constitute a step because the application may use the parameters<br>
	 * from the request to change parameters in the reply; or each individual<br>
	 * chunk of the request can constitute a step.<br>
	 * If the handshake is already finished, avio_handshake() does nothing and<br>
	 * returns 0 immediately.<br>
	 * * @param  c the client context to perform the handshake on<br>
	 * @return   0   on a complete and successful handshake<br>
	 *           > 0 if the handshake progressed, but is not complete<br>
	 *           < 0 for an AVERROR code<br>
	 * Original signature : <code>int avio_handshake(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat/avio.h:686</i>
	 */
	public static int avio_handshake(Pointer<AVIOContext > c) {
		return avio_handshake(Pointer.getPeer(c));
	}
	protected native static int avio_handshake(@Ptr long c);
	/**
	 * Allocate and read the payload of a packet and initialize its<br>
	 * fields with default values.<br>
	 * * @param s    associated IO context<br>
	 * @param pkt packet<br>
	 * @param size desired payload size<br>
	 * @return >0 (read size) if OK, AVERROR_xxx otherwise<br>
	 * Original signature : <code>int av_get_packet(AVIOContext*, AVPacket*, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:15</i>
	 */
	public static int av_get_packet(Pointer<AVIOContext > s, Pointer<AVPacket > pkt, int size) {
		return av_get_packet(Pointer.getPeer(s), Pointer.getPeer(pkt), size);
	}
	protected native static int av_get_packet(@Ptr long s, @Ptr long pkt, int size);
	/**
	 * Read data and append it to the current content of the AVPacket.<br>
	 * If pkt->size is 0 this is identical to av_get_packet.<br>
	 * Note that this uses av_grow_packet and thus involves a realloc<br>
	 * which is inefficient. Thus this function should only be used<br>
	 * when there is no reasonable way to know (an upper bound of)<br>
	 * the final size.<br>
	 * * @param s    associated IO context<br>
	 * @param pkt packet<br>
	 * @param size amount of data to read<br>
	 * @return >0 (read size) if OK, AVERROR_xxx otherwise, previous data<br>
	 *         will not be lost even if an error occurs.<br>
	 * Original signature : <code>int av_append_packet(AVIOContext*, AVPacket*, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:30</i>
	 */
	public static int av_append_packet(Pointer<AVIOContext > s, Pointer<AVPacket > pkt, int size) {
		return av_append_packet(Pointer.getPeer(s), Pointer.getPeer(pkt), size);
	}
	protected native static int av_append_packet(@Ptr long s, @Ptr long pkt, int size);
	/**
	 * Original signature : <code>AVRational av_stream_get_r_frame_rate(const AVStream*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:593</i>
	 */
	public static AVRational av_stream_get_r_frame_rate(Pointer<AVStream > s) {
		return av_stream_get_r_frame_rate(Pointer.getPeer(s));
	}
	protected native static AVRational av_stream_get_r_frame_rate(@Ptr long s);
	/**
	 * Original signature : <code>void av_stream_set_r_frame_rate(AVStream*, AVRational)</code><br>
	 * <i>native declaration : libavformat/avformat.h:595</i>
	 */
	public static void av_stream_set_r_frame_rate(Pointer<AVStream > s, AVRational r) {
		av_stream_set_r_frame_rate(Pointer.getPeer(s), r);
	}
	protected native static void av_stream_set_r_frame_rate(@Ptr long s, AVRational r);
	/**
	 * Original signature : <code>char* av_stream_get_recommended_encoder_configuration(const AVStream*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:597</i>
	 */
	public static Pointer<Byte > av_stream_get_recommended_encoder_configuration(Pointer<AVStream > s) {
		return Pointer.pointerToAddress(av_stream_get_recommended_encoder_configuration(Pointer.getPeer(s)), Byte.class);
	}
	@Ptr 
	protected native static long av_stream_get_recommended_encoder_configuration(@Ptr long s);
	/**
	 * Original signature : <code>void av_stream_set_recommended_encoder_configuration(AVStream*, char*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:599</i>
	 */
	public static void av_stream_set_recommended_encoder_configuration(Pointer<AVStream > s, Pointer<Byte > configuration) {
		av_stream_set_recommended_encoder_configuration(Pointer.getPeer(s), Pointer.getPeer(configuration));
	}
	protected native static void av_stream_set_recommended_encoder_configuration(@Ptr long s, @Ptr long configuration);
	/**
	 * Original signature : <code>AVCodecParserContext* av_stream_get_parser(const AVStream*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:601</i>
	 */
	public static Pointer<AVCodecParserContext > av_stream_get_parser(Pointer<AVStream > s) {
		return Pointer.pointerToAddress(av_stream_get_parser(Pointer.getPeer(s)), AVCodecParserContext.class);
	}
	@Ptr 
	protected native static long av_stream_get_parser(@Ptr long s);
	/**
	 * Returns the pts of the last muxed packet + its duration<br>
	 * * the retuned value is undefined when used with a demuxer.<br>
	 * Original signature : <code>int64_t av_stream_get_end_pts(const AVStream*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:607</i>
	 */
	public static long av_stream_get_end_pts(Pointer<AVStream > st) {
		return av_stream_get_end_pts(Pointer.getPeer(st));
	}
	protected native static long av_stream_get_end_pts(@Ptr long st);
	/**
	 * Original signature : <code>int av_format_get_probe_score(const AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1153</i>
	 */
	public static int av_format_get_probe_score(Pointer<AVFormatContext > s) {
		return av_format_get_probe_score(Pointer.getPeer(s));
	}
	protected native static int av_format_get_probe_score(@Ptr long s);
	/**
	 * Original signature : <code>AVCodec* av_format_get_video_codec(const AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1155</i>
	 */
	public static Pointer<AVCodec > av_format_get_video_codec(Pointer<AVFormatContext > s) {
		return Pointer.pointerToAddress(av_format_get_video_codec(Pointer.getPeer(s)), AVCodec.class);
	}
	@Ptr 
	protected native static long av_format_get_video_codec(@Ptr long s);
	/**
	 * Original signature : <code>void av_format_set_video_codec(AVFormatContext*, AVCodec*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1157</i>
	 */
	public static void av_format_set_video_codec(Pointer<AVFormatContext > s, Pointer<AVCodec > c) {
		av_format_set_video_codec(Pointer.getPeer(s), Pointer.getPeer(c));
	}
	protected native static void av_format_set_video_codec(@Ptr long s, @Ptr long c);
	/**
	 * Original signature : <code>AVCodec* av_format_get_audio_codec(const AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1159</i>
	 */
	public static Pointer<AVCodec > av_format_get_audio_codec(Pointer<AVFormatContext > s) {
		return Pointer.pointerToAddress(av_format_get_audio_codec(Pointer.getPeer(s)), AVCodec.class);
	}
	@Ptr 
	protected native static long av_format_get_audio_codec(@Ptr long s);
	/**
	 * Original signature : <code>void av_format_set_audio_codec(AVFormatContext*, AVCodec*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1161</i>
	 */
	public static void av_format_set_audio_codec(Pointer<AVFormatContext > s, Pointer<AVCodec > c) {
		av_format_set_audio_codec(Pointer.getPeer(s), Pointer.getPeer(c));
	}
	protected native static void av_format_set_audio_codec(@Ptr long s, @Ptr long c);
	/**
	 * Original signature : <code>AVCodec* av_format_get_subtitle_codec(const AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1163</i>
	 */
	public static Pointer<AVCodec > av_format_get_subtitle_codec(Pointer<AVFormatContext > s) {
		return Pointer.pointerToAddress(av_format_get_subtitle_codec(Pointer.getPeer(s)), AVCodec.class);
	}
	@Ptr 
	protected native static long av_format_get_subtitle_codec(@Ptr long s);
	/**
	 * Original signature : <code>void av_format_set_subtitle_codec(AVFormatContext*, AVCodec*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1165</i>
	 */
	public static void av_format_set_subtitle_codec(Pointer<AVFormatContext > s, Pointer<AVCodec > c) {
		av_format_set_subtitle_codec(Pointer.getPeer(s), Pointer.getPeer(c));
	}
	protected native static void av_format_set_subtitle_codec(@Ptr long s, @Ptr long c);
	/**
	 * Original signature : <code>AVCodec* av_format_get_data_codec(const AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1167</i>
	 */
	public static Pointer<AVCodec > av_format_get_data_codec(Pointer<AVFormatContext > s) {
		return Pointer.pointerToAddress(av_format_get_data_codec(Pointer.getPeer(s)), AVCodec.class);
	}
	@Ptr 
	protected native static long av_format_get_data_codec(@Ptr long s);
	/**
	 * Original signature : <code>void av_format_set_data_codec(AVFormatContext*, AVCodec*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1169</i>
	 */
	public static void av_format_set_data_codec(Pointer<AVFormatContext > s, Pointer<AVCodec > c) {
		av_format_set_data_codec(Pointer.getPeer(s), Pointer.getPeer(c));
	}
	protected native static void av_format_set_data_codec(@Ptr long s, @Ptr long c);
	/**
	 * Original signature : <code>int av_format_get_metadata_header_padding(const AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1171</i>
	 */
	public static int av_format_get_metadata_header_padding(Pointer<AVFormatContext > s) {
		return av_format_get_metadata_header_padding(Pointer.getPeer(s));
	}
	protected native static int av_format_get_metadata_header_padding(@Ptr long s);
	/**
	 * Original signature : <code>void av_format_set_metadata_header_padding(AVFormatContext*, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1173</i>
	 */
	public static void av_format_set_metadata_header_padding(Pointer<AVFormatContext > s, int c) {
		av_format_set_metadata_header_padding(Pointer.getPeer(s), c);
	}
	protected native static void av_format_set_metadata_header_padding(@Ptr long s, int c);
	/**
	 * Original signature : <code>void* av_format_get_opaque(const AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1175</i>
	 */
	public static Pointer<? > av_format_get_opaque(Pointer<AVFormatContext > s) {
		return Pointer.pointerToAddress(av_format_get_opaque(Pointer.getPeer(s)));
	}
	@Ptr 
	protected native static long av_format_get_opaque(@Ptr long s);
	/**
	 * Original signature : <code>void av_format_set_opaque(AVFormatContext*, void*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1177</i>
	 */
	public static void av_format_set_opaque(Pointer<AVFormatContext > s, Pointer<? > opaque) {
		av_format_set_opaque(Pointer.getPeer(s), Pointer.getPeer(opaque));
	}
	protected native static void av_format_set_opaque(@Ptr long s, @Ptr long opaque);
	/**
	 * Original signature : <code>av_format_control_message av_format_get_control_message_cb(const AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1179</i>
	 */
	public static Pointer<AvformatLibrary.av_format_control_message > av_format_get_control_message_cb(Pointer<AVFormatContext > s) {
		return Pointer.pointerToAddress(av_format_get_control_message_cb(Pointer.getPeer(s)), AvformatLibrary.av_format_control_message.class);
	}
	@Ptr 
	protected native static long av_format_get_control_message_cb(@Ptr long s);
	/**
	 * Original signature : <code>void av_format_set_control_message_cb(AVFormatContext*, av_format_control_message)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1181</i>
	 */
	public static void av_format_set_control_message_cb(Pointer<AVFormatContext > s, Pointer<AvformatLibrary.av_format_control_message > callback) {
		av_format_set_control_message_cb(Pointer.getPeer(s), Pointer.getPeer(callback));
	}
	protected native static void av_format_set_control_message_cb(@Ptr long s, @Ptr long callback);
	/**
	 * Original signature : <code>AVOpenCallback av_format_get_open_cb(const AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1183</i>
	 */
	public static Pointer<AvformatLibrary.AVOpenCallback > av_format_get_open_cb(Pointer<AVFormatContext > s) {
		return Pointer.pointerToAddress(av_format_get_open_cb(Pointer.getPeer(s)), AvformatLibrary.AVOpenCallback.class);
	}
	@Ptr 
	protected native static long av_format_get_open_cb(@Ptr long s);
	/**
	 * Original signature : <code>void av_format_set_open_cb(AVFormatContext*, AVOpenCallback)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1185</i>
	 */
	public static void av_format_set_open_cb(Pointer<AVFormatContext > s, Pointer<AvformatLibrary.AVOpenCallback > callback) {
		av_format_set_open_cb(Pointer.getPeer(s), Pointer.getPeer(callback));
	}
	protected native static void av_format_set_open_cb(@Ptr long s, @Ptr long callback);
	/**
	 * This function will cause global side data to be injected in the next packet<br>
	 * of each stream as well as after any subsequent seek.<br>
	 * Original signature : <code>void av_format_inject_global_side_data(AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1191</i>
	 */
	public static void av_format_inject_global_side_data(Pointer<AVFormatContext > s) {
		av_format_inject_global_side_data(Pointer.getPeer(s));
	}
	protected native static void av_format_inject_global_side_data(@Ptr long s);
	/**
	 * Returns the method used to set ctx->duration.<br>
	 * * @return AVFMT_DURATION_FROM_PTS, AVFMT_DURATION_FROM_STREAM, or AVFMT_DURATION_FROM_BITRATE.<br>
	 * Original signature : <code>AVDurationEstimationMethod av_fmt_ctx_get_duration_estimation_method(const AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1197</i>
	 */
	public static IntValuedEnum<AvformatLibrary.AVDurationEstimationMethod > av_fmt_ctx_get_duration_estimation_method(Pointer<AVFormatContext > ctx) {
		return FlagSet.fromValue(av_fmt_ctx_get_duration_estimation_method(Pointer.getPeer(ctx)), AvformatLibrary.AVDurationEstimationMethod.class);
	}
	protected native static int av_fmt_ctx_get_duration_estimation_method(@Ptr long ctx);
	/**
	 * Return the LIBAVFORMAT_VERSION_INT constant.<br>
	 * Original signature : <code>int avformat_version()</code><br>
	 * <i>native declaration : libavformat/avformat.h:1206</i>
	 */
	public static native int avformat_version();
	/**
	 * Return the libavformat build-time configuration.<br>
	 * Original signature : <code>char* avformat_configuration()</code><br>
	 * <i>native declaration : libavformat/avformat.h:1211</i>
	 */
	public static Pointer<Byte > avformat__configuration() {
		return Pointer.pointerToAddress(avformat_configuration(), Byte.class);
	}
	@Ptr 
	protected native static long avformat_configuration();
	/**
	 * Return the libavformat license.<br>
	 * Original signature : <code>char* avformat_license()</code><br>
	 * <i>native declaration : libavformat/avformat.h:1216</i>
	 */
	public static Pointer<Byte > avformat__license() {
		return Pointer.pointerToAddress(avformat_license(), Byte.class);
	}
	@Ptr 
	protected native static long avformat_license();
	/**
	 * Original signature : <code>void av_register_all()</code><br>
	 * <i>native declaration : libavformat/avformat.h:1218</i>
	 */
	public static native void av_register_all();
	/**
	 * Original signature : <code>void av_register_input_format(AVInputFormat*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1220</i>
	 */
	public static void av_register_input_format(Pointer<AVInputFormat > format) {
		av_register_input_format(Pointer.getPeer(format));
	}
	protected native static void av_register_input_format(@Ptr long format);
	/**
	 * Original signature : <code>void av_register_output_format(AVOutputFormat*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1222</i>
	 */
	public static void av_register_output_format(Pointer<AVOutputFormat > format) {
		av_register_output_format(Pointer.getPeer(format));
	}
	protected native static void av_register_output_format(@Ptr long format);
	/**
	 * Do global initialization of network libraries. This is optional,<br>
	 * and not recommended anymore.<br>
	 * * This functions only exists to work around thread-safety issues<br>
	 * with older GnuTLS or OpenSSL libraries. If libavformat is linked<br>
	 * to newer versions of those libraries, or if you do not use them,<br>
	 * calling this function is unnecessary. Otherwise, you need to call<br>
	 * this function before any other threads using them are started.<br>
	 * * This function will be deprecated once support for older GnuTLS and<br>
	 * OpenSSL libraries is removed, and this function has no purpose<br>
	 * anymore.<br>
	 * Original signature : <code>int avformat_network_init()</code><br>
	 * <i>native declaration : libavformat/avformat.h:1236</i>
	 */
	public static native int avformat_network_init();
	/**
	 * Undo the initialization done by avformat_network_init. Call it only<br>
	 * once for each time you called avformat_network_init.<br>
	 * Original signature : <code>int avformat_network_deinit()</code><br>
	 * <i>native declaration : libavformat/avformat.h:1242</i>
	 */
	public static native int avformat_network_deinit();
	/**
	 * Original signature : <code>AVInputFormat* av_iformat_next(const AVInputFormat*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1244</i>
	 */
	public static Pointer<AVInputFormat > av_iformat_next(Pointer<AVInputFormat > f) {
		return Pointer.pointerToAddress(av_iformat_next(Pointer.getPeer(f)), AVInputFormat.class);
	}
	@Ptr 
	protected native static long av_iformat_next(@Ptr long f);
	/**
	 * Original signature : <code>AVOutputFormat* av_oformat_next(const AVOutputFormat*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1246</i>
	 */
	public static Pointer<AVOutputFormat > av_oformat_next(Pointer<AVOutputFormat > f) {
		return Pointer.pointerToAddress(av_oformat_next(Pointer.getPeer(f)), AVOutputFormat.class);
	}
	@Ptr 
	protected native static long av_oformat_next(@Ptr long f);
	/**
	 * Iterate over all registered muxers.<br>
	 * * @param opaque a pointer where libavformat will store the iteration state. Must<br>
	 *               point to NULL to start the iteration.<br>
	 * * @return the next registered muxer or NULL when the iteration is<br>
	 *         finished<br>
	 * Original signature : <code>AVOutputFormat* av_muxer_iterate(void**)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1255</i>
	 */
	public static Pointer<AVOutputFormat > av_muxer_iterate(Pointer<Pointer<? > > opaque) {
		return Pointer.pointerToAddress(av_muxer_iterate(Pointer.getPeer(opaque)), AVOutputFormat.class);
	}
	@Ptr 
	protected native static long av_muxer_iterate(@Ptr long opaque);
	/**
	 * Iterate over all registered demuxers.<br>
	 * * @param opaque a pointer where libavformat will store the iteration state. Must<br>
	 *               point to NULL to start the iteration.<br>
	 * * @return the next registered demuxer or NULL when the iteration is<br>
	 *         finished<br>
	 * Original signature : <code>AVInputFormat* av_demuxer_iterate(void**)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1264</i>
	 */
	public static Pointer<AVInputFormat > av_demuxer_iterate(Pointer<Pointer<? > > opaque) {
		return Pointer.pointerToAddress(av_demuxer_iterate(Pointer.getPeer(opaque)), AVInputFormat.class);
	}
	@Ptr 
	protected native static long av_demuxer_iterate(@Ptr long opaque);
	/**
	 * Allocate an AVFormatContext.<br>
	 * avformat_free_context() can be used to free the context and everything<br>
	 * allocated by the framework within it.<br>
	 * Original signature : <code>AVFormatContext* avformat_alloc_context()</code><br>
	 * <i>native declaration : libavformat/avformat.h:1271</i>
	 */
	public static Pointer<AVFormatContext > alloc_context() {
		return Pointer.pointerToAddress(avformat_alloc_context(), AVFormatContext.class);
	}
	@Ptr 
	protected native static long avformat_alloc_context();
	/**
	 * Free an AVFormatContext and all its streams.<br>
	 * @param s context to free<br>
	 * Original signature : <code>void avformat_free_context(AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1277</i>
	 */
	public static void avformat_free_context(Pointer<AVFormatContext > s) {
		avformat_free_context(Pointer.getPeer(s));
	}
	protected native static void avformat_free_context(@Ptr long s);
	/**
	 * Get the AVClass for AVFormatContext. It can be used in combination with<br>
	 * AV_OPT_SEARCH_FAKE_OBJ for examining options.<br>
	 * * @see av_opt_find().<br>
	 * Original signature : <code>AVClass* avformat_get_class()</code><br>
	 * <i>native declaration : libavformat/avformat.h:1284</i>
	 */
	public static Pointer<AVClass > avformat__get_class() {
		return Pointer.pointerToAddress(avformat_get_class(), AVClass.class);
	}
	@Ptr 
	protected native static long avformat_get_class();
	/**
	 * Add a new stream to a media file.<br>
	 * * When demuxing, it is called by the demuxer in read_header(). If the<br>
	 * flag AVFMTCTX_NOHEADER is set in s.ctx_flags, then it may also<br>
	 * be called in read_packet().<br>
	 * * When muxing, should be called by the user before avformat_write_header().<br>
	 * * User is required to call avcodec_close() and avformat_free_context() to<br>
	 * clean up the allocation by avformat_new_stream().<br>
	 * * @param s media file handle<br>
	 * @param c If non-NULL, the AVCodecContext corresponding to the new stream<br>
	 * will be initialized to use this codec. This is needed for e.g. codec-specific<br>
	 * defaults to be set, so codec should be provided if it is known.<br>
	 * * @return newly created stream or NULL on error.<br>
	 * Original signature : <code>AVStream* avformat_new_stream(AVFormatContext*, const AVCodec*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1300</i>
	 */
	public static Pointer<AVStream > avformat_new_stream(Pointer<AVFormatContext > s, Pointer<AVCodec > c) {
		return Pointer.pointerToAddress(avformat_new_stream(Pointer.getPeer(s), Pointer.getPeer(c)), AVStream.class);
	}
	@Ptr 
	protected native static long avformat_new_stream(@Ptr long s, @Ptr long c);
	/**
	 * Wrap an existing array as stream side data.<br>
	 * * @param st stream<br>
	 * @param type side information type<br>
	 * @param data the side data array. It must be allocated with the av_malloc()<br>
	 *             family of functions. The ownership of the data is transferred to<br>
	 *             st.<br>
	 * @param size side information size<br>
	 * @return zero on success, a negative AVERROR code on failure. On failure,<br>
	 *         the stream is unchanged and the data remains owned by the caller.<br>
	 * Original signature : <code>int av_stream_add_side_data(AVStream*, AVPacketSideDataType, uint8_t*, size_t)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1313</i>
	 */
	public static int av_stream_add_side_data(Pointer<AVStream > st, IntValuedEnum<AVPacketSideDataType > type, Pointer<Byte > data, @Ptr long size) {
		return av_stream_add_side_data(Pointer.getPeer(st), (int)type.value(), Pointer.getPeer(data), size);
	}
	protected native static int av_stream_add_side_data(@Ptr long st, int type, @Ptr long data, @Ptr long size);
	/**
	 * Allocate new information from stream.<br>
	 * * @param stream stream<br>
	 * @param type desired side information type<br>
	 * @param size side information size<br>
	 * @return pointer to fresh allocated data or NULL otherwise<br>
	 * Original signature : <code>uint8_t* av_stream_new_side_data(AVStream*, AVPacketSideDataType, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1322</i>
	 */
	public static Pointer<Byte > av_stream_new_side_data(Pointer<AVStream > stream, IntValuedEnum<AVPacketSideDataType > type, int size) {
		return Pointer.pointerToAddress(av_stream_new_side_data(Pointer.getPeer(stream), (int)type.value(), size), Byte.class);
	}
	@Ptr 
	protected native static long av_stream_new_side_data(@Ptr long stream, int type, int size);
	/**
	 * Get side information from stream.<br>
	 * * @param stream stream<br>
	 * @param type desired side information type<br>
	 * @param size pointer for side information size to store (optional)<br>
	 * @return pointer to data if present or NULL otherwise<br>
	 * Original signature : <code>uint8_t* av_stream_get_side_data(const AVStream*, AVPacketSideDataType, int*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1331</i>
	 */
	public static Pointer<Byte > av_stream_get_side_data(Pointer<AVStream > stream, IntValuedEnum<AVPacketSideDataType > type, Pointer<Integer > size) {
		return Pointer.pointerToAddress(av_stream_get_side_data(Pointer.getPeer(stream), (int)type.value(), Pointer.getPeer(size)), Byte.class);
	}
	@Ptr 
	protected native static long av_stream_get_side_data(@Ptr long stream, int type, @Ptr long size);
	/**
	 * Original signature : <code>AVProgram* av_new_program(AVFormatContext*, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1333</i>
	 */
	public static Pointer<AVProgram > av_new_program(Pointer<AVFormatContext > s, int id) {
		return Pointer.pointerToAddress(av_new_program(Pointer.getPeer(s), id), AVProgram.class);
	}
	@Ptr 
	protected native static long av_new_program(@Ptr long s, int id);
	/**
	 * Allocate an AVFormatContext for an output format.<br>
	 * avformat_free_context() can be used to free the context and<br>
	 * everything allocated by the framework within it.<br>
	 * * @param *ctx is set to the created format context, or to NULL in<br>
	 * case of failure<br>
	 * @param oformat format to use for allocating the context, if NULL<br>
	 * format_name and filename are used instead<br>
	 * @param format_name the name of output format to use for allocating the<br>
	 * context, if NULL filename is used instead<br>
	 * @param filename the name of the filename to use for allocating the<br>
	 * context, may be NULL<br>
	 * @return >= 0 in case of success, a negative AVERROR code in case of<br>
	 * failure<br>
	 * Original signature : <code>int avformat_alloc_output_context2(AVFormatContext**, AVOutputFormat*, const char*, const char*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1350</i>
	 */
	public static int avformat_alloc_output_context2(Pointer<Pointer<AVFormatContext > > ctx, Pointer<AVOutputFormat > oformat, Pointer<Byte > format_name, Pointer<Byte > filename) {
		return avformat_alloc_output_context2(Pointer.getPeer(ctx), Pointer.getPeer(oformat), Pointer.getPeer(format_name), Pointer.getPeer(filename));
	}
	protected native static int avformat_alloc_output_context2(@Ptr long ctx, @Ptr long oformat, @Ptr long format_name, @Ptr long filename);
	/**
	 * Find AVInputFormat based on the short name of the input format.<br>
	 * Original signature : <code>AVInputFormat* av_find_input_format(const char*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1355</i>
	 */
	public static Pointer<AVInputFormat > av_find_input_format(Pointer<Byte > short_name) {
		return Pointer.pointerToAddress(av_find_input_format(Pointer.getPeer(short_name)), AVInputFormat.class);
	}
	@Ptr 
	protected native static long av_find_input_format(@Ptr long short_name);
	/**
	 * Guess the file format.<br>
	 * * @param pd        data to be probed<br>
	 * @param is_opened Whether the file is already opened; determines whether<br>
	 *                  demuxers with or without AVFMT_NOFILE are probed.<br>
	 * Original signature : <code>AVInputFormat* av_probe_input_format(AVProbeData*, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1363</i>
	 */
	public static Pointer<AVInputFormat > av_probe_input_format(Pointer<AVProbeData > pd, int is_opened) {
		return Pointer.pointerToAddress(av_probe_input_format(Pointer.getPeer(pd), is_opened), AVInputFormat.class);
	}
	@Ptr 
	protected native static long av_probe_input_format(@Ptr long pd, int is_opened);
	/**
	 * Guess the file format.<br>
	 * * @param pd        data to be probed<br>
	 * @param is_opened Whether the file is already opened; determines whether<br>
	 *                  demuxers with or without AVFMT_NOFILE are probed.<br>
	 * @param score_max A probe score larger that this is required to accept a<br>
	 *                  detection, the variable is set to the actual detection<br>
	 *                  score afterwards.<br>
	 *                  If the score is <= AVPROBE_SCORE_MAX / 4 it is recommended<br>
	 *                  to retry with a larger probe buffer.<br>
	 * Original signature : <code>AVInputFormat* av_probe_input_format2(AVProbeData*, int, int*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1376</i>
	 */
	public static Pointer<AVInputFormat > av_probe_input_format2(Pointer<AVProbeData > pd, int is_opened, Pointer<Integer > score_max) {
		return Pointer.pointerToAddress(av_probe_input_format2(Pointer.getPeer(pd), is_opened, Pointer.getPeer(score_max)), AVInputFormat.class);
	}
	@Ptr 
	protected native static long av_probe_input_format2(@Ptr long pd, int is_opened, @Ptr long score_max);
	/**
	 * Guess the file format.<br>
	 * * @param is_opened Whether the file is already opened; determines whether<br>
	 *                  demuxers with or without AVFMT_NOFILE are probed.<br>
	 * @param score_ret The score of the best detection.<br>
	 * Original signature : <code>AVInputFormat* av_probe_input_format3(AVProbeData*, int, int*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1384</i>
	 */
	public static Pointer<AVInputFormat > av_probe_input_format3(Pointer<AVProbeData > pd, int is_opened, Pointer<Integer > score_ret) {
		return Pointer.pointerToAddress(av_probe_input_format3(Pointer.getPeer(pd), is_opened, Pointer.getPeer(score_ret)), AVInputFormat.class);
	}
	@Ptr 
	protected native static long av_probe_input_format3(@Ptr long pd, int is_opened, @Ptr long score_ret);
	/**
	 * Probe a bytestream to determine the input format. Each time a probe returns<br>
	 * with a score that is too low, the probe buffer size is increased and another<br>
	 * attempt is made. When the maximum probe size is reached, the input format<br>
	 * with the highest score is returned.<br>
	 * * @param pb the bytestream to probe<br>
	 * @param fmt the input format is put here<br>
	 * @param url the url of the stream<br>
	 * @param logctx the log context<br>
	 * @param offset the offset within the bytestream to probe from<br>
	 * @param max_probe_size the maximum probe buffer size (zero for default)<br>
	 * @return the score in case of success, a negative value corresponding to an<br>
	 *         the maximal score is AVPROBE_SCORE_MAX<br>
	 * AVERROR code otherwise<br>
	 * Original signature : <code>int av_probe_input_buffer2(AVIOContext*, AVInputFormat**, const char*, void*, unsigned int, unsigned int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1401</i>
	 */
	public static int av_probe_input_buffer2(Pointer<AVIOContext > pb, Pointer<Pointer<AVInputFormat > > fmt, Pointer<Byte > url, Pointer<? > logctx, int offset, int max_probe_size) {
		return av_probe_input_buffer2(Pointer.getPeer(pb), Pointer.getPeer(fmt), Pointer.getPeer(url), Pointer.getPeer(logctx), offset, max_probe_size);
	}
	protected native static int av_probe_input_buffer2(@Ptr long pb, @Ptr long fmt, @Ptr long url, @Ptr long logctx, int offset, int max_probe_size);
	/**
	 * Like av_probe_input_buffer2() but returns 0 on success<br>
	 * Original signature : <code>int av_probe_input_buffer(AVIOContext*, AVInputFormat**, const char*, void*, unsigned int, unsigned int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1406</i>
	 */
	public static int av_probe_input_buffer(Pointer<AVIOContext > pb, Pointer<Pointer<AVInputFormat > > fmt, Pointer<Byte > url, Pointer<? > logctx, int offset, int max_probe_size) {
		return av_probe_input_buffer(Pointer.getPeer(pb), Pointer.getPeer(fmt), Pointer.getPeer(url), Pointer.getPeer(logctx), offset, max_probe_size);
	}
	protected native static int av_probe_input_buffer(@Ptr long pb, @Ptr long fmt, @Ptr long url, @Ptr long logctx, int offset, int max_probe_size);
	/**
	 * Open an input stream and read the header. The codecs are not opened.<br>
	 * The stream must be closed with avformat_close_input().<br>
	 * * @param ps Pointer to user-supplied AVFormatContext (allocated by avformat_alloc_context).<br>
	 *           May be a pointer to NULL, in which case an AVFormatContext is allocated by this<br>
	 *           function and written into ps.<br>
	 *           Note that a user-supplied AVFormatContext will be freed on failure.<br>
	 * @param url URL of the stream to open.<br>
	 * @param fmt If non-NULL, this parameter forces a specific input format.<br>
	 *            Otherwise the format is autodetected.<br>
	 * @param options  A dictionary filled with AVFormatContext and demuxer-private options.<br>
	 *                 On return this parameter will be destroyed and replaced with a dict containing<br>
	 *                 options that were not found. May be NULL.<br>
	 * * @return 0 on success, a negative AVERROR on failure.<br>
	 * * @note If you want to use custom IO, preallocate the format context and set its pb field.<br>
	 * Original signature : <code>int avformat_open_input(AVFormatContext**, const char*, AVInputFormat*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1424</i>
	 */
	public static int avformat_open_input(Pointer<Pointer<AVFormatContext > > ps, Pointer<Byte > url, Pointer<AVInputFormat > fmt, Pointer<Pointer<AVDictionary > > options) {
		return avformat_open_input(Pointer.getPeer(ps), Pointer.getPeer(url), Pointer.getPeer(fmt), Pointer.getPeer(options));
	}
	protected native static int avformat_open_input(@Ptr long ps, @Ptr long url, @Ptr long fmt, @Ptr long options);
	/**
	 * Original signature : <code>int av_demuxer_open(AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1426</i>
	 */
	public static int av_demuxer_open(Pointer<AVFormatContext > ic) {
		return av_demuxer_open(Pointer.getPeer(ic));
	}
	protected native static int av_demuxer_open(@Ptr long ic);
	/**
	 * Read packets of a media file to get stream information. This<br>
	 * is useful for file formats with no headers such as MPEG. This<br>
	 * function also computes the real framerate in case of MPEG-2 repeat<br>
	 * frame mode.<br>
	 * The logical file position is not changed by this function;<br>
	 * examined packets may be buffered for later processing.<br>
	 * * @param ic media file handle<br>
	 * @param options  If non-NULL, an ic.nb_streams long array of pointers to<br>
	 *                 dictionaries, where i-th member contains options for<br>
	 *                 codec corresponding to i-th stream.<br>
	 *                 On return each dictionary will be filled with options that were not found.<br>
	 * @return >=0 if OK, AVERROR_xxx on error<br>
	 * * @note this function isn't guaranteed to open all the codecs, so<br>
	 *       options being non-empty at return is a perfectly normal behavior.<br>
	 * * @todo Let the user decide somehow what information is needed so that<br>
	 *       we do not waste time getting stuff the user does not need.<br>
	 * Original signature : <code>int avformat_find_stream_info(AVFormatContext*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1446</i>
	 */
	public static int avformat_find_stream_info(Pointer<AVFormatContext > ic, Pointer<Pointer<AVDictionary > > options) {
		return avformat_find_stream_info(Pointer.getPeer(ic), Pointer.getPeer(options));
	}
	protected native static int avformat_find_stream_info(@Ptr long ic, @Ptr long options);
	/**
	 * Find the programs which belong to a given stream.<br>
	 * * @param ic    media file handle<br>
	 * @param last  the last found program, the search will start after this<br>
	 *              program, or from the beginning if it is NULL<br>
	 * @param s     stream index<br>
	 * @return the next program which belongs to s, NULL if no program is found or<br>
	 *         the last program is not among the programs of ic.<br>
	 * Original signature : <code>AVProgram* av_find_program_from_stream(AVFormatContext*, AVProgram*, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1457</i>
	 */
	public static Pointer<AVProgram > av_find_program_from_stream(Pointer<AVFormatContext > ic, Pointer<AVProgram > last, int s) {
		return Pointer.pointerToAddress(av_find_program_from_stream(Pointer.getPeer(ic), Pointer.getPeer(last), s), AVProgram.class);
	}
	@Ptr 
	protected native static long av_find_program_from_stream(@Ptr long ic, @Ptr long last, int s);
	/**
	 * Original signature : <code>void av_program_add_stream_index(AVFormatContext*, int, unsigned int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1459</i>
	 */
	public static void av_program_add_stream_index(Pointer<AVFormatContext > ac, int progid, int idx) {
		av_program_add_stream_index(Pointer.getPeer(ac), progid, idx);
	}
	protected native static void av_program_add_stream_index(@Ptr long ac, int progid, int idx);
	/**
	 * Find the "best" stream in the file.<br>
	 * The best stream is determined according to various heuristics as the most<br>
	 * likely to be what the user expects.<br>
	 * If the decoder parameter is non-NULL, av_find_best_stream will find the<br>
	 * default decoder for the stream's codec; streams for which no decoder can<br>
	 * be found are ignored.<br>
	 * * @param ic                media file handle<br>
	 * @param type              stream type: video, audio, subtitles, etc.<br>
	 * @param wanted_stream_nb  user-requested stream number,<br>
	 *                          or -1 for automatic selection<br>
	 * @param related_stream    try to find a stream related (eg. in the same<br>
	 *                          program) to this one, or -1 if none<br>
	 * @param decoder_ret       if non-NULL, returns the decoder for the<br>
	 *                          selected stream<br>
	 * @param flags             flags; none are currently defined<br>
	 * @return  the non-negative stream number in case of success,<br>
	 *          AVERROR_STREAM_NOT_FOUND if no stream with the requested type<br>
	 *          could be found,<br>
	 *          AVERROR_DECODER_NOT_FOUND if streams were found but no decoder<br>
	 * @note  If av_find_best_stream returns successfully and decoder_ret is not<br>
	 *        NULL, then *decoder_ret is guaranteed to be set to a valid AVCodec.<br>
	 * Original signature : <code>int av_find_best_stream(AVFormatContext*, AVMediaType, int, int, AVCodec**, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1484</i>
	 */
	public static int av_find_best_stream(Pointer<AVFormatContext > ic, IntValuedEnum<AVMediaType > type, int wanted_stream_nb, int related_stream, Pointer<Pointer<AVCodec > > decoder_ret, int flags) {
		return av_find_best_stream(Pointer.getPeer(ic), (int)type.value(), wanted_stream_nb, related_stream, Pointer.getPeer(decoder_ret), flags);
	}
	protected native static int av_find_best_stream(@Ptr long ic, int type, int wanted_stream_nb, int related_stream, @Ptr long decoder_ret, int flags);
	/**
	 * Return the next frame of a stream.<br>
	 * This function returns what is stored in the file, and does not validate<br>
	 * that what is there are valid frames for the decoder. It will split what is<br>
	 * stored in the file into frames and return one for each call. It will not<br>
	 * omit invalid data between valid frames so as to give the decoder the maximum<br>
	 * information possible for decoding.<br>
	 * * If pkt->buf is NULL, then the packet is valid until the next<br>
	 * av_read_frame() or until avformat_close_input(). Otherwise the packet<br>
	 * is valid indefinitely. In both cases the packet must be freed with<br>
	 * av_packet_unref when it is no longer needed. For video, the packet contains<br>
	 * exactly one frame. For audio, it contains an integer number of frames if each<br>
	 * frame has a known fixed size (e.g. PCM or ADPCM data). If the audio frames<br>
	 * have a variable size (e.g. MPEG audio), then it contains one frame.<br>
	 * * pkt->pts, pkt->dts and pkt->duration are always set to correct<br>
	 * values in AVStream.time_base units (and guessed if the format cannot<br>
	 * provide them). pkt->pts can be AV_NOPTS_VALUE if the video format<br>
	 * has B-frames, so it is better to rely on pkt->dts if you do not<br>
	 * decompress the payload.<br>
	 * * @return 0 if OK, < 0 on error or end of file<br>
	 * Original signature : <code>int av_read_frame(AVFormatContext*, AVPacket*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1507</i>
	 */
	public static int av_read_frame(Pointer<AVFormatContext > s, Pointer<AVPacket > pkt) {
		return av_read_frame(Pointer.getPeer(s), Pointer.getPeer(pkt));
	}
	protected native static int av_read_frame(@Ptr long s, @Ptr long pkt);
	/**
	 * Seek to the keyframe at timestamp.<br>
	 * 'timestamp' in 'stream_index'.<br>
	 * * @param s media file handle<br>
	 * @param stream_index If stream_index is (-1), a default<br>
	 * stream is selected, and timestamp is automatically converted<br>
	 * from AV_TIME_BASE units to the stream specific time_base.<br>
	 * @param timestamp Timestamp in AVStream.time_base units<br>
	 *        or, if no stream is specified, in AV_TIME_BASE units.<br>
	 * @param flags flags which select direction and seeking mode<br>
	 * @return >= 0 on success<br>
	 * Original signature : <code>int av_seek_frame(AVFormatContext*, int, int64_t, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1521</i>
	 */
	public static int av_seek_frame(Pointer<AVFormatContext > s, int stream_index, long timestamp, int flags) {
		return av_seek_frame(Pointer.getPeer(s), stream_index, timestamp, flags);
	}
	protected native static int av_seek_frame(@Ptr long s, int stream_index, long timestamp, int flags);
	/**
	 * Seek to timestamp ts.<br>
	 * Seeking will be done so that the point from which all active streams<br>
	 * can be presented successfully will be closest to ts and within min/max_ts.<br>
	 * Active streams are all streams that have AVStream.discard < AVDISCARD_ALL.<br>
	 * * If flags contain AVSEEK_FLAG_BYTE, then all timestamps are in bytes and<br>
	 * are the file position (this may not be supported by all demuxers).<br>
	 * If flags contain AVSEEK_FLAG_FRAME, then all timestamps are in frames<br>
	 * in the stream with stream_index (this may not be supported by all demuxers).<br>
	 * Otherwise all timestamps are in units of the stream selected by stream_index<br>
	 * or if stream_index is -1, in AV_TIME_BASE units.<br>
	 * If flags contain AVSEEK_FLAG_ANY, then non-keyframes are treated as<br>
	 * keyframes (this may not be supported by all demuxers).<br>
	 * If flags contain AVSEEK_FLAG_BACKWARD, it is ignored.<br>
	 * * @param s media file handle<br>
	 * @param stream_index index of the stream which is used as time base reference<br>
	 * @param min_ts smallest acceptable timestamp<br>
	 * @param ts target timestamp<br>
	 * @param max_ts largest acceptable timestamp<br>
	 * @param flags flags<br>
	 * @return >=0 on success, error code otherwise<br>
	 * * @note This is part of the new seek API which is still under construction.<br>
	 *       Thus do not use this yet. It may change at any time, do not expect<br>
	 *       ABI compatibility yet!<br>
	 * Original signature : <code>int avformat_seek_file(AVFormatContext*, int, int64_t, int64_t, int64_t, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1548</i>
	 */
	public static int avformat_seek_file(Pointer<AVFormatContext > s, int stream_index, long min_ts, long ts, long max_ts, int flags) {
		return avformat_seek_file(Pointer.getPeer(s), stream_index, min_ts, ts, max_ts, flags);
	}
	protected native static int avformat_seek_file(@Ptr long s, int stream_index, long min_ts, long ts, long max_ts, int flags);
	/**
	 * Discard all internally buffered data. This can be useful when dealing with<br>
	 * discontinuities in the byte stream. Generally works only with formats that<br>
	 * can resync. This includes headerless formats like MPEG-TS/TS but should also<br>
	 * work with NUT, Ogg and in a limited way AVI for example.<br>
	 * * The set of streams, the detected duration, stream parameters and codecs do<br>
	 * not change when calling this function. If you want a complete reset, it's<br>
	 * better to open a new AVFormatContext.<br>
	 * * This does not flush the AVIOContext (s->pb). If necessary, call<br>
	 * avio_flush(s->pb) before calling this function.<br>
	 * * @param s media file handle<br>
	 * @return >=0 on success, error code otherwise<br>
	 * Original signature : <code>int avformat_flush(AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1563</i>
	 */
	public static int avformat_flush(Pointer<AVFormatContext > s) {
		return avformat_flush(Pointer.getPeer(s));
	}
	protected native static int avformat_flush(@Ptr long s);
	/**
	 * Start playing a network-based stream (e.g. RTSP stream) at the<br>
	 * current position.<br>
	 * Original signature : <code>int av_read_play(AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1569</i>
	 */
	public static int av_read_play(Pointer<AVFormatContext > s) {
		return av_read_play(Pointer.getPeer(s));
	}
	protected native static int av_read_play(@Ptr long s);
	/**
	 * Pause a network-based stream (e.g. RTSP stream).<br>
	 * * Use av_read_play() to resume it.<br>
	 * Original signature : <code>int av_read_pause(AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1575</i>
	 */
	public static int av_read_pause(Pointer<AVFormatContext > s) {
		return av_read_pause(Pointer.getPeer(s));
	}
	protected native static int av_read_pause(@Ptr long s);
	/**
	 * Close an opened input AVFormatContext. Free it and all its contents<br>
	 * and set *s to NULL.<br>
	 * Original signature : <code>void avformat_close_input(AVFormatContext**)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1581</i>
	 */
	public static void avformat_close_input(Pointer<Pointer<AVFormatContext > > s) {
		avformat_close_input(Pointer.getPeer(s));
	}
	protected native static void avformat_close_input(@Ptr long s);
	/**
	 * Original signature : <code>int avformat_write_header(AVFormatContext*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1583</i>
	 */
	public static int avformat_write_header(Pointer<AVFormatContext > s, Pointer<Pointer<AVDictionary > > options) {
		return avformat_write_header(Pointer.getPeer(s), Pointer.getPeer(options));
	}
	protected native static int avformat_write_header(@Ptr long s, @Ptr long options);
	/**
	 * Original signature : <code>int avformat_init_output(AVFormatContext*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1585</i>
	 */
	public static int avformat_init_output(Pointer<AVFormatContext > s, Pointer<Pointer<AVDictionary > > options) {
		return avformat_init_output(Pointer.getPeer(s), Pointer.getPeer(options));
	}
	protected native static int avformat_init_output(@Ptr long s, @Ptr long options);
	/**
	 * Write a packet to an output media file.<br>
	 * * This function passes the packet directly to the muxer, without any buffering<br>
	 * or reordering. The caller is responsible for correctly interleaving the<br>
	 * packets if the format requires it. Callers that want libavformat to handle<br>
	 * the interleaving should call av_interleaved_write_frame() instead of this<br>
	 * function.<br>
	 * * @param s media file handle<br>
	 * @param pkt The packet containing the data to be written. Note that unlike<br>
	 *            av_interleaved_write_frame(), this function does not take<br>
	 *            ownership of the packet passed to it (though some muxers may make<br>
	 *            an internal reference to the input packet).<br>
	 *            <br>
	 *            This parameter can be NULL (at any time, not just at the end), in<br>
	 *            order to immediately flush data buffered within the muxer, for<br>
	 *            muxers that buffer up data internally before writing it to the<br>
	 *            output.<br>
	 *            <br>
	 *            Packet's @ref AVPacket.stream_index "stream_index" field must be<br>
	 *            set to the index of the corresponding stream in @ref<br>
	 *            AVFormatContext.streams "s->streams".<br>
	 *            <br>
	 *            The timestamps (@ref AVPacket.pts "pts", @ref AVPacket.dts "dts")<br>
	 *            must be set to correct values in the stream's timebase (unless the<br>
	 *            output format is flagged with the AVFMT_NOTIMESTAMPS flag, then<br>
	 *            they can be set to AV_NOPTS_VALUE).<br>
	 *            The dts for subsequent packets passed to this function must be strictly<br>
	 *            increasing when compared in their respective timebases (unless the<br>
	 *            output format is flagged with the AVFMT_TS_NONSTRICT, then they<br>
	 *            merely have to be nondecreasing).  @ref AVPacket.duration<br>
	 *            "duration") should also be set if known.<br>
	 * @return < 0 on error, = 0 if OK, 1 if flushed and there is no more data to flush<br>
	 * * @see av_interleaved_write_frame()<br>
	 * Original signature : <code>int av_write_frame(AVFormatContext*, AVPacket*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1621</i>
	 */
	public static int av_write_frame(Pointer<AVFormatContext > s, Pointer<AVPacket > pkt) {
		return av_write_frame(Pointer.getPeer(s), Pointer.getPeer(pkt));
	}
	protected native static int av_write_frame(@Ptr long s, @Ptr long pkt);
	/**
	 * Write a packet to an output media file ensuring correct interleaving.<br>
	 * * This function will buffer the packets internally as needed to make sure the<br>
	 * packets in the output file are properly interleaved in the order of<br>
	 * increasing dts. Callers doing their own interleaving should call<br>
	 * av_write_frame() instead of this function.<br>
	 * * Using this function instead of av_write_frame() can give muxers advance<br>
	 * knowledge of future packets, improving e.g. the behaviour of the mp4<br>
	 * muxer for VFR content in fragmenting mode.<br>
	 * * @param s media file handle<br>
	 * @param pkt The packet containing the data to be written.<br>
	 *            <br>
	 *            If the packet is reference-counted, this function will take<br>
	 *            ownership of this reference and unreference it later when it sees<br>
	 *            fit.<br>
	 *            The caller must not access the data through this reference after<br>
	 *            this function returns. If the packet is not reference-counted,<br>
	 *            libavformat will make a copy.<br>
	 *            <br>
	 *            This parameter can be NULL (at any time, not just at the end), to<br>
	 *            flush the interleaving queues.<br>
	 *            <br>
	 *            Packet's @ref AVPacket.stream_index "stream_index" field must be<br>
	 *            set to the index of the corresponding stream in @ref<br>
	 *            AVFormatContext.streams "s->streams".<br>
	 *            <br>
	 *            The timestamps (@ref AVPacket.pts "pts", @ref AVPacket.dts "dts")<br>
	 *            must be set to correct values in the stream's timebase (unless the<br>
	 *            output format is flagged with the AVFMT_NOTIMESTAMPS flag, then<br>
	 *            they can be set to AV_NOPTS_VALUE).<br>
	 *            The dts for subsequent packets in one stream must be strictly<br>
	 *            increasing (unless the output format is flagged with the<br>
	 *            AVFMT_TS_NONSTRICT, then they merely have to be nondecreasing).<br>
	 *            @ref AVPacket.duration "duration") should also be set if known.<br>
	 * * @return 0 on success, a negative AVERROR on error. Libavformat will always<br>
	 *         take care of freeing the packet, even if this function fails.<br>
	 * * @see av_write_frame(), AVFormatContext.max_interleave_delta<br>
	 * Original signature : <code>int av_interleaved_write_frame(AVFormatContext*, AVPacket*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1661</i>
	 */
	public static int av_interleaved_write_frame(Pointer<AVFormatContext > s, Pointer<AVPacket > pkt) {
		return av_interleaved_write_frame(Pointer.getPeer(s), Pointer.getPeer(pkt));
	}
	protected native static int av_interleaved_write_frame(@Ptr long s, @Ptr long pkt);
	/**
	 * Write an uncoded frame to an output media file.<br>
	 * * The frame must be correctly interleaved according to the container<br>
	 * specification; if not, then av_interleaved_write_frame() must be used.<br>
	 * * See av_interleaved_write_frame() for details.<br>
	 * Original signature : <code>int av_write_uncoded_frame(AVFormatContext*, int, AVFrame*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1669</i>
	 */
	public static int av_write_uncoded_frame(Pointer<AVFormatContext > s, int stream_index, Pointer<AVFrame > frame) {
		return av_write_uncoded_frame(Pointer.getPeer(s), stream_index, Pointer.getPeer(frame));
	}
	protected native static int av_write_uncoded_frame(@Ptr long s, int stream_index, @Ptr long frame);
	/**
	 * Write an uncoded frame to an output media file.<br>
	 * * If the muxer supports it, this function makes it possible to write an AVFrame<br>
	 * structure directly, without encoding it into a packet.<br>
	 * It is mostly useful for devices and similar special muxers that use raw<br>
	 * video or PCM data and will not serialize it into a byte stream.<br>
	 * * To test whether it is possible to use it with a given muxer and stream,<br>
	 * use av_write_uncoded_frame_query().<br>
	 * * The caller gives up ownership of the frame and must not access it<br>
	 * afterwards.<br>
	 * * @return  >=0 for success, a negative code on error<br>
	 * Original signature : <code>int av_interleaved_write_uncoded_frame(AVFormatContext*, int, AVFrame*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1683</i>
	 */
	public static int av_interleaved_write_uncoded_frame(Pointer<AVFormatContext > s, int stream_index, Pointer<AVFrame > frame) {
		return av_interleaved_write_uncoded_frame(Pointer.getPeer(s), stream_index, Pointer.getPeer(frame));
	}
	protected native static int av_interleaved_write_uncoded_frame(@Ptr long s, int stream_index, @Ptr long frame);
	/**
	 * Test whether a muxer supports uncoded frame.<br>
	 * * @return  >=0 if an uncoded frame can be written to that muxer and stream,<br>
	 *          <0 if not<br>
	 * Original signature : <code>int av_write_uncoded_frame_query(AVFormatContext*, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1690</i>
	 */
	public static int av_write_uncoded_frame_query(Pointer<AVFormatContext > s, int stream_index) {
		return av_write_uncoded_frame_query(Pointer.getPeer(s), stream_index);
	}
	protected native static int av_write_uncoded_frame_query(@Ptr long s, int stream_index);
	/**
	 * Write the stream trailer to an output media file and free the<br>
	 * file private data.<br>
	 * * May only be called after a successful call to avformat_write_header.<br>
	 * * @param s media file handle<br>
	 * @return 0 if OK, AVERROR_xxx on error<br>
	 * Original signature : <code>int av_write_trailer(AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1699</i>
	 */
	public static int av_write_trailer(Pointer<AVFormatContext > s) {
		return av_write_trailer(Pointer.getPeer(s));
	}
	protected native static int av_write_trailer(@Ptr long s);
	/**
	 * Return the output format in the list of registered output formats<br>
	 * which best matches the provided parameters, or return NULL if<br>
	 * there is no match.<br>
	 * * @param short_name if non-NULL checks if short_name matches with the<br>
	 * names of the registered formats<br>
	 * @param filename if non-NULL checks if filename terminates with the<br>
	 * extensions of the registered formats<br>
	 * @param mime_type if non-NULL checks if mime_type matches with the<br>
	 * MIME type of the registered formats<br>
	 * Original signature : <code>AVOutputFormat* av_guess_format(const char*, const char*, const char*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1712</i>
	 */
	public static Pointer<AVOutputFormat > av_guess_format(Pointer<Byte > short_name, Pointer<Byte > filename, Pointer<Byte > mime_type) {
		return Pointer.pointerToAddress(av_guess_format(Pointer.getPeer(short_name), Pointer.getPeer(filename), Pointer.getPeer(mime_type)), AVOutputFormat.class);
	}
	@Ptr 
	protected native static long av_guess_format(@Ptr long short_name, @Ptr long filename, @Ptr long mime_type);
	/**
	 * Guess the codec ID based upon muxer and filename.<br>
	 * Original signature : <code>AVCodecID av_guess_codec(AVOutputFormat*, const char*, const char*, const char*, AVMediaType)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1717</i>
	 */
	public static IntValuedEnum<AVCodecID > av_guess_codec(Pointer<AVOutputFormat > fmt, Pointer<Byte > short_name, Pointer<Byte > filename, Pointer<Byte > mime_type, IntValuedEnum<AVMediaType > type) {
		return FlagSet.fromValue(av_guess_codec(Pointer.getPeer(fmt), Pointer.getPeer(short_name), Pointer.getPeer(filename), Pointer.getPeer(mime_type), (int)type.value()), AVCodecID.class);
	}
	protected native static int av_guess_codec(@Ptr long fmt, @Ptr long short_name, @Ptr long filename, @Ptr long mime_type, int type);
	/**
	 * Get timing information for the data currently output.<br>
	 * The exact meaning of "currently output" depends on the format.<br>
	 * It is mostly relevant for devices that have an internal buffer and/or<br>
	 * work in real time.<br>
	 * @param s          media file handle<br>
	 * @param stream     stream in the media file<br>
	 * @param[out] dts   DTS of the last packet output for the stream, in stream<br>
	 *                   time_base units<br>
	 * @param[out] wall  absolute time when that packet whas output,<br>
	 *                   in microsecond<br>
	 * @return  0 if OK, AVERROR(ENOSYS) if the format does not support it<br>
	 * Note: some formats or devices may not allow to measure dts and wall<br>
	 * atomically.<br>
	 * Original signature : <code>int av_get_output_timestamp(AVFormatContext*, int, int64_t*, int64_t*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1734</i>
	 */
	public static int av_get_output_timestamp(Pointer<AVFormatContext > s, int stream, Pointer<Long > dts, Pointer<Long > wall) {
		return av_get_output_timestamp(Pointer.getPeer(s), stream, Pointer.getPeer(dts), Pointer.getPeer(wall));
	}
	protected native static int av_get_output_timestamp(@Ptr long s, int stream, @Ptr long dts, @Ptr long wall);
	/**
	 * Send a nice hexadecimal dump of a buffer to the specified file stream.<br>
	 * * @param f The file stream pointer where the dump should be sent to.<br>
	 * @param buf buffer<br>
	 * @param size buffer size<br>
	 * * @see av_hex_dump_log, av_pkt_dump2, av_pkt_dump_log2<br>
	 * Original signature : <code>void av_hex_dump(FILE*, const uint8_t*, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1743</i>
	 */
	public static void av_hex_dump(Pointer f, Pointer<Byte > buf, int size) {
		av_hex_dump(Pointer.getPeer(f), Pointer.getPeer(buf), size);
	}
	protected native static void av_hex_dump(@Ptr long f, @Ptr long buf, int size);
	/**
	 * Send a nice hexadecimal dump of a buffer to the log.<br>
	 * * @param avcl A pointer to an arbitrary struct of which the first field is a<br>
	 * pointer to an AVClass struct.<br>
	 * @param level The importance level of the message, lower values signifying<br>
	 * higher importance.<br>
	 * @param buf buffer<br>
	 * @param size buffer size<br>
	 * * @see av_hex_dump, av_pkt_dump2, av_pkt_dump_log2<br>
	 * Original signature : <code>void av_hex_dump_log(void*, int, const uint8_t*, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1755</i>
	 */
	public static void av_hex_dump_log(Pointer<? > avcl, int level, Pointer<Byte > buf, int size) {
		av_hex_dump_log(Pointer.getPeer(avcl), level, Pointer.getPeer(buf), size);
	}
	protected native static void av_hex_dump_log(@Ptr long avcl, int level, @Ptr long buf, int size);
	/**
	 * Send a nice dump of a packet to the specified file stream.<br>
	 * * @param f The file stream pointer where the dump should be sent to.<br>
	 * @param pkt packet to dump<br>
	 * @param dump_payload True if the payload must be displayed, too.<br>
	 * @param st AVStream that the packet belongs to<br>
	 * Original signature : <code>void av_pkt_dump2(FILE*, const AVPacket*, int, const AVStream*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1764</i>
	 */
	public static void av_pkt_dump2(Pointer f, Pointer<AVPacket > pkt, int dump_payload, Pointer<AVStream > st) {
		av_pkt_dump2(Pointer.getPeer(f), Pointer.getPeer(pkt), dump_payload, Pointer.getPeer(st));
	}
	protected native static void av_pkt_dump2(@Ptr long f, @Ptr long pkt, int dump_payload, @Ptr long st);
	/**
	 * Send a nice dump of a packet to the log.<br>
	 * * @param avcl A pointer to an arbitrary struct of which the first field is a<br>
	 * pointer to an AVClass struct.<br>
	 * @param level The importance level of the message, lower values signifying<br>
	 * higher importance.<br>
	 * @param pkt packet to dump<br>
	 * @param dump_payload True if the payload must be displayed, too.<br>
	 * @param st AVStream that the packet belongs to<br>
	 * Original signature : <code>void av_pkt_dump_log2(void*, int, const AVPacket*, int, const AVStream*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1776</i>
	 */
	public static void av_pkt_dump_log2(Pointer<? > avcl, int level, Pointer<AVPacket > pkt, int dump_payload, Pointer<AVStream > st) {
		av_pkt_dump_log2(Pointer.getPeer(avcl), level, Pointer.getPeer(pkt), dump_payload, Pointer.getPeer(st));
	}
	protected native static void av_pkt_dump_log2(@Ptr long avcl, int level, @Ptr long pkt, int dump_payload, @Ptr long st);
	/**
	 * Get the AVCodecID for the given codec tag tag.<br>
	 * If no codec id is found returns AV_CODEC_ID_NONE.<br>
	 * * @param tags list of supported codec_id-codec_tag pairs, as stored<br>
	 * in AVInputFormat.codec_tag and AVOutputFormat.codec_tag<br>
	 * @param tag  codec tag to match to a codec ID<br>
	 * Original signature : <code>AVCodecID av_codec_get_id(const AVCodecTag**, unsigned int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1785</i>
	 */
	public static IntValuedEnum<AVCodecID > av_codec_get_id(Pointer<Pointer<AVCodecTag > > tags, int tag) {
		return FlagSet.fromValue(av_codec_get_id(Pointer.getPeer(tags), tag), AVCodecID.class);
	}
	protected native static int av_codec_get_id(@Ptr long tags, int tag);
	/**
	 * Get the codec tag for the given codec id id.<br>
	 * If no codec tag is found returns 0.<br>
	 * * @param tags list of supported codec_id-codec_tag pairs, as stored<br>
	 * in AVInputFormat.codec_tag and AVOutputFormat.codec_tag<br>
	 * @param id   codec ID to match to a codec tag<br>
	 * Original signature : <code>int av_codec_get_tag(const AVCodecTag**, AVCodecID)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1794</i>
	 */
	public static int av_codec_get_tag(Pointer<Pointer<AVCodecTag > > tags, IntValuedEnum<AVCodecID > id) {
		return av_codec_get_tag(Pointer.getPeer(tags), (int)id.value());
	}
	protected native static int av_codec_get_tag(@Ptr long tags, int id);
	/**
	 * Get the codec tag for the given codec id.<br>
	 * * @param tags list of supported codec_id - codec_tag pairs, as stored<br>
	 * in AVInputFormat.codec_tag and AVOutputFormat.codec_tag<br>
	 * @param id codec id that should be searched for in the list<br>
	 * @param tag A pointer to the found tag<br>
	 * @return 0 if id was not found in tags, > 0 if it was found<br>
	 * Original signature : <code>int av_codec_get_tag2(const AVCodecTag**, AVCodecID, unsigned int*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1804</i>
	 */
	public static int av_codec_get_tag2(Pointer<Pointer<AVCodecTag > > tags, IntValuedEnum<AVCodecID > id, Pointer<Integer > tag) {
		return av_codec_get_tag2(Pointer.getPeer(tags), (int)id.value(), Pointer.getPeer(tag));
	}
	protected native static int av_codec_get_tag2(@Ptr long tags, int id, @Ptr long tag);
	/**
	 * Original signature : <code>int av_find_default_stream_index(AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1806</i>
	 */
	public static int av_find_default_stream_index(Pointer<AVFormatContext > s) {
		return av_find_default_stream_index(Pointer.getPeer(s));
	}
	protected native static int av_find_default_stream_index(@Ptr long s);
	/**
	 * Get the index for a specific timestamp.<br>
	 * * @param st        stream that the timestamp belongs to<br>
	 * @param timestamp timestamp to retrieve the index for<br>
	 * @param flags if AVSEEK_FLAG_BACKWARD then the returned index will correspond<br>
	 *                 to the timestamp which is <= the requested one, if backward<br>
	 *                 is 0, then it will be >=<br>
	 *              if AVSEEK_FLAG_ANY seek to any frame, only keyframes otherwise<br>
	 * @return < 0 if no such timestamp could be found<br>
	 * Original signature : <code>int av_index_search_timestamp(AVStream*, int64_t, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1818</i>
	 */
	public static int av_index_search_timestamp(Pointer<AVStream > st, long timestamp, int flags) {
		return av_index_search_timestamp(Pointer.getPeer(st), timestamp, flags);
	}
	protected native static int av_index_search_timestamp(@Ptr long st, long timestamp, int flags);
	/**
	 * Add an index entry into a sorted list. Update the entry if the list<br>
	 * already contains it.<br>
	 * * @param timestamp timestamp in the time base of the given stream<br>
	 * Original signature : <code>int av_add_index_entry(AVStream*, int64_t, int64_t, int, int, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1825</i>
	 */
	public static int av_add_index_entry(Pointer<AVStream > st, long pos, long timestamp, int size, int distance, int flags) {
		return av_add_index_entry(Pointer.getPeer(st), pos, timestamp, size, distance, flags);
	}
	protected native static int av_add_index_entry(@Ptr long st, long pos, long timestamp, int size, int distance, int flags);
	/**
	 * Split a URL string into components.<br>
	 * * The pointers to buffers for storing individual components may be null,<br>
	 * in order to ignore that component. Buffers for components not found are<br>
	 * set to empty strings. If the port is not found, it is set to a negative<br>
	 * value.<br>
	 * * @param proto the buffer for the protocol<br>
	 * @param proto_size the size of the proto buffer<br>
	 * @param authorization the buffer for the authorization<br>
	 * @param authorization_size the size of the authorization buffer<br>
	 * @param hostname the buffer for the host name<br>
	 * @param hostname_size the size of the hostname buffer<br>
	 * @param port_ptr a pointer to store the port number in<br>
	 * @param path the buffer for the path<br>
	 * @param path_size the size of the path buffer<br>
	 * @param url the URL to split<br>
	 * Original signature : <code>void av_url_split(char*, int, char*, int, char*, int, int*, char*, int, const char*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1844</i>
	 */
	public static void av_url_split(Pointer<Byte > proto, int proto_size, Pointer<Byte > authorization, int authorization_size, Pointer<Byte > hostname, int hostname_size, Pointer<Integer > port_ptr, Pointer<Byte > path, int path_size, Pointer<Byte > url) {
		av_url_split(Pointer.getPeer(proto), proto_size, Pointer.getPeer(authorization), authorization_size, Pointer.getPeer(hostname), hostname_size, Pointer.getPeer(port_ptr), Pointer.getPeer(path), path_size, Pointer.getPeer(url));
	}
	protected native static void av_url_split(@Ptr long proto, int proto_size, @Ptr long authorization, int authorization_size, @Ptr long hostname, int hostname_size, @Ptr long port_ptr, @Ptr long path, int path_size, @Ptr long url);
	/**
	 * Print detailed information about the input or output format, such as<br>
	 * duration, bitrate, streams, container, programs, metadata, side data,<br>
	 * codec and time base.<br>
	 * * @param ic        the context to analyze<br>
	 * @param index     index of the stream to dump information about<br>
	 * @param url       the URL to print, such as source or destination file<br>
	 * @param is_output Select whether the specified context is an input(0) or output(1)<br>
	 * Original signature : <code>void av_dump_format(AVFormatContext*, int, const char*, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1855</i>
	 */
	public static void av_dump_format(Pointer<AVFormatContext > ic, int index, Pointer<Byte > url, int is_output) {
		av_dump_format(Pointer.getPeer(ic), index, Pointer.getPeer(url), is_output);
	}
	protected native static void av_dump_format(@Ptr long ic, int index, @Ptr long url, int is_output);
	/**
	 * Return in 'buf' the path with '%d' replaced by a number.<br>
	 * * Also handles the '%0nd' format where 'n' is the total number<br>
	 * of digits and '%%'.<br>
	 * * @param buf destination buffer<br>
	 * @param buf_size destination buffer size<br>
	 * @param path numbered sequence string<br>
	 * @param number frame number<br>
	 * @param flags AV_FRAME_FILENAME_FLAGS_*<br>
	 * @return 0 if OK, -1 on format error<br>
	 * Original signature : <code>int av_get_frame_filename2(char*, int, const char*, int, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1868</i>
	 */
	public static int av_get_frame_filename2(Pointer<Byte > buf, int buf_size, Pointer<Byte > path, int number, int flags) {
		return av_get_frame_filename2(Pointer.getPeer(buf), buf_size, Pointer.getPeer(path), number, flags);
	}
	protected native static int av_get_frame_filename2(@Ptr long buf, int buf_size, @Ptr long path, int number, int flags);
	/**
	 * Original signature : <code>int av_get_frame_filename(char*, int, const char*, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1870</i>
	 */
	public static int av_get_frame_filename(Pointer<Byte > buf, int buf_size, Pointer<Byte > path, int number) {
		return av_get_frame_filename(Pointer.getPeer(buf), buf_size, Pointer.getPeer(path), number);
	}
	protected native static int av_get_frame_filename(@Ptr long buf, int buf_size, @Ptr long path, int number);
	/**
	 * Check whether filename actually is a numbered sequence generator.<br>
	 * * @param filename possible numbered sequence string<br>
	 * @return 1 if a valid numbered sequence string, 0 otherwise<br>
	 * Original signature : <code>int av_filename_number_test(const char*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1877</i>
	 */
	public static int av_filename_number_test(Pointer<Byte > filename) {
		return av_filename_number_test(Pointer.getPeer(filename));
	}
	protected native static int av_filename_number_test(@Ptr long filename);
	/**
	 * Generate an SDP for an RTP session.<br>
	 * * Note, this overwrites the id values of AVStreams in the muxer contexts<br>
	 * for getting unique dynamic payload types.<br>
	 * * @param ac array of AVFormatContexts describing the RTP streams. If the<br>
	 *           array is composed by only one context, such context can contain<br>
	 *           multiple AVStreams (one AVStream per RTP stream). Otherwise,<br>
	 *           all the contexts in the array (an AVCodecContext per RTP stream)<br>
	 *           must contain only one AVStream.<br>
	 * @param n_files number of AVCodecContexts contained in ac<br>
	 * @param buf buffer where the SDP will be stored (must be allocated by<br>
	 *            the caller)<br>
	 * @param size the size of the buffer<br>
	 * @return 0 if OK, AVERROR_xxx on error<br>
	 * Original signature : <code>int av_sdp_create(AVFormatContext*[], int, char*, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1894</i>
	 */
	public static int av_sdp_create(Pointer<Pointer<AVFormatContext > > ac, int n_files, Pointer<Byte > buf, int size) {
		return av_sdp_create(Pointer.getPeer(ac), n_files, Pointer.getPeer(buf), size);
	}
	protected native static int av_sdp_create(@Ptr long ac, int n_files, @Ptr long buf, int size);
	/**
	 * Return a positive value if the given filename has one of the given<br>
	 * extensions, 0 otherwise.<br>
	 * * @param filename   file name to check against the given extensions<br>
	 * @param extensions a comma-separated list of filename extensions<br>
	 * Original signature : <code>int av_match_ext(const char*, const char*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1902</i>
	 */
	public static int av_match_ext(Pointer<Byte > filename, Pointer<Byte > extensions) {
		return av_match_ext(Pointer.getPeer(filename), Pointer.getPeer(extensions));
	}
	protected native static int av_match_ext(@Ptr long filename, @Ptr long extensions);
	/**
	 * Test if the given container can store a codec.<br>
	 * * @param ofmt           container to check for compatibility<br>
	 * @param codec_id       codec to potentially store in container<br>
	 * @param std_compliance standards compliance level, one of FF_COMPLIANCE_*<br>
	 * * @return 1 if codec with ID codec_id can be stored in ofmt, 0 if it cannot.<br>
	 *         A negative number if this information is not available.<br>
	 * Original signature : <code>int avformat_query_codec(const AVOutputFormat*, AVCodecID, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1912</i>
	 */
	public static int avformat_query_codec(Pointer<AVOutputFormat > ofmt, IntValuedEnum<AVCodecID > codec_id, int std_compliance) {
		return avformat_query_codec(Pointer.getPeer(ofmt), (int)codec_id.value(), std_compliance);
	}
	protected native static int avformat_query_codec(@Ptr long ofmt, int codec_id, int std_compliance);
	/**
	 * @return the table mapping RIFF FourCCs for video to libavcodec AVCodecID.<br>
	 * Original signature : <code>AVCodecTag* avformat_get_riff_video_tags()</code><br>
	 * <i>native declaration : libavformat/avformat.h:1917</i>
	 */
	public static Pointer<AVCodecTag > avformat__get_riff_video_tags() {
		return Pointer.pointerToAddress(avformat_get_riff_video_tags(), AVCodecTag.class);
	}
	@Ptr 
	protected native static long avformat_get_riff_video_tags();
	/**
	 * @return the table mapping RIFF FourCCs for audio to AVCodecID.<br>
	 * Original signature : <code>AVCodecTag* avformat_get_riff_audio_tags()</code><br>
	 * <i>native declaration : libavformat/avformat.h:1922</i>
	 */
	public static Pointer<AVCodecTag > avformat__get_riff_audio_tags() {
		return Pointer.pointerToAddress(avformat_get_riff_audio_tags(), AVCodecTag.class);
	}
	@Ptr 
	protected native static long avformat_get_riff_audio_tags();
	/**
	 * @return the table mapping MOV FourCCs for video to libavcodec AVCodecID.<br>
	 * Original signature : <code>AVCodecTag* avformat_get_mov_video_tags()</code><br>
	 * <i>native declaration : libavformat/avformat.h:1927</i>
	 */
	public static Pointer<AVCodecTag > avformat__get_mov_video_tags() {
		return Pointer.pointerToAddress(avformat_get_mov_video_tags(), AVCodecTag.class);
	}
	@Ptr 
	protected native static long avformat_get_mov_video_tags();
	/**
	 * @return the table mapping MOV FourCCs for audio to AVCodecID.<br>
	 * Original signature : <code>AVCodecTag* avformat_get_mov_audio_tags()</code><br>
	 * <i>native declaration : libavformat/avformat.h:1932</i>
	 */
	public static Pointer<AVCodecTag > avformat__get_mov_audio_tags() {
		return Pointer.pointerToAddress(avformat_get_mov_audio_tags(), AVCodecTag.class);
	}
	@Ptr 
	protected native static long avformat_get_mov_audio_tags();
	/**
	 * Guess the sample aspect ratio of a frame, based on both the stream and the<br>
	 * frame aspect ratio.<br>
	 * * Since the frame aspect ratio is set by the codec but the stream aspect ratio<br>
	 * is set by the demuxer, these two may not be equal. This function tries to<br>
	 * return the value that you should use if you would like to display the frame.<br>
	 * * Basic logic is to use the stream aspect ratio if it is set to something sane<br>
	 * otherwise use the frame aspect ratio. This way a container setting, which is<br>
	 * usually easy to modify can override the coded value in the frames.<br>
	 * * @param format the format context which the stream is part of<br>
	 * @param stream the stream which the frame is part of<br>
	 * @param frame the frame with the aspect ratio to be determined<br>
	 * @return the guessed (valid) sample_aspect_ratio, 0/1 if no idea<br>
	 * Original signature : <code>AVRational av_guess_sample_aspect_ratio(AVFormatContext*, AVStream*, AVFrame*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1948</i>
	 */
	public static AVRational av_guess_sample_aspect_ratio(Pointer<AVFormatContext > format, Pointer<AVStream > stream, Pointer<AVFrame > frame) {
		return av_guess_sample_aspect_ratio(Pointer.getPeer(format), Pointer.getPeer(stream), Pointer.getPeer(frame));
	}
	protected native static AVRational av_guess_sample_aspect_ratio(@Ptr long format, @Ptr long stream, @Ptr long frame);
	/**
	 * Guess the frame rate, based on both the container and codec information.<br>
	 * * @param ctx the format context which the stream is part of<br>
	 * @param stream the stream which the frame is part of<br>
	 * @param frame the frame for which the frame rate should be determined, may be NULL<br>
	 * @return the guessed (valid) frame rate, 0/1 if no idea<br>
	 * Original signature : <code>AVRational av_guess_frame_rate(AVFormatContext*, AVStream*, AVFrame*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1957</i>
	 */
	public static AVRational av_guess_frame_rate(Pointer<AVFormatContext > ctx, Pointer<AVStream > stream, Pointer<AVFrame > frame) {
		return av_guess_frame_rate(Pointer.getPeer(ctx), Pointer.getPeer(stream), Pointer.getPeer(frame));
	}
	protected native static AVRational av_guess_frame_rate(@Ptr long ctx, @Ptr long stream, @Ptr long frame);
	/**
	 * Check if the stream st contained in s is matched by the stream specifier<br>
	 * spec.<br>
	 * * See the "stream specifiers" chapter in the documentation for the syntax<br>
	 * of spec.<br>
	 * * @return  >0 if st is matched by spec;<br>
	 *          0  if st is not matched by spec;<br>
	 *          AVERROR code if spec is invalid<br>
	 * * @note  A stream specifier can match several streams in the format.<br>
	 * Original signature : <code>int avformat_match_stream_specifier(AVFormatContext*, AVStream*, const char*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1969</i>
	 */
	public static int avformat_match_stream_specifier(Pointer<AVFormatContext > s, Pointer<AVStream > st, Pointer<Byte > spec) {
		return avformat_match_stream_specifier(Pointer.getPeer(s), Pointer.getPeer(st), Pointer.getPeer(spec));
	}
	protected native static int avformat_match_stream_specifier(@Ptr long s, @Ptr long st, @Ptr long spec);
	/**
	 * Original signature : <code>int avformat_queue_attached_pictures(AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1971</i>
	 */
	public static int avformat_queue_attached_pictures(Pointer<AVFormatContext > s) {
		return avformat_queue_attached_pictures(Pointer.getPeer(s));
	}
	protected native static int avformat_queue_attached_pictures(@Ptr long s);
	/**
	 * Apply a list of bitstream filters to a packet.<br>
	 * * @param codec AVCodecContext, usually from an AVStream<br>
	 * @param pkt the packet to apply filters to. If, on success, the returned<br>
	 *        packet has size == 0 and side_data_elems == 0, it indicates that<br>
	 *        the packet should be dropped<br>
	 * @param bsfc a NULL-terminated list of filters to apply<br>
	 * @return  >=0 on success;<br>
	 *          AVERROR code on failure<br>
	 * Original signature : <code>int av_apply_bitstream_filters(AVCodecContext*, AVPacket*, AVBitStreamFilterContext*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1983</i>
	 */
	public static int av_apply_bitstream_filters(Pointer<AVCodecContext > codec, Pointer<AVPacket > pkt, Pointer<AVBitStreamFilterContext > bsfc) {
		return av_apply_bitstream_filters(Pointer.getPeer(codec), Pointer.getPeer(pkt), Pointer.getPeer(bsfc));
	}
	protected native static int av_apply_bitstream_filters(@Ptr long codec, @Ptr long pkt, @Ptr long bsfc);
	/**
	 * Transfer internal timing information from one stream to another.<br>
	 * * This function is useful when doing stream copy.<br>
	 * * @param ofmt     target output format for ost<br>
	 * @param ost      output stream which needs timings copy and adjustments<br>
	 * @param ist      reference input stream to copy timings from<br>
	 * @param copy_tb  define from where the stream codec timebase needs to be imported<br>
	 * Original signature : <code>int avformat_transfer_internal_stream_timing_info(const AVOutputFormat*, AVStream*, const AVStream*, AVTimebaseSource)</code><br>
	 * <i>native declaration : libavformat/avformat.h:1999</i>
	 */
	public static int avformat_transfer_internal_stream_timing_info(Pointer<AVOutputFormat > ofmt, Pointer<AVStream > ost, Pointer<AVStream > ist, IntValuedEnum<AvformatLibrary.AVTimebaseSource > copy_tb) {
		return avformat_transfer_internal_stream_timing_info(Pointer.getPeer(ofmt), Pointer.getPeer(ost), Pointer.getPeer(ist), (int)copy_tb.value());
	}
	protected native static int avformat_transfer_internal_stream_timing_info(@Ptr long ofmt, @Ptr long ost, @Ptr long ist, int copy_tb);
	/**
	 * Get the internal codec timebase from a stream.<br>
	 * * @param st  input stream to extract the timebase from<br>
	 * Original signature : <code>AVRational av_stream_get_codec_timebase(const AVStream*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:2005</i>
	 */
	public static AVRational av_stream_get_codec_timebase(Pointer<AVStream > st) {
		return av_stream_get_codec_timebase(Pointer.getPeer(st));
	}
	protected native static AVRational av_stream_get_codec_timebase(@Ptr long st);
}
