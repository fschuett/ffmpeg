package org.ffmpeg.avformat;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.ffmpeg.avcodec.AVPacket;
import org.ffmpeg.avdevice.AVDeviceCapabilitiesQuery;
import org.ffmpeg.avdevice.AVDeviceInfoList;
import org.ffmpeg.avutil.AVClass;
/**
 * <i>native declaration : libavformat/avformat.h:308</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("avformat") 
public class AVInputFormat extends StructObject {
	static {
		BridJ.register();
	}
	/**
	 * A comma separated list of short names for the format. New names<br>
	 * may be appended with a minor bump.<br>
	 * C type : const char*
	 */
	@Field(0) 
	public Pointer<Byte > name() {
		return this.io.getPointerField(this, 0);
	}
	/**
	 * A comma separated list of short names for the format. New names<br>
	 * may be appended with a minor bump.<br>
	 * C type : const char*
	 */
	@Field(0) 
	public AVInputFormat name(Pointer<Byte > name) {
		this.io.setPointerField(this, 0, name);
		return this;
	}
	/**
	 * Descriptive name for the format, meant to be more human-readable<br>
	 * than name. You should use the NULL_IF_CONFIG_SMALL() macro<br>
	 * to define it.<br>
	 * C type : const char*
	 */
	@Field(1) 
	public Pointer<Byte > long_name() {
		return this.io.getPointerField(this, 1);
	}
	/**
	 * Descriptive name for the format, meant to be more human-readable<br>
	 * than name. You should use the NULL_IF_CONFIG_SMALL() macro<br>
	 * to define it.<br>
	 * C type : const char*
	 */
	@Field(1) 
	public AVInputFormat long_name(Pointer<Byte > long_name) {
		this.io.setPointerField(this, 1, long_name);
		return this;
	}
	/**
	 * Can use flags: AVFMT_NOFILE, AVFMT_NEEDNUMBER, AVFMT_SHOW_IDS,<br>
	 * AVFMT_GENERIC_INDEX, AVFMT_TS_DISCONT, AVFMT_NOBINSEARCH,<br>
	 * AVFMT_NOGENSEARCH, AVFMT_NO_BYTE_SEEK, AVFMT_SEEK_TO_PTS.
	 */
	@Field(2) 
	public int flags() {
		return this.io.getIntField(this, 2);
	}
	/**
	 * Can use flags: AVFMT_NOFILE, AVFMT_NEEDNUMBER, AVFMT_SHOW_IDS,<br>
	 * AVFMT_GENERIC_INDEX, AVFMT_TS_DISCONT, AVFMT_NOBINSEARCH,<br>
	 * AVFMT_NOGENSEARCH, AVFMT_NO_BYTE_SEEK, AVFMT_SEEK_TO_PTS.
	 */
	@Field(2) 
	public AVInputFormat flags(int flags) {
		this.io.setIntField(this, 2, flags);
		return this;
	}
	/**
	 * If extensions are defined, then no probe is done. You should<br>
	 * usually not use extension format guessing because it is not<br>
	 * reliable enough<br>
	 * C type : const char*
	 */
	@Field(3) 
	public Pointer<Byte > extensions() {
		return this.io.getPointerField(this, 3);
	}
	/**
	 * If extensions are defined, then no probe is done. You should<br>
	 * usually not use extension format guessing because it is not<br>
	 * reliable enough<br>
	 * C type : const char*
	 */
	@Field(3) 
	public AVInputFormat extensions(Pointer<Byte > extensions) {
		this.io.setPointerField(this, 3, extensions);
		return this;
	}
	/** C type : AVCodecTag** */
	@Field(4) 
	public Pointer<Pointer<AVCodecTag > > codec_tag() {
		return this.io.getPointerField(this, 4);
	}
	/** C type : AVCodecTag** */
	@Field(4) 
	public AVInputFormat codec_tag(Pointer<Pointer<AVCodecTag > > codec_tag) {
		this.io.setPointerField(this, 4, codec_tag);
		return this;
	}
	/**
	 * < AVClass for the private context<br>
	 * C type : const AVClass*
	 */
	@Field(5) 
	public Pointer<AVClass > priv_class() {
		return this.io.getPointerField(this, 5);
	}
	/**
	 * < AVClass for the private context<br>
	 * C type : const AVClass*
	 */
	@Field(5) 
	public AVInputFormat priv_class(Pointer<AVClass > priv_class) {
		this.io.setPointerField(this, 5, priv_class);
		return this;
	}
	/**
	 * Comma-separated list of mime types.<br>
	 * It is used check for matching mime types while probing.<br>
	 * @see av_probe_input_format2<br>
	 * C type : const char*
	 */
	@Field(6) 
	public Pointer<Byte > mime_type() {
		return this.io.getPointerField(this, 6);
	}
	/**
	 * Comma-separated list of mime types.<br>
	 * It is used check for matching mime types while probing.<br>
	 * @see av_probe_input_format2<br>
	 * C type : const char*
	 */
	@Field(6) 
	public AVInputFormat mime_type(Pointer<Byte > mime_type) {
		this.io.setPointerField(this, 6, mime_type);
		return this;
	}
	/**
	 * No fields below this line are part of the public API. They<br>
	 * may not be used outside of libavformat and can be changed and<br>
	 * removed at will.<br>
	 * New public fields should be added right above.<br>
	 * ****************************************************************<br>
	 * C type : AVInputFormat*
	 */
	@Field(7) 
	public Pointer<AVInputFormat > next() {
		return this.io.getPointerField(this, 7);
	}
	/**
	 * No fields below this line are part of the public API. They<br>
	 * may not be used outside of libavformat and can be changed and<br>
	 * removed at will.<br>
	 * New public fields should be added right above.<br>
	 * ****************************************************************<br>
	 * C type : AVInputFormat*
	 */
	@Field(7) 
	public AVInputFormat next(Pointer<AVInputFormat > next) {
		this.io.setPointerField(this, 7, next);
		return this;
	}
	/** Raw demuxers store their codec ID here. */
	@Field(8) 
	public int raw_codec_id() {
		return this.io.getIntField(this, 8);
	}
	/** Raw demuxers store their codec ID here. */
	@Field(8) 
	public AVInputFormat raw_codec_id(int raw_codec_id) {
		this.io.setIntField(this, 8, raw_codec_id);
		return this;
	}
	/** Size of private data so that it can be allocated in the wrapper. */
	@Field(9) 
	public int priv_data_size() {
		return this.io.getIntField(this, 9);
	}
	/** Size of private data so that it can be allocated in the wrapper. */
	@Field(9) 
	public AVInputFormat priv_data_size(int priv_data_size) {
		this.io.setIntField(this, 9, priv_data_size);
		return this;
	}
	/**
	 * Tell if a given file has a chance of being parsed as this format.<br>
	 * The buffer provided is guaranteed to be AVPROBE_PADDING_SIZE bytes<br>
	 * big so you do not have to check for that unless you need more.<br>
	 * C type : read_probe_callback*
	 */
	@Field(10) 
	public Pointer<AVInputFormat.read_probe_callback > read_probe() {
		return this.io.getPointerField(this, 10);
	}
	/**
	 * Tell if a given file has a chance of being parsed as this format.<br>
	 * The buffer provided is guaranteed to be AVPROBE_PADDING_SIZE bytes<br>
	 * big so you do not have to check for that unless you need more.<br>
	 * C type : read_probe_callback*
	 */
	@Field(10) 
	public AVInputFormat read_probe(Pointer<AVInputFormat.read_probe_callback > read_probe) {
		this.io.setPointerField(this, 10, read_probe);
		return this;
	}
	/**
	 * Read the format header and initialize the AVFormatContext<br>
	 * structure. Return 0 if OK. 'avformat_new_stream' should be<br>
	 * called to create new streams.<br>
	 * C type : read_header_callback*
	 */
	@Field(11) 
	public Pointer<AVInputFormat.read_header_callback > read_header() {
		return this.io.getPointerField(this, 11);
	}
	/**
	 * Read the format header and initialize the AVFormatContext<br>
	 * structure. Return 0 if OK. 'avformat_new_stream' should be<br>
	 * called to create new streams.<br>
	 * C type : read_header_callback*
	 */
	@Field(11) 
	public AVInputFormat read_header(Pointer<AVInputFormat.read_header_callback > read_header) {
		this.io.setPointerField(this, 11, read_header);
		return this;
	}
	/**
	 * Read one packet and put it in 'pkt'. pts and flags are also<br>
	 * set. 'avformat_new_stream' can be called only if the flag<br>
	 * AVFMTCTX_NOHEADER is used and only in the calling thread (not in a<br>
	 * background thread).<br>
	 * @return 0 on success, < 0 on error.<br>
	 *         When returning an error, pkt must not have been allocated<br>
	 *         or must be freed before returning<br>
	 * C type : read_packet_callback*
	 */
	@Field(12) 
	public Pointer<AVInputFormat.read_packet_callback > read_packet() {
		return this.io.getPointerField(this, 12);
	}
	/**
	 * Read one packet and put it in 'pkt'. pts and flags are also<br>
	 * set. 'avformat_new_stream' can be called only if the flag<br>
	 * AVFMTCTX_NOHEADER is used and only in the calling thread (not in a<br>
	 * background thread).<br>
	 * @return 0 on success, < 0 on error.<br>
	 *         When returning an error, pkt must not have been allocated<br>
	 *         or must be freed before returning<br>
	 * C type : read_packet_callback*
	 */
	@Field(12) 
	public AVInputFormat read_packet(Pointer<AVInputFormat.read_packet_callback > read_packet) {
		this.io.setPointerField(this, 12, read_packet);
		return this;
	}
	/**
	 * Close the stream. The AVFormatContext and AVStreams are not<br>
	 * freed by this function<br>
	 * C type : read_close_callback*
	 */
	@Field(13) 
	public Pointer<AVInputFormat.read_close_callback > read_close() {
		return this.io.getPointerField(this, 13);
	}
	/**
	 * Close the stream. The AVFormatContext and AVStreams are not<br>
	 * freed by this function<br>
	 * C type : read_close_callback*
	 */
	@Field(13) 
	public AVInputFormat read_close(Pointer<AVInputFormat.read_close_callback > read_close) {
		this.io.setPointerField(this, 13, read_close);
		return this;
	}
	/**
	 * Seek to a given timestamp relative to the frames in<br>
	 * stream component stream_index.<br>
	 * @param stream_index Must not be -1.<br>
	 * @param flags Selects which direction should be preferred if no exact<br>
	 *              match is available.<br>
	 * @return >= 0 on success (but not necessarily the new offset)<br>
	 * C type : read_seek_callback*
	 */
	@Field(14) 
	public Pointer<AVInputFormat.read_seek_callback > read_seek() {
		return this.io.getPointerField(this, 14);
	}
	/**
	 * Seek to a given timestamp relative to the frames in<br>
	 * stream component stream_index.<br>
	 * @param stream_index Must not be -1.<br>
	 * @param flags Selects which direction should be preferred if no exact<br>
	 *              match is available.<br>
	 * @return >= 0 on success (but not necessarily the new offset)<br>
	 * C type : read_seek_callback*
	 */
	@Field(14) 
	public AVInputFormat read_seek(Pointer<AVInputFormat.read_seek_callback > read_seek) {
		this.io.setPointerField(this, 14, read_seek);
		return this;
	}
	/**
	 * Get the next timestamp in stream[stream_index].time_base units.<br>
	 * @return the timestamp or AV_NOPTS_VALUE if an error occurred<br>
	 * C type : read_timestamp_callback*
	 */
	@Field(15) 
	public Pointer<AVInputFormat.read_timestamp_callback > read_timestamp() {
		return this.io.getPointerField(this, 15);
	}
	/**
	 * Get the next timestamp in stream[stream_index].time_base units.<br>
	 * @return the timestamp or AV_NOPTS_VALUE if an error occurred<br>
	 * C type : read_timestamp_callback*
	 */
	@Field(15) 
	public AVInputFormat read_timestamp(Pointer<AVInputFormat.read_timestamp_callback > read_timestamp) {
		this.io.setPointerField(this, 15, read_timestamp);
		return this;
	}
	/**
	 * Start/resume playing - only meaningful if using a network-based format<br>
	 * (RTSP).<br>
	 * C type : read_play_callback*
	 */
	@Field(16) 
	public Pointer<AVInputFormat.read_play_callback > read_play() {
		return this.io.getPointerField(this, 16);
	}
	/**
	 * Start/resume playing - only meaningful if using a network-based format<br>
	 * (RTSP).<br>
	 * C type : read_play_callback*
	 */
	@Field(16) 
	public AVInputFormat read_play(Pointer<AVInputFormat.read_play_callback > read_play) {
		this.io.setPointerField(this, 16, read_play);
		return this;
	}
	/**
	 * Pause playing - only meaningful if using a network-based format<br>
	 * (RTSP).<br>
	 * C type : read_pause_callback*
	 */
	@Field(17) 
	public Pointer<AVInputFormat.read_pause_callback > read_pause() {
		return this.io.getPointerField(this, 17);
	}
	/**
	 * Pause playing - only meaningful if using a network-based format<br>
	 * (RTSP).<br>
	 * C type : read_pause_callback*
	 */
	@Field(17) 
	public AVInputFormat read_pause(Pointer<AVInputFormat.read_pause_callback > read_pause) {
		this.io.setPointerField(this, 17, read_pause);
		return this;
	}
	/**
	 * Seek to timestamp ts.<br>
	 * Seeking will be done so that the point from which all active streams<br>
	 * can be presented successfully will be closest to ts and within min/max_ts.<br>
	 * Active streams are all streams that have AVStream.discard < AVDISCARD_ALL.<br>
	 * C type : read_seek2_callback*
	 */
	@Field(18) 
	public Pointer<AVInputFormat.read_seek2_callback > read_seek2() {
		return this.io.getPointerField(this, 18);
	}
	/**
	 * Seek to timestamp ts.<br>
	 * Seeking will be done so that the point from which all active streams<br>
	 * can be presented successfully will be closest to ts and within min/max_ts.<br>
	 * Active streams are all streams that have AVStream.discard < AVDISCARD_ALL.<br>
	 * C type : read_seek2_callback*
	 */
	@Field(18) 
	public AVInputFormat read_seek2(Pointer<AVInputFormat.read_seek2_callback > read_seek2) {
		this.io.setPointerField(this, 18, read_seek2);
		return this;
	}
	/**
	 * Returns device list with it properties.<br>
	 * @see avdevice_list_devices() for more details.<br>
	 * C type : get_device_list_callback*
	 */
	@Field(19) 
	public Pointer<AVInputFormat.get_device_list_callback > get_device_list() {
		return this.io.getPointerField(this, 19);
	}
	/**
	 * Returns device list with it properties.<br>
	 * @see avdevice_list_devices() for more details.<br>
	 * C type : get_device_list_callback*
	 */
	@Field(19) 
	public AVInputFormat get_device_list(Pointer<AVInputFormat.get_device_list_callback > get_device_list) {
		this.io.setPointerField(this, 19, get_device_list);
		return this;
	}
	/**
	 * Initialize device capabilities submodule.<br>
	 * @see avdevice_capabilities_create() for more details.<br>
	 * C type : create_device_capabilities_callback*
	 */
	@Field(20) 
	public Pointer<AVInputFormat.create_device_capabilities_callback > create_device_capabilities() {
		return this.io.getPointerField(this, 20);
	}
	/**
	 * Initialize device capabilities submodule.<br>
	 * @see avdevice_capabilities_create() for more details.<br>
	 * C type : create_device_capabilities_callback*
	 */
	@Field(20) 
	public AVInputFormat create_device_capabilities(Pointer<AVInputFormat.create_device_capabilities_callback > create_device_capabilities) {
		this.io.setPointerField(this, 20, create_device_capabilities);
		return this;
	}
	/**
	 * Free device capabilities submodule.<br>
	 * @see avdevice_capabilities_free() for more details.<br>
	 * C type : free_device_capabilities_callback*
	 */
	@Field(21) 
	public Pointer<AVInputFormat.free_device_capabilities_callback > free_device_capabilities() {
		return this.io.getPointerField(this, 21);
	}
	/**
	 * Free device capabilities submodule.<br>
	 * @see avdevice_capabilities_free() for more details.<br>
	 * C type : free_device_capabilities_callback*
	 */
	@Field(21) 
	public AVInputFormat free_device_capabilities(Pointer<AVInputFormat.free_device_capabilities_callback > free_device_capabilities) {
		this.io.setPointerField(this, 21, free_device_capabilities);
		return this;
	}
	/** <i>native declaration : libavformat/avformat.h:296</i> */
	public static abstract class read_probe_callback extends Callback<read_probe_callback > {
		public int apply(Pointer<AVProbeData > AVProbeDataPtr1) {
			return apply(Pointer.getPeer(AVProbeDataPtr1));
		}
		public int apply(@Ptr long AVProbeDataPtr1) {
			return apply(Pointer.pointerToAddress(AVProbeDataPtr1, AVProbeData.class));
		}
	};
	/** <i>native declaration : libavformat/avformat.h:297</i> */
	public static abstract class read_header_callback extends Callback<read_header_callback > {
		public int apply(Pointer<AVFormatContext > AVFormatContextPtr1) {
			return apply(Pointer.getPeer(AVFormatContextPtr1));
		}
		public int apply(@Ptr long AVFormatContextPtr1) {
			return apply(Pointer.pointerToAddress(AVFormatContextPtr1, AVFormatContext.class));
		}
	};
	/** <i>native declaration : libavformat/avformat.h:298</i> */
	public static abstract class read_packet_callback extends Callback<read_packet_callback > {
		public int apply(Pointer<AVFormatContext > AVFormatContextPtr1, Pointer<AVPacket > pkt) {
			return apply(Pointer.getPeer(AVFormatContextPtr1), Pointer.getPeer(pkt));
		}
		public int apply(@Ptr long AVFormatContextPtr1, @Ptr long pkt) {
			return apply(Pointer.pointerToAddress(AVFormatContextPtr1, AVFormatContext.class), Pointer.pointerToAddress(pkt, AVPacket.class));
		}
	};
	/** <i>native declaration : libavformat/avformat.h:299</i> */
	public static abstract class read_close_callback extends Callback<read_close_callback > {
		public int apply(Pointer<AVFormatContext > AVFormatContextPtr1) {
			return apply(Pointer.getPeer(AVFormatContextPtr1));
		}
		public int apply(@Ptr long AVFormatContextPtr1) {
			return apply(Pointer.pointerToAddress(AVFormatContextPtr1, AVFormatContext.class));
		}
	};
	/** <i>native declaration : libavformat/avformat.h:300</i> */
	public static abstract class read_seek_callback extends Callback<read_seek_callback > {
		public int apply(Pointer<AVFormatContext > AVFormatContextPtr1, int stream_index, long timestamp, int flags) {
			return apply(Pointer.getPeer(AVFormatContextPtr1), stream_index, timestamp, flags);
		}
		public int apply(@Ptr long AVFormatContextPtr1, int stream_index, long timestamp, int flags) {
			return apply(Pointer.pointerToAddress(AVFormatContextPtr1, AVFormatContext.class), stream_index, timestamp, flags);
		}
	};
	/** <i>native declaration : libavformat/avformat.h:301</i> */
	public static abstract class read_timestamp_callback extends Callback<read_timestamp_callback > {
		public long apply(Pointer<AVFormatContext > s, int stream_index, Pointer<Long > pos, long pos_limit) {
			return apply(Pointer.getPeer(s), stream_index, Pointer.getPeer(pos), pos_limit);
		}
		public long apply(@Ptr long s, int stream_index, @Ptr long pos, long pos_limit) {
			return apply(Pointer.pointerToAddress(s, AVFormatContext.class), stream_index, Pointer.pointerToAddress(pos, Long.class), pos_limit);
		}
	};
	/** <i>native declaration : libavformat/avformat.h:302</i> */
	public static abstract class read_play_callback extends Callback<read_play_callback > {
		public int apply(Pointer<AVFormatContext > AVFormatContextPtr1) {
			return apply(Pointer.getPeer(AVFormatContextPtr1));
		}
		public int apply(@Ptr long AVFormatContextPtr1) {
			return apply(Pointer.pointerToAddress(AVFormatContextPtr1, AVFormatContext.class));
		}
	};
	/** <i>native declaration : libavformat/avformat.h:303</i> */
	public static abstract class read_pause_callback extends Callback<read_pause_callback > {
		public int apply(Pointer<AVFormatContext > AVFormatContextPtr1) {
			return apply(Pointer.getPeer(AVFormatContextPtr1));
		}
		public int apply(@Ptr long AVFormatContextPtr1) {
			return apply(Pointer.pointerToAddress(AVFormatContextPtr1, AVFormatContext.class));
		}
	};
	/** <i>native declaration : libavformat/avformat.h:304</i> */
	public static abstract class read_seek2_callback extends Callback<read_seek2_callback > {
		public int apply(Pointer<AVFormatContext > s, int stream_index, long min_ts, long ts, long max_ts, int flags) {
			return apply(Pointer.getPeer(s), stream_index, min_ts, ts, max_ts, flags);
		}
		public int apply(@Ptr long s, int stream_index, long min_ts, long ts, long max_ts, int flags) {
			return apply(Pointer.pointerToAddress(s, AVFormatContext.class), stream_index, min_ts, ts, max_ts, flags);
		}
	};
	/** <i>native declaration : libavformat/avformat.h:305</i> */
	public static abstract class get_device_list_callback extends Callback<get_device_list_callback > {
		public int apply(Pointer<AVFormatContext > s, Pointer<AVDeviceInfoList > device_list) {
			return apply(Pointer.getPeer(s), Pointer.getPeer(device_list));
		}
		public int apply(@Ptr long s, @Ptr long device_list) {
			return apply(Pointer.pointerToAddress(s, AVFormatContext.class), Pointer.pointerToAddress(device_list, AVDeviceInfoList.class));
		}
	};
	/** <i>native declaration : libavformat/avformat.h:306</i> */
	public static abstract class create_device_capabilities_callback extends Callback<create_device_capabilities_callback > {
		public int apply(Pointer<AVFormatContext > s, Pointer<AVDeviceCapabilitiesQuery > caps) {
			return apply(Pointer.getPeer(s), Pointer.getPeer(caps));
		}
		public int apply(@Ptr long s, @Ptr long caps) {
			return apply(Pointer.pointerToAddress(s, AVFormatContext.class), Pointer.pointerToAddress(caps, AVDeviceCapabilitiesQuery.class));
		}
	};
	/** <i>native declaration : libavformat/avformat.h:307</i> */
	public static abstract class free_device_capabilities_callback extends Callback<free_device_capabilities_callback > {
		public int apply(Pointer<AVFormatContext > s, Pointer<AVDeviceCapabilitiesQuery > caps) {
			return apply(Pointer.getPeer(s), Pointer.getPeer(caps));
		}
		public int apply(@Ptr long s, @Ptr long caps) {
			return apply(Pointer.pointerToAddress(s, AVFormatContext.class), Pointer.pointerToAddress(caps, AVDeviceCapabilitiesQuery.class));
		}
	};
	public AVInputFormat() {
		super();
	}
	public AVInputFormat(Pointer pointer) {
		super(pointer);
	}
}
