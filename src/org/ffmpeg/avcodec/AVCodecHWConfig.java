package org.ffmpeg.avcodec;
import org.bridj.BridJ;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.ffmpeg.avutil.AvutilLibrary.AVHWDeviceType;
import org.ffmpeg.avutil.AvutilLibrary.AVPixelFormat;
/**
 * <i>native declaration : ./libavcodec/codec.h:267</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("avcodec") 
public class AVCodecHWConfig extends StructObject {
	static {
		BridJ.register();
	}
	/**
	 * For decoders, a hardware pixel format which that decoder may be<br>
	 * able to decode to if suitable hardware is available.<br>
	 * * For encoders, a pixel format which the encoder may be able to<br>
	 * accept.  If set to AV_PIX_FMT_NONE, this applies to all pixel<br>
	 * formats supported by the codec.<br>
	 * C type : AVPixelFormat
	 */
	@Field(0) 
	public IntValuedEnum<AVPixelFormat > pix_fmt() {
		return this.io.getEnumField(this, 0);
	}
	/**
	 * For decoders, a hardware pixel format which that decoder may be<br>
	 * able to decode to if suitable hardware is available.<br>
	 * * For encoders, a pixel format which the encoder may be able to<br>
	 * accept.  If set to AV_PIX_FMT_NONE, this applies to all pixel<br>
	 * formats supported by the codec.<br>
	 * C type : AVPixelFormat
	 */
	@Field(0) 
	public AVCodecHWConfig pix_fmt(IntValuedEnum<AVPixelFormat > pix_fmt) {
		this.io.setEnumField(this, 0, pix_fmt);
		return this;
	}
	/**
	 * Bit set of AV_CODEC_HW_CONFIG_METHOD_* flags, describing the possible<br>
	 * setup methods which can be used with this configuration.
	 */
	@Field(1) 
	public int methods() {
		return this.io.getIntField(this, 1);
	}
	/**
	 * Bit set of AV_CODEC_HW_CONFIG_METHOD_* flags, describing the possible<br>
	 * setup methods which can be used with this configuration.
	 */
	@Field(1) 
	public AVCodecHWConfig methods(int methods) {
		this.io.setIntField(this, 1, methods);
		return this;
	}
	/**
	 * The device type associated with the configuration.<br>
	 * * Must be set for AV_CODEC_HW_CONFIG_METHOD_HW_DEVICE_CTX and<br>
	 * AV_CODEC_HW_CONFIG_METHOD_HW_FRAMES_CTX, otherwise unused.<br>
	 * C type : AVHWDeviceType
	 */
	@Field(2) 
	public IntValuedEnum<AVHWDeviceType > device_type() {
		return this.io.getEnumField(this, 2);
	}
	/**
	 * The device type associated with the configuration.<br>
	 * * Must be set for AV_CODEC_HW_CONFIG_METHOD_HW_DEVICE_CTX and<br>
	 * AV_CODEC_HW_CONFIG_METHOD_HW_FRAMES_CTX, otherwise unused.<br>
	 * C type : AVHWDeviceType
	 */
	@Field(2) 
	public AVCodecHWConfig device_type(IntValuedEnum<AVHWDeviceType > device_type) {
		this.io.setEnumField(this, 2, device_type);
		return this;
	}
	public AVCodecHWConfig() {
		super();
	}
	public AVCodecHWConfig(Pointer pointer) {
		super(pointer);
	}
}
