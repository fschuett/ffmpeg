package org.ffmpeg.avcodec;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.ffmpeg.avcodec.AvcodecLibrary.AVCodecID;
import org.ffmpeg.avcodec.AvcodecLibrary.MpegEncContext;
import org.ffmpeg.avutil.AVBufferRef;
import org.ffmpeg.avutil.AVFrame;
import org.ffmpeg.avutil.AvutilLibrary.AVMediaType;
import org.ffmpeg.avutil.AvutilLibrary.AVPixelFormat;
/**
 * <i>native declaration : ./libavcodec/avcodec.h:1553</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("avcodec") 
public class AVHWAccel extends StructObject {
	static {
		BridJ.register();
	}
	/**
	 * Name of the hardware accelerated codec.<br>
	 * The name is globally unique among encoders and among decoders (but an<br>
	 * encoder and a decoder can share the same name).<br>
	 * C type : const char*
	 */
	@Field(0) 
	public Pointer<Byte > name() {
		return this.io.getPointerField(this, 0);
	}
	/**
	 * Name of the hardware accelerated codec.<br>
	 * The name is globally unique among encoders and among decoders (but an<br>
	 * encoder and a decoder can share the same name).<br>
	 * C type : const char*
	 */
	@Field(0) 
	public AVHWAccel name(Pointer<Byte > name) {
		this.io.setPointerField(this, 0, name);
		return this;
	}
	/**
	 * Type of codec implemented by the hardware accelerator.<br>
	 * * See AVMEDIA_TYPE_xxx<br>
	 * C type : AVMediaType
	 */
	@Field(1) 
	public IntValuedEnum<AVMediaType > type() {
		return this.io.getEnumField(this, 1);
	}
	/**
	 * Type of codec implemented by the hardware accelerator.<br>
	 * * See AVMEDIA_TYPE_xxx<br>
	 * C type : AVMediaType
	 */
	@Field(1) 
	public AVHWAccel type(IntValuedEnum<AVMediaType > type) {
		this.io.setEnumField(this, 1, type);
		return this;
	}
	/**
	 * Codec implemented by the hardware accelerator.<br>
	 * * See AV_CODEC_ID_xxx<br>
	 * C type : AVCodecID
	 */
	@Field(2) 
	public IntValuedEnum<AVCodecID > id() {
		return this.io.getEnumField(this, 2);
	}
	/**
	 * Codec implemented by the hardware accelerator.<br>
	 * * See AV_CODEC_ID_xxx<br>
	 * C type : AVCodecID
	 */
	@Field(2) 
	public AVHWAccel id(IntValuedEnum<AVCodecID > id) {
		this.io.setEnumField(this, 2, id);
		return this;
	}
	/**
	 * Supported pixel format.<br>
	 * * Only hardware accelerated formats are supported here.<br>
	 * C type : AVPixelFormat
	 */
	@Field(3) 
	public IntValuedEnum<AVPixelFormat > pix_fmt() {
		return this.io.getEnumField(this, 3);
	}
	/**
	 * Supported pixel format.<br>
	 * * Only hardware accelerated formats are supported here.<br>
	 * C type : AVPixelFormat
	 */
	@Field(3) 
	public AVHWAccel pix_fmt(IntValuedEnum<AVPixelFormat > pix_fmt) {
		this.io.setEnumField(this, 3, pix_fmt);
		return this;
	}
	/**
	 * Hardware accelerated codec capabilities.<br>
	 * see AV_HWACCEL_CODEC_CAP_*
	 */
	@Field(4) 
	public int capabilities() {
		return this.io.getIntField(this, 4);
	}
	/**
	 * Hardware accelerated codec capabilities.<br>
	 * see AV_HWACCEL_CODEC_CAP_*
	 */
	@Field(4) 
	public AVHWAccel capabilities(int capabilities) {
		this.io.setIntField(this, 4, capabilities);
		return this;
	}
	/**
	 * Allocate a custom buffer<br>
	 * C type : alloc_frame_callback*
	 */
	@Field(5) 
	public Pointer<AVHWAccel.alloc_frame_callback > alloc_frame() {
		return this.io.getPointerField(this, 5);
	}
	/**
	 * Allocate a custom buffer<br>
	 * C type : alloc_frame_callback*
	 */
	@Field(5) 
	public AVHWAccel alloc_frame(Pointer<AVHWAccel.alloc_frame_callback > alloc_frame) {
		this.io.setPointerField(this, 5, alloc_frame);
		return this;
	}
	/**
	 * Called at the beginning of each frame or field picture.<br>
	 * * Meaningful frame information (codec specific) is guaranteed to<br>
	 * be parsed at this point. This function is mandatory.<br>
	 * * Note that buf can be NULL along with buf_size set to 0.<br>
	 * Otherwise, this means the whole frame is available at this point.<br>
	 * * @param avctx the codec context<br>
	 * @param buf the frame data buffer base<br>
	 * @param buf_size the size of the frame in bytes<br>
	 * @return zero if successful, a negative value otherwise<br>
	 * C type : start_frame_callback*
	 */
	@Field(6) 
	public Pointer<AVHWAccel.start_frame_callback > start_frame() {
		return this.io.getPointerField(this, 6);
	}
	/**
	 * Called at the beginning of each frame or field picture.<br>
	 * * Meaningful frame information (codec specific) is guaranteed to<br>
	 * be parsed at this point. This function is mandatory.<br>
	 * * Note that buf can be NULL along with buf_size set to 0.<br>
	 * Otherwise, this means the whole frame is available at this point.<br>
	 * * @param avctx the codec context<br>
	 * @param buf the frame data buffer base<br>
	 * @param buf_size the size of the frame in bytes<br>
	 * @return zero if successful, a negative value otherwise<br>
	 * C type : start_frame_callback*
	 */
	@Field(6) 
	public AVHWAccel start_frame(Pointer<AVHWAccel.start_frame_callback > start_frame) {
		this.io.setPointerField(this, 6, start_frame);
		return this;
	}
	/**
	 * Callback for parameter data (SPS/PPS/VPS etc).<br>
	 * * Useful for hardware decoders which keep persistent state about the<br>
	 * video parameters, and need to receive any changes to update that state.<br>
	 * * @param avctx the codec context<br>
	 * @param type the nal unit type<br>
	 * @param buf the nal unit data buffer<br>
	 * @param buf_size the size of the nal unit in bytes<br>
	 * @return zero if successful, a negative value otherwise<br>
	 * C type : decode_params_callback*
	 */
	@Field(7) 
	public Pointer<AVHWAccel.decode_params_callback > decode_params() {
		return this.io.getPointerField(this, 7);
	}
	/**
	 * Callback for parameter data (SPS/PPS/VPS etc).<br>
	 * * Useful for hardware decoders which keep persistent state about the<br>
	 * video parameters, and need to receive any changes to update that state.<br>
	 * * @param avctx the codec context<br>
	 * @param type the nal unit type<br>
	 * @param buf the nal unit data buffer<br>
	 * @param buf_size the size of the nal unit in bytes<br>
	 * @return zero if successful, a negative value otherwise<br>
	 * C type : decode_params_callback*
	 */
	@Field(7) 
	public AVHWAccel decode_params(Pointer<AVHWAccel.decode_params_callback > decode_params) {
		this.io.setPointerField(this, 7, decode_params);
		return this;
	}
	/**
	 * Callback for each slice.<br>
	 * * Meaningful slice information (codec specific) is guaranteed to<br>
	 * be parsed at this point. This function is mandatory.<br>
	 * The only exception is XvMC, that works on MB level.<br>
	 * * @param avctx the codec context<br>
	 * @param buf the slice data buffer base<br>
	 * @param buf_size the size of the slice in bytes<br>
	 * @return zero if successful, a negative value otherwise<br>
	 * C type : decode_slice_callback*
	 */
	@Field(8) 
	public Pointer<AVHWAccel.decode_slice_callback > decode_slice() {
		return this.io.getPointerField(this, 8);
	}
	/**
	 * Callback for each slice.<br>
	 * * Meaningful slice information (codec specific) is guaranteed to<br>
	 * be parsed at this point. This function is mandatory.<br>
	 * The only exception is XvMC, that works on MB level.<br>
	 * * @param avctx the codec context<br>
	 * @param buf the slice data buffer base<br>
	 * @param buf_size the size of the slice in bytes<br>
	 * @return zero if successful, a negative value otherwise<br>
	 * C type : decode_slice_callback*
	 */
	@Field(8) 
	public AVHWAccel decode_slice(Pointer<AVHWAccel.decode_slice_callback > decode_slice) {
		this.io.setPointerField(this, 8, decode_slice);
		return this;
	}
	/**
	 * Called at the end of each frame or field picture.<br>
	 * * The whole picture is parsed at this point and can now be sent<br>
	 * to the hardware accelerator. This function is mandatory.<br>
	 * * @param avctx the codec context<br>
	 * @return zero if successful, a negative value otherwise<br>
	 * C type : end_frame_callback*
	 */
	@Field(9) 
	public Pointer<AVHWAccel.end_frame_callback > end_frame() {
		return this.io.getPointerField(this, 9);
	}
	/**
	 * Called at the end of each frame or field picture.<br>
	 * * The whole picture is parsed at this point and can now be sent<br>
	 * to the hardware accelerator. This function is mandatory.<br>
	 * * @param avctx the codec context<br>
	 * @return zero if successful, a negative value otherwise<br>
	 * C type : end_frame_callback*
	 */
	@Field(9) 
	public AVHWAccel end_frame(Pointer<AVHWAccel.end_frame_callback > end_frame) {
		this.io.setPointerField(this, 9, end_frame);
		return this;
	}
	/**
	 * Size of per-frame hardware accelerator private data.<br>
	 * * Private data is allocated with av_mallocz() before<br>
	 * AVCodecContext.get_buffer() and deallocated after<br>
	 * AVCodecContext.release_buffer().
	 */
	@Field(10) 
	public int frame_priv_data_size() {
		return this.io.getIntField(this, 10);
	}
	/**
	 * Size of per-frame hardware accelerator private data.<br>
	 * * Private data is allocated with av_mallocz() before<br>
	 * AVCodecContext.get_buffer() and deallocated after<br>
	 * AVCodecContext.release_buffer().
	 */
	@Field(10) 
	public AVHWAccel frame_priv_data_size(int frame_priv_data_size) {
		this.io.setIntField(this, 10, frame_priv_data_size);
		return this;
	}
	/**
	 * Called for every Macroblock in a slice.<br>
	 * * XvMC uses it to replace the ff_mpv_reconstruct_mb().<br>
	 * Instead of decoding to raw picture, MB parameters are<br>
	 * stored in an array provided by the video driver.<br>
	 * * @param s the mpeg context<br>
	 * C type : decode_mb_callback*
	 */
	@Field(11) 
	public Pointer<AVHWAccel.decode_mb_callback > decode_mb() {
		return this.io.getPointerField(this, 11);
	}
	/**
	 * Called for every Macroblock in a slice.<br>
	 * * XvMC uses it to replace the ff_mpv_reconstruct_mb().<br>
	 * Instead of decoding to raw picture, MB parameters are<br>
	 * stored in an array provided by the video driver.<br>
	 * * @param s the mpeg context<br>
	 * C type : decode_mb_callback*
	 */
	@Field(11) 
	public AVHWAccel decode_mb(Pointer<AVHWAccel.decode_mb_callback > decode_mb) {
		this.io.setPointerField(this, 11, decode_mb);
		return this;
	}
	/**
	 * Initialize the hwaccel private data.<br>
	 * * This will be called from ff_get_format(), after hwaccel and<br>
	 * hwaccel_context are set and the hwaccel private data in AVCodecInternal<br>
	 * is allocated.<br>
	 * C type : init_callback*
	 */
	@Field(12) 
	public Pointer<org.ffmpeg.avfilter.AVFilter.init_callback > init() {
		return this.io.getPointerField(this, 12);
	}
	/**
	 * Initialize the hwaccel private data.<br>
	 * * This will be called from ff_get_format(), after hwaccel and<br>
	 * hwaccel_context are set and the hwaccel private data in AVCodecInternal<br>
	 * is allocated.<br>
	 * C type : init_callback*
	 */
	@Field(12) 
	public AVHWAccel init(Pointer<org.ffmpeg.avfilter.AVFilter.init_callback > init) {
		this.io.setPointerField(this, 12, init);
		return this;
	}
	/**
	 * Uninitialize the hwaccel private data.<br>
	 * * This will be called from get_format() or avcodec_close(), after hwaccel<br>
	 * and hwaccel_context are already uninitialized.<br>
	 * C type : uninit_callback*
	 */
	@Field(13) 
	public Pointer<org.ffmpeg.avfilter.AVFilter.uninit_callback > uninit() {
		return this.io.getPointerField(this, 13);
	}
	/**
	 * Uninitialize the hwaccel private data.<br>
	 * * This will be called from get_format() or avcodec_close(), after hwaccel<br>
	 * and hwaccel_context are already uninitialized.<br>
	 * C type : uninit_callback*
	 */
	@Field(13) 
	public AVHWAccel uninit(Pointer<org.ffmpeg.avfilter.AVFilter.uninit_callback > uninit) {
		this.io.setPointerField(this, 13, uninit);
		return this;
	}
	/**
	 * Size of the private data to allocate in<br>
	 * AVCodecInternal.hwaccel_priv_data.
	 */
	@Field(14) 
	public int priv_data_size() {
		return this.io.getIntField(this, 14);
	}
	/**
	 * Size of the private data to allocate in<br>
	 * AVCodecInternal.hwaccel_priv_data.
	 */
	@Field(14) 
	public AVHWAccel priv_data_size(int priv_data_size) {
		this.io.setIntField(this, 14, priv_data_size);
		return this;
	}
	/** Internal hwaccel capabilities. */
	@Field(15) 
	public int caps_internal() {
		return this.io.getIntField(this, 15);
	}
	/** Internal hwaccel capabilities. */
	@Field(15) 
	public AVHWAccel caps_internal(int caps_internal) {
		this.io.setIntField(this, 15, caps_internal);
		return this;
	}
	/**
	 * Fill the given hw_frames context with current codec parameters. Called<br>
	 * from get_format. Refer to avcodec_get_hw_frames_parameters() for<br>
	 * details.<br>
	 * * This CAN be called before AVHWAccel.init is called, and you must assume<br>
	 * that avctx->hwaccel_priv_data is invalid.<br>
	 * C type : frame_params_callback*
	 */
	@Field(16) 
	public Pointer<AVHWAccel.frame_params_callback > frame_params() {
		return this.io.getPointerField(this, 16);
	}
	/**
	 * Fill the given hw_frames context with current codec parameters. Called<br>
	 * from get_format. Refer to avcodec_get_hw_frames_parameters() for<br>
	 * details.<br>
	 * * This CAN be called before AVHWAccel.init is called, and you must assume<br>
	 * that avctx->hwaccel_priv_data is invalid.<br>
	 * C type : frame_params_callback*
	 */
	@Field(16) 
	public AVHWAccel frame_params(Pointer<AVHWAccel.frame_params_callback > frame_params) {
		this.io.setPointerField(this, 16, frame_params);
		return this;
	}
	/** <i>native declaration : ./libavcodec/avcodec.h:1544</i> */
	public static abstract class alloc_frame_callback extends Callback<alloc_frame_callback > {
		public int apply(Pointer<AVCodecContext > avctx, Pointer<AVFrame > frame) {
			return apply(Pointer.getPeer(avctx), Pointer.getPeer(frame));
		}
		public int apply(@Ptr long avctx, @Ptr long frame) {
			return apply(Pointer.pointerToAddress(avctx, AVCodecContext.class), Pointer.pointerToAddress(frame, AVFrame.class));
		}
	};
	/** <i>native declaration : ./libavcodec/avcodec.h:1545</i> */
	public static abstract class start_frame_callback extends Callback<start_frame_callback > {
		public int apply(Pointer<AVCodecContext > avctx, Pointer<Byte > buf, int buf_size) {
			return apply(Pointer.getPeer(avctx), Pointer.getPeer(buf), buf_size);
		}
		public int apply(@Ptr long avctx, @Ptr long buf, int buf_size) {
			return apply(Pointer.pointerToAddress(avctx, AVCodecContext.class), Pointer.pointerToAddress(buf, Byte.class), buf_size);
		}
	};
	/** <i>native declaration : ./libavcodec/avcodec.h:1546</i> */
	public static abstract class decode_params_callback extends Callback<decode_params_callback > {
		public int apply(Pointer<AVCodecContext > avctx, int type, Pointer<Byte > buf, int buf_size) {
			return apply(Pointer.getPeer(avctx), type, Pointer.getPeer(buf), buf_size);
		}
		public int apply(@Ptr long avctx, int type, @Ptr long buf, int buf_size) {
			return apply(Pointer.pointerToAddress(avctx, AVCodecContext.class), type, Pointer.pointerToAddress(buf, Byte.class), buf_size);
		}
	};
	/** <i>native declaration : ./libavcodec/avcodec.h:1547</i> */
	public static abstract class decode_slice_callback extends Callback<decode_slice_callback > {
		public int apply(Pointer<AVCodecContext > avctx, Pointer<Byte > buf, int buf_size) {
			return apply(Pointer.getPeer(avctx), Pointer.getPeer(buf), buf_size);
		}
		public int apply(@Ptr long avctx, @Ptr long buf, int buf_size) {
			return apply(Pointer.pointerToAddress(avctx, AVCodecContext.class), Pointer.pointerToAddress(buf, Byte.class), buf_size);
		}
	};
	/** <i>native declaration : ./libavcodec/avcodec.h:1548</i> */
	public static abstract class end_frame_callback extends Callback<end_frame_callback > {
		public int apply(Pointer<AVCodecContext > avctx) {
			return apply(Pointer.getPeer(avctx));
		}
		public int apply(@Ptr long avctx) {
			return apply(Pointer.pointerToAddress(avctx, AVCodecContext.class));
		}
	};
	/** <i>native declaration : ./libavcodec/avcodec.h:1549</i> */
	public static abstract class decode_mb_callback extends Callback<decode_mb_callback > {
		public void apply(Pointer<MpegEncContext > s) {
			apply(Pointer.getPeer(s));
		}
		public void apply(@Ptr long s) {
			apply(Pointer.pointerToAddress(s, MpegEncContext.class));
		}
	};
	/** <i>native declaration : ./libavcodec/avcodec.h:1550</i> */
	public static abstract class init_callback extends Callback<init_callback > {
		public int apply(Pointer<AVCodecContext > avctx) {
			return apply(Pointer.getPeer(avctx));
		}
		public int apply(@Ptr long avctx) {
			return apply(Pointer.pointerToAddress(avctx, AVCodecContext.class));
		}
	};
	/** <i>native declaration : ./libavcodec/avcodec.h:1551</i> */
	public static abstract class uninit_callback extends Callback<uninit_callback > {
		public int apply(Pointer<AVCodecContext > avctx) {
			return apply(Pointer.getPeer(avctx));
		}
		public int apply(@Ptr long avctx) {
			return apply(Pointer.pointerToAddress(avctx, AVCodecContext.class));
		}
	};
	/** <i>native declaration : ./libavcodec/avcodec.h:1552</i> */
	public static abstract class frame_params_callback extends Callback<frame_params_callback > {
		public int apply(Pointer<AVCodecContext > avctx, Pointer<AVBufferRef > hw_frames_ctx) {
			return apply(Pointer.getPeer(avctx), Pointer.getPeer(hw_frames_ctx));
		}
		public int apply(@Ptr long avctx, @Ptr long hw_frames_ctx) {
			return apply(Pointer.pointerToAddress(avctx, AVCodecContext.class), Pointer.pointerToAddress(hw_frames_ctx, AVBufferRef.class));
		}
	};
	public AVHWAccel() {
		super();
	}
	public AVHWAccel(Pointer pointer) {
		super(pointer);
	}
}
