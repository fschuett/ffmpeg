package org.ffmpeg.avutil;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.SizeT;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>avutil</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("avutil") 
@Runtime(CRuntime.class) 
public class AvutilLibrary {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : libavutil/avutil.h:33</i>
	 */
	public enum AVMediaType implements IntValuedEnum<AVMediaType > {
		/** < Usually treated as AVMEDIA_TYPE_DATA */
		AVMEDIA_TYPE_UNKNOWN(-1),
		AVMEDIA_TYPE_VIDEO(0),
		AVMEDIA_TYPE_AUDIO(1),
		/** < Opaque data information usually continuous */
		AVMEDIA_TYPE_DATA(2),
		AVMEDIA_TYPE_SUBTITLE(3),
		/** < Opaque data information usually sparse */
		AVMEDIA_TYPE_ATTACHMENT(4),
		AVMEDIA_TYPE_NB(5);
		AVMediaType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVMediaType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVMediaType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : libavutil/avutil.h:57</i>
	 */
	public enum AVPictureType implements IntValuedEnum<AVPictureType > {
		/** < Undefined */
		AV_PICTURE_TYPE_NONE(0),
		/** < Intra */
		AV_PICTURE_TYPE_I(1),
		/** < Predicted */
		AV_PICTURE_TYPE_P(2),
		/** < Bi-dir predicted */
		AV_PICTURE_TYPE_B(3),
		/** < S(GMC)-VOP MPEG-4 */
		AV_PICTURE_TYPE_S(4),
		/** < Switching Intra */
		AV_PICTURE_TYPE_SI(5),
		/** < Switching Predicted */
		AV_PICTURE_TYPE_SP(6),
		/** < BI type */
		AV_PICTURE_TYPE_BI(7);
		AVPictureType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVPictureType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVPictureType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * Rounding methods.<br>
	 * enum values<br>
	 * <i>native declaration : libavutil/mathematics.h:33</i>
	 */
	public enum AVRounding implements IntValuedEnum<AVRounding > {
		/** < Round toward zero. */
		AV_ROUND_ZERO(0),
		/** < Round away from zero. */
		AV_ROUND_INF(1),
		/** < Round toward -infinity. */
		AV_ROUND_DOWN(2),
		/** < Round toward +infinity. */
		AV_ROUND_UP(3),
		/** < Round to nearest and halfway cases away from zero. */
		AV_ROUND_NEAR_INF(5),
		/**
		 * Flag telling rescaling functions to pass `INT64_MIN`/`MAX` through<br>
		 * unchanged, avoiding special cases for #AV_NOPTS_VALUE.<br>
		 * * Unlike other values of the enumeration AVRounding, this value is a<br>
		 * bitmask that must be used in conjunction with another value of the<br>
		 * enumeration through a bitwise OR, in order to set behavior for normal<br>
		 * cases.<br>
		 * * @code{.c}<br>
		 * av_rescale_rnd(3, 1, 2, AV_ROUND_UP | AV_ROUND_PASS_MINMAX);<br>
		 * // Rescaling 3:<br>
		 * //     Calculating 3 * 1 / 2<br>
		 * //     3 / 2 is rounded up to 2<br>
		 * //     => 2<br>
		 * * av_rescale_rnd(AV_NOPTS_VALUE, 1, 2, AV_ROUND_UP | AV_ROUND_PASS_MINMAX);<br>
		 * // Rescaling AV_NOPTS_VALUE:<br>
		 * //     AV_NOPTS_VALUE == INT64_MIN<br>
		 * //     AV_NOPTS_VALUE is passed through<br>
		 * //     => AV_NOPTS_VALUE<br>
		 * @endcode
		 */
		AV_ROUND_PASS_MINMAX(8192);
		AVRounding(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVRounding > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVRounding > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : libavutil/log.h:20</i>
	 */
	public enum AVClassCategory implements IntValuedEnum<AVClassCategory > {
		AV_CLASS_CATEGORY_NA(0),
		AV_CLASS_CATEGORY_INPUT(1),
		AV_CLASS_CATEGORY_OUTPUT(2),
		AV_CLASS_CATEGORY_MUXER(3),
		AV_CLASS_CATEGORY_DEMUXER(4),
		AV_CLASS_CATEGORY_ENCODER(5),
		AV_CLASS_CATEGORY_DECODER(6),
		AV_CLASS_CATEGORY_FILTER(7),
		AV_CLASS_CATEGORY_BITSTREAM_FILTER(8),
		AV_CLASS_CATEGORY_SWSCALER(9),
		AV_CLASS_CATEGORY_SWRESAMPLER(10),
		AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT(40),
		AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT(41),
		AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT(42),
		AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT(43),
		AV_CLASS_CATEGORY_DEVICE_OUTPUT(44),
		AV_CLASS_CATEGORY_DEVICE_INPUT(45),
		/** < not part of ABI/API */
		AV_CLASS_CATEGORY_NB(46);
		AVClassCategory(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVClassCategory > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVClassCategory > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * Pixel format.<br>
	 * * @note<br>
	 * AV_PIX_FMT_RGB32 is handled in an endian-specific manner. An RGBA<br>
	 * color is put together as:<br>
	 *  (A << 24) | (R << 16) | (G << 8) | B<br>
	 * This is stored as BGRA on little-endian CPU architectures and ARGB on<br>
	 * big-endian CPUs.<br>
	 * * @par<br>
	 * When the pixel format is palettized RGB32 (AV_PIX_FMT_PAL8), the palettized<br>
	 * image data is stored in AVFrame.data[0]. The palette is transported in<br>
	 * AVFrame.data[1], is 1024 bytes long (256 4-byte entries) and is<br>
	 * formatted the same as in AV_PIX_FMT_RGB32 described above (i.e., it is<br>
	 * also endian-specific). Note also that the individual RGB32 palette<br>
	 * components stored in AVFrame.data[1] should be in the range 0..255.<br>
	 * This is important as many custom PAL8 video codecs that were designed<br>
	 * to run on the IBM VGA graphics adapter use 6-bit palette components.<br>
	 * * @par<br>
	 * For all the 8 bits per pixel formats, an RGB32 palette is in data[1] like<br>
	 * for pal8. This palette is filled in automatically by the function<br>
	 * allocating the picture.<br>
	 * enum values<br>
	 * <i>native declaration : libavutil/pixfmt.h:441</i>
	 */
	public enum AVPixelFormat implements IntValuedEnum<AVPixelFormat > {
		AV_PIX_FMT_NONE(-1),
		/** < planar YUV 4:2:0, 12bpp, (1 Cr & Cb sample per 2x2 Y samples) */
		AV_PIX_FMT_YUV420P(0),
		/** < packed YUV 4:2:2, 16bpp, Y0 Cb Y1 Cr */
		AV_PIX_FMT_YUYV422(1),
		/** < packed RGB 8:8:8, 24bpp, RGBRGB... */
		AV_PIX_FMT_RGB24(2),
		/** < packed RGB 8:8:8, 24bpp, BGRBGR... */
		AV_PIX_FMT_BGR24(3),
		/** < planar YUV 4:2:2, 16bpp, (1 Cr & Cb sample per 2x1 Y samples) */
		AV_PIX_FMT_YUV422P(4),
		/** < planar YUV 4:4:4, 24bpp, (1 Cr & Cb sample per 1x1 Y samples) */
		AV_PIX_FMT_YUV444P(5),
		/** < planar YUV 4:1:0,  9bpp, (1 Cr & Cb sample per 4x4 Y samples) */
		AV_PIX_FMT_YUV410P(6),
		/** < planar YUV 4:1:1, 12bpp, (1 Cr & Cb sample per 4x1 Y samples) */
		AV_PIX_FMT_YUV411P(7),
		/** <        Y        ,  8bpp */
		AV_PIX_FMT_GRAY8(8),
		/** <        Y        ,  1bpp, 0 is white, 1 is black, in each byte pixels are ordered from the msb to the lsb */
		AV_PIX_FMT_MONOWHITE(9),
		/** <        Y        ,  1bpp, 0 is black, 1 is white, in each byte pixels are ordered from the msb to the lsb */
		AV_PIX_FMT_MONOBLACK(10),
		/** < 8 bits with AV_PIX_FMT_RGB32 palette */
		AV_PIX_FMT_PAL8(11),
		/** < planar YUV 4:2:0, 12bpp, full scale (JPEG), deprecated in favor of AV_PIX_FMT_YUV420P and setting color_range */
		AV_PIX_FMT_YUVJ420P(12),
		/** < planar YUV 4:2:2, 16bpp, full scale (JPEG), deprecated in favor of AV_PIX_FMT_YUV422P and setting color_range */
		AV_PIX_FMT_YUVJ422P(13),
		/** < planar YUV 4:4:4, 24bpp, full scale (JPEG), deprecated in favor of AV_PIX_FMT_YUV444P and setting color_range */
		AV_PIX_FMT_YUVJ444P(14),
		/** < XVideo Motion Acceleration via common packet passing */
		AV_PIX_FMT_XVMC_MPEG2_MC(15),
		AV_PIX_FMT_XVMC_MPEG2_IDCT(16),
		AV_PIX_FMT_XVMC(16),
		/** < packed YUV 4:2:2, 16bpp, Cb Y0 Cr Y1 */
		AV_PIX_FMT_UYVY422((16 + 1)),
		/** < packed YUV 4:1:1, 12bpp, Cb Y0 Y1 Cr Y2 Y3 */
		AV_PIX_FMT_UYYVYY411((16 + 2)),
		/** < packed RGB 3:3:2,  8bpp, (msb)2B 3G 3R(lsb) */
		AV_PIX_FMT_BGR8((16 + 3)),
		/** < packed RGB 1:2:1 bitstream,  4bpp, (msb)1B 2G 1R(lsb), a byte contains two pixels, the first pixel in the byte is the one composed by the 4 msb bits */
		AV_PIX_FMT_BGR4((16 + 4)),
		/** < packed RGB 1:2:1,  8bpp, (msb)1B 2G 1R(lsb) */
		AV_PIX_FMT_BGR4_BYTE((16 + 5)),
		/** < packed RGB 3:3:2,  8bpp, (msb)2R 3G 3B(lsb) */
		AV_PIX_FMT_RGB8((16 + 6)),
		/** < packed RGB 1:2:1 bitstream,  4bpp, (msb)1R 2G 1B(lsb), a byte contains two pixels, the first pixel in the byte is the one composed by the 4 msb bits */
		AV_PIX_FMT_RGB4((16 + 7)),
		/** < packed RGB 1:2:1,  8bpp, (msb)1R 2G 1B(lsb) */
		AV_PIX_FMT_RGB4_BYTE((16 + 8)),
		/** < planar YUV 4:2:0, 12bpp, 1 plane for Y and 1 plane for the UV components, which are interleaved (first byte U and the following byte V) */
		AV_PIX_FMT_NV12((16 + 9)),
		/** < as above, but U and V bytes are swapped */
		AV_PIX_FMT_NV21((16 + 10)),
		/** < packed ARGB 8:8:8:8, 32bpp, ARGBARGB... */
		AV_PIX_FMT_ARGB((16 + 11)),
		/** < packed RGBA 8:8:8:8, 32bpp, RGBARGBA... */
		AV_PIX_FMT_RGBA((16 + 12)),
		/** < packed ABGR 8:8:8:8, 32bpp, ABGRABGR... */
		AV_PIX_FMT_ABGR((16 + 13)),
		/** < packed BGRA 8:8:8:8, 32bpp, BGRABGRA... */
		AV_PIX_FMT_BGRA((16 + 14)),
		/** <        Y        , 16bpp, big-endian */
		AV_PIX_FMT_GRAY16BE((16 + 15)),
		/** <        Y        , 16bpp, little-endian */
		AV_PIX_FMT_GRAY16LE((16 + 16)),
		/** < planar YUV 4:4:0 (1 Cr & Cb sample per 1x2 Y samples) */
		AV_PIX_FMT_YUV440P((16 + 17)),
		/** < planar YUV 4:4:0 full scale (JPEG), deprecated in favor of AV_PIX_FMT_YUV440P and setting color_range */
		AV_PIX_FMT_YUVJ440P((16 + 18)),
		/** < planar YUV 4:2:0, 20bpp, (1 Cr & Cb sample per 2x2 Y & A samples) */
		AV_PIX_FMT_YUVA420P((16 + 19)),
		/** < H.264 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers */
		AV_PIX_FMT_VDPAU_H264((16 + 20)),
		/** < MPEG-1 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers */
		AV_PIX_FMT_VDPAU_MPEG1((16 + 21)),
		/** < MPEG-2 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers */
		AV_PIX_FMT_VDPAU_MPEG2((16 + 22)),
		/** < WMV3 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers */
		AV_PIX_FMT_VDPAU_WMV3((16 + 23)),
		/** < VC-1 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers */
		AV_PIX_FMT_VDPAU_VC1((16 + 24)),
		/** < packed RGB 16:16:16, 48bpp, 16R, 16G, 16B, the 2-byte value for each R/G/B component is stored as big-endian */
		AV_PIX_FMT_RGB48BE((16 + 25)),
		/** < packed RGB 16:16:16, 48bpp, 16R, 16G, 16B, the 2-byte value for each R/G/B component is stored as little-endian */
		AV_PIX_FMT_RGB48LE((16 + 26)),
		/** < packed RGB 5:6:5, 16bpp, (msb)   5R 6G 5B(lsb), big-endian */
		AV_PIX_FMT_RGB565BE((16 + 27)),
		/** < packed RGB 5:6:5, 16bpp, (msb)   5R 6G 5B(lsb), little-endian */
		AV_PIX_FMT_RGB565LE((16 + 28)),
		/** < packed RGB 5:5:5, 16bpp, (msb)1X 5R 5G 5B(lsb), big-endian   , X=unused/undefined */
		AV_PIX_FMT_RGB555BE((16 + 29)),
		/** < packed RGB 5:5:5, 16bpp, (msb)1X 5R 5G 5B(lsb), little-endian, X=unused/undefined */
		AV_PIX_FMT_RGB555LE((16 + 30)),
		/** < packed BGR 5:6:5, 16bpp, (msb)   5B 6G 5R(lsb), big-endian */
		AV_PIX_FMT_BGR565BE((16 + 31)),
		/** < packed BGR 5:6:5, 16bpp, (msb)   5B 6G 5R(lsb), little-endian */
		AV_PIX_FMT_BGR565LE((16 + 32)),
		/** < packed BGR 5:5:5, 16bpp, (msb)1X 5B 5G 5R(lsb), big-endian   , X=unused/undefined */
		AV_PIX_FMT_BGR555BE((16 + 33)),
		/** < packed BGR 5:5:5, 16bpp, (msb)1X 5B 5G 5R(lsb), little-endian, X=unused/undefined */
		AV_PIX_FMT_BGR555LE((16 + 34)),
		/**
		 * @{<br>
		 * < HW acceleration through VA API at motion compensation entry-point, Picture.data[3] contains a vaapi_render_state struct which contains macroblocks as well as various fields extracted from headers
		 */
		AV_PIX_FMT_VAAPI_MOCO((16 + 35)),
		/** < HW acceleration through VA API at IDCT entry-point, Picture.data[3] contains a vaapi_render_state struct which contains fields extracted from headers */
		AV_PIX_FMT_VAAPI_IDCT((16 + 36)),
		/** < HW decoding through VA API, Picture.data[3] contains a VASurfaceID */
		AV_PIX_FMT_VAAPI_VLD((16 + 37)),
		/** @} */
		AV_PIX_FMT_VAAPI(16 + 37),
		/** < planar YUV 4:2:0, 24bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian */
		AV_PIX_FMT_YUV420P16LE((16 + 37 + 1)),
		/** < planar YUV 4:2:0, 24bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian */
		AV_PIX_FMT_YUV420P16BE((16 + 37 + 2)),
		/** < planar YUV 4:2:2, 32bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian */
		AV_PIX_FMT_YUV422P16LE((16 + 37 + 3)),
		/** < planar YUV 4:2:2, 32bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian */
		AV_PIX_FMT_YUV422P16BE((16 + 37 + 4)),
		/** < planar YUV 4:4:4, 48bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian */
		AV_PIX_FMT_YUV444P16LE((16 + 37 + 5)),
		/** < planar YUV 4:4:4, 48bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian */
		AV_PIX_FMT_YUV444P16BE((16 + 37 + 6)),
		/** < MPEG-4 HW decoding with VDPAU, data[0] contains a vdpau_render_state struct which contains the bitstream of the slices as well as various fields extracted from headers */
		AV_PIX_FMT_VDPAU_MPEG4((16 + 37 + 7)),
		/** < HW decoding through DXVA2, Picture.data[3] contains a LPDIRECT3DSURFACE9 pointer */
		AV_PIX_FMT_DXVA2_VLD((16 + 37 + 8)),
		/** < packed RGB 4:4:4, 16bpp, (msb)4X 4R 4G 4B(lsb), little-endian, X=unused/undefined */
		AV_PIX_FMT_RGB444LE((16 + 37 + 9)),
		/** < packed RGB 4:4:4, 16bpp, (msb)4X 4R 4G 4B(lsb), big-endian,    X=unused/undefined */
		AV_PIX_FMT_RGB444BE((16 + 37 + 10)),
		/** < packed BGR 4:4:4, 16bpp, (msb)4X 4B 4G 4R(lsb), little-endian, X=unused/undefined */
		AV_PIX_FMT_BGR444LE((16 + 37 + 11)),
		/** < packed BGR 4:4:4, 16bpp, (msb)4X 4B 4G 4R(lsb), big-endian,    X=unused/undefined */
		AV_PIX_FMT_BGR444BE((16 + 37 + 12)),
		/** < 8 bits gray, 8 bits alpha */
		AV_PIX_FMT_YA8((16 + 37 + 13)),
		/** < alias for AV_PIX_FMT_YA8 */
		AV_PIX_FMT_Y400A(16 + 37 + 13),
		/** < alias for AV_PIX_FMT_YA8 */
		AV_PIX_FMT_GRAY8A(16 + 37 + 13),
		/** < packed RGB 16:16:16, 48bpp, 16B, 16G, 16R, the 2-byte value for each R/G/B component is stored as big-endian */
		AV_PIX_FMT_BGR48BE((16 + 37 + 13 + 1)),
		/** < packed RGB 16:16:16, 48bpp, 16B, 16G, 16R, the 2-byte value for each R/G/B component is stored as little-endian */
		AV_PIX_FMT_BGR48LE((16 + 37 + 13 + 2)),
		/**
		 * The following 12 formats have the disadvantage of needing 1 format for each bit depth.<br>
		 * Notice that each 9/10 bits sample is stored in 16 bits with extra padding.<br>
		 * If you want to support multiple bit depths, then using AV_PIX_FMT_YUV420P16* with the bpp stored separately is better.<br>
		 * < planar YUV 4:2:0, 13.5bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian
		 */
		AV_PIX_FMT_YUV420P9BE((16 + 37 + 13 + 3)),
		/** < planar YUV 4:2:0, 13.5bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian */
		AV_PIX_FMT_YUV420P9LE((16 + 37 + 13 + 4)),
		/** < planar YUV 4:2:0, 15bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian */
		AV_PIX_FMT_YUV420P10BE((16 + 37 + 13 + 5)),
		/** < planar YUV 4:2:0, 15bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian */
		AV_PIX_FMT_YUV420P10LE((16 + 37 + 13 + 6)),
		/** < planar YUV 4:2:2, 20bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian */
		AV_PIX_FMT_YUV422P10BE((16 + 37 + 13 + 7)),
		/** < planar YUV 4:2:2, 20bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian */
		AV_PIX_FMT_YUV422P10LE((16 + 37 + 13 + 8)),
		/** < planar YUV 4:4:4, 27bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian */
		AV_PIX_FMT_YUV444P9BE((16 + 37 + 13 + 9)),
		/** < planar YUV 4:4:4, 27bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian */
		AV_PIX_FMT_YUV444P9LE((16 + 37 + 13 + 10)),
		/** < planar YUV 4:4:4, 30bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian */
		AV_PIX_FMT_YUV444P10BE((16 + 37 + 13 + 11)),
		/** < planar YUV 4:4:4, 30bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian */
		AV_PIX_FMT_YUV444P10LE((16 + 37 + 13 + 12)),
		/** < planar YUV 4:2:2, 18bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian */
		AV_PIX_FMT_YUV422P9BE((16 + 37 + 13 + 13)),
		/** < planar YUV 4:2:2, 18bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian */
		AV_PIX_FMT_YUV422P9LE((16 + 37 + 13 + 14)),
		/** < hardware decoding through VDA */
		AV_PIX_FMT_VDA_VLD((16 + 37 + 13 + 15)),
		/** < planar GBR 4:4:4 24bpp */
		AV_PIX_FMT_GBRP((16 + 37 + 13 + 16)),
		/** alias for #AV_PIX_FMT_GBRP */
		AV_PIX_FMT_GBR24P(16 + 37 + 13 + 16),
		/** < planar GBR 4:4:4 27bpp, big-endian */
		AV_PIX_FMT_GBRP9BE((16 + 37 + 13 + 16 + 1)),
		/** < planar GBR 4:4:4 27bpp, little-endian */
		AV_PIX_FMT_GBRP9LE((16 + 37 + 13 + 16 + 2)),
		/** < planar GBR 4:4:4 30bpp, big-endian */
		AV_PIX_FMT_GBRP10BE((16 + 37 + 13 + 16 + 3)),
		/** < planar GBR 4:4:4 30bpp, little-endian */
		AV_PIX_FMT_GBRP10LE((16 + 37 + 13 + 16 + 4)),
		/** < planar GBR 4:4:4 48bpp, big-endian */
		AV_PIX_FMT_GBRP16BE((16 + 37 + 13 + 16 + 5)),
		/** < planar GBR 4:4:4 48bpp, little-endian */
		AV_PIX_FMT_GBRP16LE((16 + 37 + 13 + 16 + 6)),
		/** < planar YUV 4:2:2 24bpp, (1 Cr & Cb sample per 2x1 Y & A samples) */
		AV_PIX_FMT_YUVA422P((16 + 37 + 13 + 16 + 7)),
		/** < planar YUV 4:4:4 32bpp, (1 Cr & Cb sample per 1x1 Y & A samples) */
		AV_PIX_FMT_YUVA444P((16 + 37 + 13 + 16 + 8)),
		/** < planar YUV 4:2:0 22.5bpp, (1 Cr & Cb sample per 2x2 Y & A samples), big-endian */
		AV_PIX_FMT_YUVA420P9BE((16 + 37 + 13 + 16 + 9)),
		/** < planar YUV 4:2:0 22.5bpp, (1 Cr & Cb sample per 2x2 Y & A samples), little-endian */
		AV_PIX_FMT_YUVA420P9LE((16 + 37 + 13 + 16 + 10)),
		/** < planar YUV 4:2:2 27bpp, (1 Cr & Cb sample per 2x1 Y & A samples), big-endian */
		AV_PIX_FMT_YUVA422P9BE((16 + 37 + 13 + 16 + 11)),
		/** < planar YUV 4:2:2 27bpp, (1 Cr & Cb sample per 2x1 Y & A samples), little-endian */
		AV_PIX_FMT_YUVA422P9LE((16 + 37 + 13 + 16 + 12)),
		/** < planar YUV 4:4:4 36bpp, (1 Cr & Cb sample per 1x1 Y & A samples), big-endian */
		AV_PIX_FMT_YUVA444P9BE((16 + 37 + 13 + 16 + 13)),
		/** < planar YUV 4:4:4 36bpp, (1 Cr & Cb sample per 1x1 Y & A samples), little-endian */
		AV_PIX_FMT_YUVA444P9LE((16 + 37 + 13 + 16 + 14)),
		/** < planar YUV 4:2:0 25bpp, (1 Cr & Cb sample per 2x2 Y & A samples, big-endian) */
		AV_PIX_FMT_YUVA420P10BE((16 + 37 + 13 + 16 + 15)),
		/** < planar YUV 4:2:0 25bpp, (1 Cr & Cb sample per 2x2 Y & A samples, little-endian) */
		AV_PIX_FMT_YUVA420P10LE((16 + 37 + 13 + 16 + 16)),
		/** < planar YUV 4:2:2 30bpp, (1 Cr & Cb sample per 2x1 Y & A samples, big-endian) */
		AV_PIX_FMT_YUVA422P10BE((16 + 37 + 13 + 16 + 17)),
		/** < planar YUV 4:2:2 30bpp, (1 Cr & Cb sample per 2x1 Y & A samples, little-endian) */
		AV_PIX_FMT_YUVA422P10LE((16 + 37 + 13 + 16 + 18)),
		/** < planar YUV 4:4:4 40bpp, (1 Cr & Cb sample per 1x1 Y & A samples, big-endian) */
		AV_PIX_FMT_YUVA444P10BE((16 + 37 + 13 + 16 + 19)),
		/** < planar YUV 4:4:4 40bpp, (1 Cr & Cb sample per 1x1 Y & A samples, little-endian) */
		AV_PIX_FMT_YUVA444P10LE((16 + 37 + 13 + 16 + 20)),
		/** < planar YUV 4:2:0 40bpp, (1 Cr & Cb sample per 2x2 Y & A samples, big-endian) */
		AV_PIX_FMT_YUVA420P16BE((16 + 37 + 13 + 16 + 21)),
		/** < planar YUV 4:2:0 40bpp, (1 Cr & Cb sample per 2x2 Y & A samples, little-endian) */
		AV_PIX_FMT_YUVA420P16LE((16 + 37 + 13 + 16 + 22)),
		/** < planar YUV 4:2:2 48bpp, (1 Cr & Cb sample per 2x1 Y & A samples, big-endian) */
		AV_PIX_FMT_YUVA422P16BE((16 + 37 + 13 + 16 + 23)),
		/** < planar YUV 4:2:2 48bpp, (1 Cr & Cb sample per 2x1 Y & A samples, little-endian) */
		AV_PIX_FMT_YUVA422P16LE((16 + 37 + 13 + 16 + 24)),
		/** < planar YUV 4:4:4 64bpp, (1 Cr & Cb sample per 1x1 Y & A samples, big-endian) */
		AV_PIX_FMT_YUVA444P16BE((16 + 37 + 13 + 16 + 25)),
		/** < planar YUV 4:4:4 64bpp, (1 Cr & Cb sample per 1x1 Y & A samples, little-endian) */
		AV_PIX_FMT_YUVA444P16LE((16 + 37 + 13 + 16 + 26)),
		/** < HW acceleration through VDPAU, Picture.data[3] contains a VdpVideoSurface */
		AV_PIX_FMT_VDPAU((16 + 37 + 13 + 16 + 27)),
		/** < packed XYZ 4:4:4, 36 bpp, (msb) 12X, 12Y, 12Z (lsb), the 2-byte value for each X/Y/Z is stored as little-endian, the 4 lower bits are set to 0 */
		AV_PIX_FMT_XYZ12LE((16 + 37 + 13 + 16 + 28)),
		/** < packed XYZ 4:4:4, 36 bpp, (msb) 12X, 12Y, 12Z (lsb), the 2-byte value for each X/Y/Z is stored as big-endian, the 4 lower bits are set to 0 */
		AV_PIX_FMT_XYZ12BE((16 + 37 + 13 + 16 + 29)),
		/** < interleaved chroma YUV 4:2:2, 16bpp, (1 Cr & Cb sample per 2x1 Y samples) */
		AV_PIX_FMT_NV16((16 + 37 + 13 + 16 + 30)),
		/** < interleaved chroma YUV 4:2:2, 20bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian */
		AV_PIX_FMT_NV20LE((16 + 37 + 13 + 16 + 31)),
		/** < interleaved chroma YUV 4:2:2, 20bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian */
		AV_PIX_FMT_NV20BE((16 + 37 + 13 + 16 + 32)),
		/** < packed RGBA 16:16:16:16, 64bpp, 16R, 16G, 16B, 16A, the 2-byte value for each R/G/B/A component is stored as big-endian */
		AV_PIX_FMT_RGBA64BE((16 + 37 + 13 + 16 + 33)),
		/** < packed RGBA 16:16:16:16, 64bpp, 16R, 16G, 16B, 16A, the 2-byte value for each R/G/B/A component is stored as little-endian */
		AV_PIX_FMT_RGBA64LE((16 + 37 + 13 + 16 + 34)),
		/** < packed RGBA 16:16:16:16, 64bpp, 16B, 16G, 16R, 16A, the 2-byte value for each R/G/B/A component is stored as big-endian */
		AV_PIX_FMT_BGRA64BE((16 + 37 + 13 + 16 + 35)),
		/** < packed RGBA 16:16:16:16, 64bpp, 16B, 16G, 16R, 16A, the 2-byte value for each R/G/B/A component is stored as little-endian */
		AV_PIX_FMT_BGRA64LE((16 + 37 + 13 + 16 + 36)),
		/** < packed YUV 4:2:2, 16bpp, Y0 Cr Y1 Cb */
		AV_PIX_FMT_YVYU422((16 + 37 + 13 + 16 + 37)),
		/** < HW acceleration through VDA, data[3] contains a CVPixelBufferRef */
		AV_PIX_FMT_VDA((16 + 37 + 13 + 16 + 38)),
		/** < 16 bits gray, 16 bits alpha (big-endian) */
		AV_PIX_FMT_YA16BE((16 + 37 + 13 + 16 + 39)),
		/** < 16 bits gray, 16 bits alpha (little-endian) */
		AV_PIX_FMT_YA16LE((16 + 37 + 13 + 16 + 40)),
		/** < planar GBRA 4:4:4:4 32bpp */
		AV_PIX_FMT_GBRAP((16 + 37 + 13 + 16 + 41)),
		/** < planar GBRA 4:4:4:4 64bpp, big-endian */
		AV_PIX_FMT_GBRAP16BE((16 + 37 + 13 + 16 + 42)),
		/** < planar GBRA 4:4:4:4 64bpp, little-endian */
		AV_PIX_FMT_GBRAP16LE((16 + 37 + 13 + 16 + 43)),
		/**
		 * HW acceleration through QSV, data[3] contains a pointer to the<br>
		 *  mfxFrameSurface1 structure.
		 */
		AV_PIX_FMT_QSV((16 + 37 + 13 + 16 + 44)),
		/**
		 * HW acceleration though MMAL, data[3] contains a pointer to the<br>
		 * MMAL_BUFFER_HEADER_T structure.
		 */
		AV_PIX_FMT_MMAL((16 + 37 + 13 + 16 + 45)),
		/** < HW decoding through Direct3D11 via old API, Picture.data[3] contains a ID3D11VideoDecoderOutputView pointer */
		AV_PIX_FMT_D3D11VA_VLD((16 + 37 + 13 + 16 + 46)),
		/**
		 * HW acceleration through CUDA. data[i] contain CUdeviceptr pointers<br>
		 * exactly as for system memory frames.
		 */
		AV_PIX_FMT_CUDA((16 + 37 + 13 + 16 + 47)),
		/** < packed RGB 8:8:8, 32bpp, XRGBXRGB...   X=unused/undefined */
		AV_PIX_FMT_0RGB(0x123 + 4),
		/** < packed RGB 8:8:8, 32bpp, RGBXRGBX...   X=unused/undefined */
		AV_PIX_FMT_RGB0((0x123 + 4 + 1)),
		/** < packed BGR 8:8:8, 32bpp, XBGRXBGR...   X=unused/undefined */
		AV_PIX_FMT_0BGR((0x123 + 4 + 2)),
		/** < packed BGR 8:8:8, 32bpp, BGRXBGRX...   X=unused/undefined */
		AV_PIX_FMT_BGR0((0x123 + 4 + 3)),
		/** < planar YUV 4:2:0,18bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian */
		AV_PIX_FMT_YUV420P12BE((0x123 + 4 + 4)),
		/** < planar YUV 4:2:0,18bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian */
		AV_PIX_FMT_YUV420P12LE((0x123 + 4 + 5)),
		/** < planar YUV 4:2:0,21bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian */
		AV_PIX_FMT_YUV420P14BE((0x123 + 4 + 6)),
		/** < planar YUV 4:2:0,21bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian */
		AV_PIX_FMT_YUV420P14LE((0x123 + 4 + 7)),
		/** < planar YUV 4:2:2,24bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian */
		AV_PIX_FMT_YUV422P12BE((0x123 + 4 + 8)),
		/** < planar YUV 4:2:2,24bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian */
		AV_PIX_FMT_YUV422P12LE((0x123 + 4 + 9)),
		/** < planar YUV 4:2:2,28bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian */
		AV_PIX_FMT_YUV422P14BE((0x123 + 4 + 10)),
		/** < planar YUV 4:2:2,28bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian */
		AV_PIX_FMT_YUV422P14LE((0x123 + 4 + 11)),
		/** < planar YUV 4:4:4,36bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian */
		AV_PIX_FMT_YUV444P12BE((0x123 + 4 + 12)),
		/** < planar YUV 4:4:4,36bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian */
		AV_PIX_FMT_YUV444P12LE((0x123 + 4 + 13)),
		/** < planar YUV 4:4:4,42bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian */
		AV_PIX_FMT_YUV444P14BE((0x123 + 4 + 14)),
		/** < planar YUV 4:4:4,42bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian */
		AV_PIX_FMT_YUV444P14LE((0x123 + 4 + 15)),
		/** < planar GBR 4:4:4 36bpp, big-endian */
		AV_PIX_FMT_GBRP12BE((0x123 + 4 + 16)),
		/** < planar GBR 4:4:4 36bpp, little-endian */
		AV_PIX_FMT_GBRP12LE((0x123 + 4 + 17)),
		/** < planar GBR 4:4:4 42bpp, big-endian */
		AV_PIX_FMT_GBRP14BE((0x123 + 4 + 18)),
		/** < planar GBR 4:4:4 42bpp, little-endian */
		AV_PIX_FMT_GBRP14LE((0x123 + 4 + 19)),
		/** < planar YUV 4:1:1, 12bpp, (1 Cr & Cb sample per 4x1 Y samples) full scale (JPEG), deprecated in favor of AV_PIX_FMT_YUV411P and setting color_range */
		AV_PIX_FMT_YUVJ411P((0x123 + 4 + 20)),
		/** < bayer, BGBG..(odd line), GRGR..(even line), 8-bit samples * / */
		AV_PIX_FMT_BAYER_BGGR8((0x123 + 4 + 21)),
		/** < bayer, RGRG..(odd line), GBGB..(even line), 8-bit samples * / */
		AV_PIX_FMT_BAYER_RGGB8((0x123 + 4 + 22)),
		/** < bayer, GBGB..(odd line), RGRG..(even line), 8-bit samples * / */
		AV_PIX_FMT_BAYER_GBRG8((0x123 + 4 + 23)),
		/** < bayer, GRGR..(odd line), BGBG..(even line), 8-bit samples * / */
		AV_PIX_FMT_BAYER_GRBG8((0x123 + 4 + 24)),
		/** < bayer, BGBG..(odd line), GRGR..(even line), 16-bit samples, little-endian * / */
		AV_PIX_FMT_BAYER_BGGR16LE((0x123 + 4 + 25)),
		/** < bayer, BGBG..(odd line), GRGR..(even line), 16-bit samples, big-endian * / */
		AV_PIX_FMT_BAYER_BGGR16BE((0x123 + 4 + 26)),
		/** < bayer, RGRG..(odd line), GBGB..(even line), 16-bit samples, little-endian * / */
		AV_PIX_FMT_BAYER_RGGB16LE((0x123 + 4 + 27)),
		/** < bayer, RGRG..(odd line), GBGB..(even line), 16-bit samples, big-endian * / */
		AV_PIX_FMT_BAYER_RGGB16BE((0x123 + 4 + 28)),
		/** < bayer, GBGB..(odd line), RGRG..(even line), 16-bit samples, little-endian * / */
		AV_PIX_FMT_BAYER_GBRG16LE((0x123 + 4 + 29)),
		/** < bayer, GBGB..(odd line), RGRG..(even line), 16-bit samples, big-endian * / */
		AV_PIX_FMT_BAYER_GBRG16BE((0x123 + 4 + 30)),
		/** < bayer, GRGR..(odd line), BGBG..(even line), 16-bit samples, little-endian * / */
		AV_PIX_FMT_BAYER_GRBG16LE((0x123 + 4 + 31)),
		/** < bayer, GRGR..(odd line), BGBG..(even line), 16-bit samples, big-endian * / */
		AV_PIX_FMT_BAYER_GRBG16BE((0x123 + 4 + 32)),
		/** < planar YUV 4:4:0,20bpp, (1 Cr & Cb sample per 1x2 Y samples), little-endian */
		AV_PIX_FMT_YUV440P10LE((0x123 + 4 + 33)),
		/** < planar YUV 4:4:0,20bpp, (1 Cr & Cb sample per 1x2 Y samples), big-endian */
		AV_PIX_FMT_YUV440P10BE((0x123 + 4 + 34)),
		/** < planar YUV 4:4:0,24bpp, (1 Cr & Cb sample per 1x2 Y samples), little-endian */
		AV_PIX_FMT_YUV440P12LE((0x123 + 4 + 35)),
		/** < planar YUV 4:4:0,24bpp, (1 Cr & Cb sample per 1x2 Y samples), big-endian */
		AV_PIX_FMT_YUV440P12BE((0x123 + 4 + 36)),
		/** < packed AYUV 4:4:4,64bpp (1 Cr & Cb sample per 1x1 Y & A samples), little-endian */
		AV_PIX_FMT_AYUV64LE((0x123 + 4 + 37)),
		/** < packed AYUV 4:4:4,64bpp (1 Cr & Cb sample per 1x1 Y & A samples), big-endian */
		AV_PIX_FMT_AYUV64BE((0x123 + 4 + 38)),
		/** < hardware decoding through Videotoolbox */
		AV_PIX_FMT_VIDEOTOOLBOX((0x123 + 4 + 39)),
		/** < like NV12, with 10bpp per component, data in the high bits, zeros in the low bits, little-endian */
		AV_PIX_FMT_P010LE((0x123 + 4 + 40)),
		/** < like NV12, with 10bpp per component, data in the high bits, zeros in the low bits, big-endian */
		AV_PIX_FMT_P010BE((0x123 + 4 + 41)),
		/** < planar GBR 4:4:4:4 48bpp, big-endian */
		AV_PIX_FMT_GBRAP12BE((0x123 + 4 + 42)),
		/** < planar GBR 4:4:4:4 48bpp, little-endian */
		AV_PIX_FMT_GBRAP12LE((0x123 + 4 + 43)),
		/** < planar GBR 4:4:4:4 40bpp, big-endian */
		AV_PIX_FMT_GBRAP10BE((0x123 + 4 + 44)),
		/** < planar GBR 4:4:4:4 40bpp, little-endian */
		AV_PIX_FMT_GBRAP10LE((0x123 + 4 + 45)),
		/** < hardware decoding through MediaCodec */
		AV_PIX_FMT_MEDIACODEC((0x123 + 4 + 46)),
		/** <        Y        , 12bpp, big-endian */
		AV_PIX_FMT_GRAY12BE((0x123 + 4 + 47)),
		/** <        Y        , 12bpp, little-endian */
		AV_PIX_FMT_GRAY12LE((0x123 + 4 + 48)),
		/** <        Y        , 10bpp, big-endian */
		AV_PIX_FMT_GRAY10BE((0x123 + 4 + 49)),
		/** <        Y        , 10bpp, little-endian */
		AV_PIX_FMT_GRAY10LE((0x123 + 4 + 50)),
		/** < like NV12, with 16bpp per component, little-endian */
		AV_PIX_FMT_P016LE((0x123 + 4 + 51)),
		/** < like NV12, with 16bpp per component, big-endian */
		AV_PIX_FMT_P016BE((0x123 + 4 + 52)),
		/**
		 * Hardware surfaces for Direct3D11.<br>
		 * * This is preferred over the legacy AV_PIX_FMT_D3D11VA_VLD. The new D3D11<br>
		 * hwaccel API and filtering support AV_PIX_FMT_D3D11 only.<br>
		 * * data[0] contains a ID3D11Texture2D pointer, and data[1] contains the<br>
		 * texture array index of the frame as intptr_t if the ID3D11Texture2D is<br>
		 * an array texture (or always 0 if it's a normal texture).
		 */
		AV_PIX_FMT_D3D11((0x123 + 4 + 53)),
		/** <        Y        , 9bpp, big-endian */
		AV_PIX_FMT_GRAY9BE((0x123 + 4 + 54)),
		/** <        Y        , 9bpp, little-endian */
		AV_PIX_FMT_GRAY9LE((0x123 + 4 + 55)),
		/** < IEEE-754 single precision planar GBR 4:4:4,     96bpp, big-endian */
		AV_PIX_FMT_GBRPF32BE((0x123 + 4 + 56)),
		/** < IEEE-754 single precision planar GBR 4:4:4,     96bpp, little-endian */
		AV_PIX_FMT_GBRPF32LE((0x123 + 4 + 57)),
		/** < IEEE-754 single precision planar GBRA 4:4:4:4, 128bpp, big-endian */
		AV_PIX_FMT_GBRAPF32BE((0x123 + 4 + 58)),
		/** < IEEE-754 single precision planar GBRA 4:4:4:4, 128bpp, little-endian */
		AV_PIX_FMT_GBRAPF32LE((0x123 + 4 + 59)),
		/**
		 * DRM-managed buffers exposed through PRIME buffer sharing.<br>
		 * * data[0] points to an AVDRMFrameDescriptor.
		 */
		AV_PIX_FMT_DRM_PRIME((0x123 + 4 + 60)),
		/** < number of pixel formats, DO NOT USE THIS if you want to link with shared libav* because the number of formats might differ between versions */
		AV_PIX_FMT_NB((0x123 + 4 + 61));
		AVPixelFormat(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVPixelFormat > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVPixelFormat > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * Chromaticity coordinates of the source primaries.<br>
	 * These values match the ones defined by ISO/IEC 23001-8_2013 \u00a7 7.1.<br>
	 * enum values<br>
	 * <i>native declaration : libavutil/pixfmt.h:475</i>
	 */
	public enum AVColorPrimaries implements IntValuedEnum<AVColorPrimaries > {
		AVCOL_PRI_RESERVED0(0),
		/** < also ITU-R BT1361 / IEC 61966-2-4 / SMPTE RP177 Annex B */
		AVCOL_PRI_BT709(1),
		AVCOL_PRI_UNSPECIFIED(2),
		AVCOL_PRI_RESERVED(3),
		/** < also FCC Title 47 Code of Federal Regulations 73.682 (a)(20) */
		AVCOL_PRI_BT470M(4),
		/** < also ITU-R BT601-6 625 / ITU-R BT1358 625 / ITU-R BT1700 625 PAL & SECAM */
		AVCOL_PRI_BT470BG(5),
		/** < also ITU-R BT601-6 525 / ITU-R BT1358 525 / ITU-R BT1700 NTSC */
		AVCOL_PRI_SMPTE170M(6),
		/** < functionally identical to above */
		AVCOL_PRI_SMPTE240M(7),
		/** < colour filters using Illuminant C */
		AVCOL_PRI_FILM(8),
		/** < ITU-R BT2020 */
		AVCOL_PRI_BT2020(9),
		/** < SMPTE ST 428-1 (CIE 1931 XYZ) */
		AVCOL_PRI_SMPTE428(10),
		AVCOL_PRI_SMPTEST428_1(10),
		/** < SMPTE ST 431-2 (2011) / DCI P3 */
		AVCOL_PRI_SMPTE431(11),
		/** < SMPTE ST 432-1 (2010) / P3 D65 / Display P3 */
		AVCOL_PRI_SMPTE432(12),
		/** < JEDEC P22 phosphors */
		AVCOL_PRI_JEDEC_P22(22),
		/** < Not part of ABI */
		AVCOL_PRI_NB(23);
		AVColorPrimaries(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVColorPrimaries > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVColorPrimaries > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * Color Transfer Characteristic.<br>
	 * These values match the ones defined by ISO/IEC 23001-8_2013 \u00a7 7.2.<br>
	 * enum values<br>
	 * <i>native declaration : libavutil/pixfmt.h:519</i>
	 */
	public enum AVColorTransferCharacteristic implements IntValuedEnum<AVColorTransferCharacteristic > {
		AVCOL_TRC_RESERVED0(0),
		/** < also ITU-R BT1361 */
		AVCOL_TRC_BT709(1),
		AVCOL_TRC_UNSPECIFIED(2),
		AVCOL_TRC_RESERVED(3),
		/** < also ITU-R BT470M / ITU-R BT1700 625 PAL & SECAM */
		AVCOL_TRC_GAMMA22(4),
		/** < also ITU-R BT470BG */
		AVCOL_TRC_GAMMA28(5),
		/** < also ITU-R BT601-6 525 or 625 / ITU-R BT1358 525 or 625 / ITU-R BT1700 NTSC */
		AVCOL_TRC_SMPTE170M(6),
		AVCOL_TRC_SMPTE240M(7),
		/** < "Linear transfer characteristics" */
		AVCOL_TRC_LINEAR(8),
		/** < "Logarithmic transfer characteristic (100:1 range)" */
		AVCOL_TRC_LOG(9),
		/** < "Logarithmic transfer characteristic (100 * Sqrt(10) : 1 range)" */
		AVCOL_TRC_LOG_SQRT(10),
		/** < IEC 61966-2-4 */
		AVCOL_TRC_IEC61966_2_4(11),
		/** < ITU-R BT1361 Extended Colour Gamut */
		AVCOL_TRC_BT1361_ECG(12),
		/** < IEC 61966-2-1 (sRGB or sYCC) */
		AVCOL_TRC_IEC61966_2_1(13),
		/** < ITU-R BT2020 for 10-bit system */
		AVCOL_TRC_BT2020_10(14),
		/** < ITU-R BT2020 for 12-bit system */
		AVCOL_TRC_BT2020_12(15),
		/** < SMPTE ST 2084 for 10-, 12-, 14- and 16-bit systems */
		AVCOL_TRC_SMPTE2084(16),
		AVCOL_TRC_SMPTEST2084(16),
		/** < SMPTE ST 428-1 */
		AVCOL_TRC_SMPTE428(17),
		AVCOL_TRC_SMPTEST428_1(17),
		/** < ARIB STD-B67, known as "Hybrid log-gamma" */
		AVCOL_TRC_ARIB_STD_B67(18),
		/** < Not part of ABI */
		AVCOL_TRC_NB(19);
		AVColorTransferCharacteristic(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVColorTransferCharacteristic > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVColorTransferCharacteristic > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * YUV colorspace type.<br>
	 * These values match the ones defined by ISO/IEC 23001-8_2013 \u00a7 7.3.<br>
	 * enum values<br>
	 * <i>native declaration : libavutil/pixfmt.h:556</i>
	 */
	public enum AVColorSpace implements IntValuedEnum<AVColorSpace > {
		/** < order of coefficients is actually GBR, also IEC 61966-2-1 (sRGB) */
		AVCOL_SPC_RGB(0),
		/** < also ITU-R BT1361 / IEC 61966-2-4 xvYCC709 / SMPTE RP177 Annex B */
		AVCOL_SPC_BT709(1),
		AVCOL_SPC_UNSPECIFIED(2),
		AVCOL_SPC_RESERVED(3),
		/** < FCC Title 47 Code of Federal Regulations 73.682 (a)(20) */
		AVCOL_SPC_FCC(4),
		/** < also ITU-R BT601-6 625 / ITU-R BT1358 625 / ITU-R BT1700 625 PAL & SECAM / IEC 61966-2-4 xvYCC601 */
		AVCOL_SPC_BT470BG(5),
		/** < also ITU-R BT601-6 525 / ITU-R BT1358 525 / ITU-R BT1700 NTSC */
		AVCOL_SPC_SMPTE170M(6),
		/** < functionally identical to above */
		AVCOL_SPC_SMPTE240M(7),
		/** < Used by Dirac / VC-2 and H.264 FRext, see ITU-T SG16 */
		AVCOL_SPC_YCGCO(8),
		AVCOL_SPC_YCOCG(8),
		/** < ITU-R BT2020 non-constant luminance system */
		AVCOL_SPC_BT2020_NCL(9),
		/** < ITU-R BT2020 constant luminance system */
		AVCOL_SPC_BT2020_CL(10),
		/** < SMPTE 2085, Y'D'zD'x */
		AVCOL_SPC_SMPTE2085(11),
		/** < Chromaticity-derived non-constant luminance system */
		AVCOL_SPC_CHROMA_DERIVED_NCL(12),
		/** < Chromaticity-derived constant luminance system */
		AVCOL_SPC_CHROMA_DERIVED_CL(13),
		/** < ITU-R BT.2100-0, ICtCp */
		AVCOL_SPC_ICTCP(14),
		/** < Not part of ABI */
		AVCOL_SPC_NB(15);
		AVColorSpace(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVColorSpace > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVColorSpace > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * MPEG vs JPEG YUV range.<br>
	 * enum values<br>
	 * <i>native declaration : libavutil/pixfmt.h:566</i>
	 */
	public enum AVColorRange implements IntValuedEnum<AVColorRange > {
		AVCOL_RANGE_UNSPECIFIED(0),
		/** < the normal 219*2^(n-8) "MPEG" YUV ranges */
		AVCOL_RANGE_MPEG(1),
		/** < the normal     2^n-1   "JPEG" YUV ranges */
		AVCOL_RANGE_JPEG(2),
		/** < Not part of ABI */
		AVCOL_RANGE_NB(3);
		AVColorRange(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVColorRange > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVColorRange > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * Location of chroma samples.<br>
	 * * Illustration showing the location of the first (top left) chroma sample of the<br>
	 * image, the left shows only luma, the right<br>
	 * shows the location of the chroma sample, the 2 could be imagined to overlay<br>
	 * each other but are drawn separately due to limitations of ASCII<br>
	 * *                1st 2nd       1st 2nd horizontal luma sample positions<br>
	 *                 v   v         v   v<br>
	 *                 ______        ______<br>
	 * 1st luma line > |X   X ...    |3 4 X ...     X are luma samples,<br>
	 *                |             |1 2           1-6 are possible chroma positions<br>
	 * 2nd luma line > |X   X ...    |5 6 X ...     0 is undefined/unknown position<br>
	 * enum values<br>
	 * <i>native declaration : libavutil/pixfmt.h:593</i>
	 */
	public enum AVChromaLocation implements IntValuedEnum<AVChromaLocation > {
		AVCHROMA_LOC_UNSPECIFIED(0),
		/** < MPEG-2/4 4:2:0, H.264 default for 4:2:0 */
		AVCHROMA_LOC_LEFT(1),
		/** < MPEG-1 4:2:0, JPEG 4:2:0, H.263 4:2:0 */
		AVCHROMA_LOC_CENTER(2),
		/** < ITU-R 601, SMPTE 274M 296M S314M(DV 4:1:1), mpeg2 4:2:2 */
		AVCHROMA_LOC_TOPLEFT(3),
		AVCHROMA_LOC_TOP(4),
		AVCHROMA_LOC_BOTTOMLEFT(5),
		AVCHROMA_LOC_BOTTOM(6),
		/** < Not part of ABI */
		AVCHROMA_LOC_NB(7);
		AVChromaLocation(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVChromaLocation > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVChromaLocation > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * Audio sample formats<br>
	 * * - The data described by the sample format is always in native-endian order.<br>
	 *   Sample values can be expressed by native C types, hence the lack of a signed<br>
	 *   24-bit sample format even though it is a common raw audio data format.<br>
	 * * - The floating-point formats are based on full volume being in the range<br>
	 *   [-1.0, 1.0]. Any values outside this range are beyond full volume level.<br>
	 * * - The data layout as used in av_samples_fill_arrays() and elsewhere in FFmpeg<br>
	 *   (such as AVFrame in libavcodec) is as follows:<br>
	 * * @par<br>
	 * For planar sample formats, each audio channel is in a separate data plane,<br>
	 * and linesize is the buffer size, in bytes, for a single plane. All data<br>
	 * planes must be the same size. For packed sample formats, only the first data<br>
	 * plane is used, and samples for each channel are interleaved. In this case,<br>
	 * linesize is the buffer size, in bytes, for the 1 plane.<br>
	 * enum values<br>
	 * <i>native declaration : libavutil/samplefmt.h:44</i>
	 */
	public enum AVSampleFormat implements IntValuedEnum<AVSampleFormat > {
		AV_SAMPLE_FMT_NONE(-1),
		/** < unsigned 8 bits */
		AV_SAMPLE_FMT_U8(0),
		/** < signed 16 bits */
		AV_SAMPLE_FMT_S16(1),
		/** < signed 32 bits */
		AV_SAMPLE_FMT_S32(2),
		/** < float */
		AV_SAMPLE_FMT_FLT(3),
		/** < double */
		AV_SAMPLE_FMT_DBL(4),
		/** < unsigned 8 bits, planar */
		AV_SAMPLE_FMT_U8P(5),
		/** < signed 16 bits, planar */
		AV_SAMPLE_FMT_S16P(6),
		/** < signed 32 bits, planar */
		AV_SAMPLE_FMT_S32P(7),
		/** < float, planar */
		AV_SAMPLE_FMT_FLTP(8),
		/** < double, planar */
		AV_SAMPLE_FMT_DBLP(9),
		/** < signed 64 bits */
		AV_SAMPLE_FMT_S64(10),
		/** < signed 64 bits, planar */
		AV_SAMPLE_FMT_S64P(11),
		/** < Number of sample formats. DO NOT USE if linking dynamically */
		AV_SAMPLE_FMT_NB(12);
		AVSampleFormat(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVSampleFormat > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVSampleFormat > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : libavutil/frame.h:86</i>
	 */
	public enum AVFrameSideDataType implements IntValuedEnum<AVFrameSideDataType > {
		/** The data is the AVPanScan struct defined in libavcodec. */
		AV_FRAME_DATA_PANSCAN(0),
		/**
		 * ATSC A53 Part 4 Closed Captions.<br>
		 * A53 CC bitstream is stored as uint8_t in AVFrameSideData.data.<br>
		 * The number of bytes of CC data is AVFrameSideData.size.
		 */
		AV_FRAME_DATA_A53_CC(1),
		/**
		 * Stereoscopic 3d metadata.<br>
		 * The data is the AVStereo3D struct defined in libavutil/stereo3d.h.
		 */
		AV_FRAME_DATA_STEREO3D(2),
		/** The data is the AVMatrixEncoding enum defined in libavutil/channel_layout.h. */
		AV_FRAME_DATA_MATRIXENCODING(3),
		/**
		 * Metadata relevant to a downmix procedure.<br>
		 * The data is the AVDownmixInfo struct defined in libavutil/downmix_info.h.
		 */
		AV_FRAME_DATA_DOWNMIX_INFO(4),
		/** ReplayGain information in the form of the AVReplayGain struct. */
		AV_FRAME_DATA_REPLAYGAIN(5),
		/**
		 * This side data contains a 3x3 transformation matrix describing an affine<br>
		 * transformation that needs to be applied to the frame for correct<br>
		 * presentation.<br>
		 * * See libavutil/display.h for a detailed description of the data.
		 */
		AV_FRAME_DATA_DISPLAYMATRIX(6),
		/**
		 * Active Format Description data consisting of a single byte as specified<br>
		 * in ETSI TS 101 154 using AVActiveFormatDescription enum.
		 */
		AV_FRAME_DATA_AFD(7),
		/**
		 * Motion vectors exported by some codecs (on demand through the export_mvs<br>
		 * flag set in the libavcodec AVCodecContext flags2 option).<br>
		 * The data is the AVMotionVector struct defined in<br>
		 * libavutil/motion_vector.h.
		 */
		AV_FRAME_DATA_MOTION_VECTORS(8),
		/**
		 * Recommmends skipping the specified number of samples. This is exported<br>
		 * only if the "skip_manual" AVOption is set in libavcodec.<br>
		 * This has the same format as AV_PKT_DATA_SKIP_SAMPLES.<br>
		 * @code<br>
		 * u32le number of samples to skip from start of this packet<br>
		 * u32le number of samples to skip from end of this packet<br>
		 * u8    reason for start skip<br>
		 * u8    reason for end   skip (0=padding silence, 1=convergence)<br>
		 * @endcode
		 */
		AV_FRAME_DATA_SKIP_SAMPLES(9),
		/**
		 * This side data must be associated with an audio frame and corresponds to<br>
		 * enum AVAudioServiceType defined in avcodec.h.
		 */
		AV_FRAME_DATA_AUDIO_SERVICE_TYPE(10),
		/**
		 * Mastering display metadata associated with a video frame. The payload is<br>
		 * an AVMasteringDisplayMetadata type and contains information about the<br>
		 * mastering display color volume.
		 */
		AV_FRAME_DATA_MASTERING_DISPLAY_METADATA(11),
		/**
		 * The GOP timecode in 25 bit timecode format. Data format is 64-bit integer.<br>
		 * This is set on the first frame of a GOP that has a temporal reference of 0.
		 */
		AV_FRAME_DATA_GOP_TIMECODE(12),
		/**
		 * The data represents the AVSphericalMapping structure defined in<br>
		 * libavutil/spherical.h.
		 */
		AV_FRAME_DATA_SPHERICAL(13),
		/**
		 * Content light level (based on CTA-861.3). This payload contains data in<br>
		 * the form of the AVContentLightMetadata struct.
		 */
		AV_FRAME_DATA_CONTENT_LIGHT_LEVEL(14),
		/**
		 * The data contains an ICC profile as an opaque octet buffer following the<br>
		 * format described by ISO 15076-1 with an optional name defined in the<br>
		 * metadata key entry "name".
		 */
		AV_FRAME_DATA_ICC_PROFILE(15);
		AVFrameSideDataType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVFrameSideDataType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVFrameSideDataType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : libavutil/frame.h:95</i>
	 */
	public enum AVActiveFormatDescription implements IntValuedEnum<AVActiveFormatDescription > {
		AV_AFD_SAME(8),
		AV_AFD_4_3(9),
		AV_AFD_16_9(10),
		AV_AFD_14_9(11),
		AV_AFD_4_3_SP_14_9(13),
		AV_AFD_16_9_SP_14_9(14),
		AV_AFD_SP_4_3(15);
		AVActiveFormatDescription(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVActiveFormatDescription > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVActiveFormatDescription > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * Apply the maximum possible cropping, even if it requires setting the<br>
	 * AVFrame.data[] entries to unaligned pointers. Passing unaligned data<br>
	 * to FFmpeg API is generally not allowed, and causes undefined behavior<br>
	 * (such as crashes). You can pass unaligned data only to FFmpeg APIs that<br>
	 * are explicitly documented to accept it. Use this flag only if you<br>
	 * absolutely know what you are doing.
	 */
	public static final int AV_FRAME_CROP_UNALIGNED = 1 << 0;
	/**
	 * enum values<br>
	 * <i>native declaration : libavutil/opt.h:23</i>
	 */
	public enum AVOptionType implements IntValuedEnum<AVOptionType > {
		AV_OPT_TYPE_FLAGS(0),
		AV_OPT_TYPE_INT(1),
		AV_OPT_TYPE_INT64(2),
		AV_OPT_TYPE_DOUBLE(3),
		AV_OPT_TYPE_FLOAT(4),
		AV_OPT_TYPE_STRING(5),
		AV_OPT_TYPE_RATIONAL(6),
		/** < offset must point to a pointer immediately followed by an int for the length */
		AV_OPT_TYPE_BINARY(7),
		AV_OPT_TYPE_DICT(8),
		AV_OPT_TYPE_UINT64(9),
		AV_OPT_TYPE_CONST(128),
		/** < offset must point to two consecutive integers */
		AV_OPT_TYPE_IMAGE_SIZE((('E') | (('Z') << 8) | (('I') << 16) | ('S' << 24))),
		AV_OPT_TYPE_PIXEL_FMT((('T') | (('M') << 8) | (('F') << 16) | ('P' << 24))),
		AV_OPT_TYPE_SAMPLE_FMT((('T') | (('M') << 8) | (('F') << 16) | ('S' << 24))),
		/** < offset must point to AVRational */
		AV_OPT_TYPE_VIDEO_RATE((('T') | (('A') << 8) | (('R') << 16) | ('V' << 24))),
		AV_OPT_TYPE_DURATION(((' ') | (('R') << 8) | (('U') << 16) | ('D' << 24))),
		AV_OPT_TYPE_COLOR((('R') | (('L') << 8) | (('O') << 16) | ('C' << 24))),
		AV_OPT_TYPE_CHANNEL_LAYOUT((('A') | (('L') << 8) | (('H') << 16) | ('C' << 24))),
		AV_OPT_TYPE_BOOL((('L') | (('O') << 8) | (('O') << 16) | ('B' << 24)));
		AVOptionType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVOptionType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVOptionType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * Accept to parse a value without a key; the key will then be returned<br>
	 * as NULL.
	 */
	public static final int AV_OPT_FLAG_IMPLICIT_KEY = 1;
	/**
	 * Projection of the video surface(s) on a sphere.<br>
	 * enum values<br>
	 * <i>native declaration : libavutil/spherical.h:21</i>
	 */
	public enum AVSphericalProjection implements IntValuedEnum<AVSphericalProjection > {
		/**
		 * Video represents a sphere mapped on a flat surface using<br>
		 * equirectangular projection.
		 */
		AV_SPHERICAL_EQUIRECTANGULAR(0),
		/**
		 * Video frame is split into 6 faces of a cube, and arranged on a<br>
		 * 3x2 layout. Faces are oriented upwards for the front, left, right,<br>
		 * and back faces. The up face is oriented so the top of the face is<br>
		 * forwards and the down face is oriented so the top of the face is<br>
		 * to the back.
		 */
		AV_SPHERICAL_CUBEMAP(1),
		/**
		 * Video represents a portion of a sphere mapped on a flat surface<br>
		 * using equirectangular projection. The @ref bounding fields indicate<br>
		 * the position of the current video in a larger surface.
		 */
		AV_SPHERICAL_EQUIRECTANGULAR_TILE(2);
		AVSphericalProjection(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVSphericalProjection > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVSphericalProjection > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : libavutil/avstring.h:250</i>
	 */
	public enum AVEscapeMode implements IntValuedEnum<AVEscapeMode > {
		/** < Use auto-selected escaping mode. */
		AV_ESCAPE_MODE_AUTO(0),
		/** < Use backslash escaping. */
		AV_ESCAPE_MODE_BACKSLASH(1),
		/** < Use single-quote escaping. */
		AV_ESCAPE_MODE_QUOTE(2);
		AVEscapeMode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVEscapeMode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVEscapeMode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : ./libavutil/channel_layout.h:9</i>
	 */
	public enum AVMatrixEncoding implements IntValuedEnum<AVMatrixEncoding > {
		AV_MATRIX_ENCODING_NONE(0),
		AV_MATRIX_ENCODING_DOLBY(1),
		AV_MATRIX_ENCODING_DPLII(2),
		AV_MATRIX_ENCODING_DPLIIX(3),
		AV_MATRIX_ENCODING_DPLIIZ(4),
		AV_MATRIX_ENCODING_DOLBYEX(5),
		AV_MATRIX_ENCODING_DOLBYHEADPHONE(6),
		AV_MATRIX_ENCODING_NB(7);
		AVMatrixEncoding(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVMatrixEncoding > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVMatrixEncoding > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * Conversion Error : a.num<br>
	 * SKIPPED:<br>
	 * <i>native declaration : libavutil/rational.h:0</i><br>
	 * const int64_t tmp = a.num * (int64_t)b.den - b.num * (int64_t)a.den;
	 */
	/** <i>native declaration : libavutil/avstring.h</i> */
	public static final int AV_UTF8_FLAG_ACCEPT_NON_CHARACTERS = (int)2;
	/** <i>native declaration : libavutil/dict.h</i> */
	public static final int AV_DICT_APPEND = (int)32;
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_DECODER_NOT_FOUND = (int)(-(0xF8) | (('D') << 8) | (('E') << 16) | ('C' << 24));
	/** <i>native declaration : libavutil/mathematics.h</i> */
	public static final double M_LOG2_10 = (double)3.32192809488736234787;
	/** <i>native declaration : libavutil/pixdesc.h</i> */
	public static final int FF_LOSS_RESOLUTION = (int)0x0001;
	/** <i>native declaration : libavutil/avstring.h</i> */
	public static final int AV_UTF8_FLAG_ACCEPT_INVALID_BIG_CODES = (int)1;
	/** <i>native declaration : libavutil/avutil.h</i> */
	public static final int FF_QP2LAMBDA = (int)118;
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_MMX2 = (int)0x0002;
	/** <i>native declaration : libavutil/log.h</i> */
	public static final int AV_LOG_WARNING = (int)24;
	/** <i>native declaration : libavutil/log.h</i> */
	public static final int AV_LOG_PANIC = (int)0;
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_HTTP_UNAUTHORIZED = (int)(-(0xF8) | (('4') << 8) | (('0') << 16) | ('1' << 24));
	/** <i>native declaration : libavutil/version.h</i> */
	public static final boolean FF_API_VAAPI = (boolean)(55 < 56);
	/** <i>native declaration : libavutil/frame.h</i> */
	public static final int FF_DECODE_ERROR_INVALID_BITSTREAM = (int)1;
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_7POINT1 = (int)(((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000200 | 0x00000400) | 0x00000008) | 0x00000010 | 0x00000020);
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_7POINT0 = (int)((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000200 | 0x00000400) | 0x00000010 | 0x00000020);
	/** <i>native declaration : libavutil/opt.h</i> */
	public static final int AV_OPT_SERIALIZE_SKIP_DEFAULTS = (int)0x00000001;
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_3DNOW = (int)0x0004;
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_SIDE_RIGHT = (int)0x00000400;
	/** <i>native declaration : libavutil/avstring.h</i> */
	public static final int AV_ESCAPE_FLAG_STRICT = (int)(1 << 1);
	/** <i>native declaration : libavutil/opt.h</i> */
	public static final int AV_OPT_FLAG_ENCODING_PARAM = (int)1;
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_EXPERIMENTAL = (int)(0x2bb2afa8);
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_HTTP_NOT_FOUND = (int)(-(0xF8) | (('4') << 8) | (('0') << 16) | ('4' << 24));
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_7POINT0_FRONT = (int)((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000200 | 0x00000400) | 0x00000040 | 0x00000080);
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final long AV_CH_SURROUND_DIRECT_RIGHT = (long)0x0000000400000000L;
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_TOP_BACK_CENTER = (int)0x00010000;
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_HEXAGONAL = (int)((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000010 | 0x00000020) | 0x00000100);
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_SSSE3 = (int)0x0080;
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_FRONT_CENTER = (int)0x00000004;
	/** <i>native declaration : libavutil/opt.h</i> */
	public static final int AV_OPT_FLAG_DECODING_PARAM = (int)2;
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_2POINT1 = (int)((0x00000001 | 0x00000002) | 0x00000008);
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_STREAM_NOT_FOUND = (int)(-(0xF8) | (('S') << 8) | (('T') << 16) | ('R' << 24));
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_AESNI = (int)0x80000;
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_SURROUND = (int)((0x00000001 | 0x00000002) | 0x00000004);
	/** <i>native declaration : libavutil/avutil.h</i> */
	public static final int FF_LAMBDA_MAX = (int)(256 * 128 - 1);
	/** <i>native declaration : libavutil/pixdesc.h</i> */
	public static final int AV_PIX_FMT_FLAG_FLOAT = (int)(1 << 9);
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_ARMV6 = (int)(1 << 1);
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_ARMV8 = (int)(1 << 6);
	/** <i>native declaration : ./libavutil/avconfig.h</i> */
	public static final int AV_HAVE_BIGENDIAN = (int)0;
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_EXIT = (int)(-('E') | (('X') << 8) | (('I') << 16) | ('T' << 24));
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_MONO = (int)(0x00000004);
	/** <i>native declaration : libavutil/version.h</i> */
	public static final boolean FF_API_PKT_PTS = (boolean)(55 < 56);
	/** <i>native declaration : libavutil/mathematics.h</i> */
	public static final double M_PHI = (double)1.61803398874989484820;
	/** <i>native declaration : libavutil/pixdesc.h</i> */
	public static final int AV_PIX_FMT_FLAG_PAL = (int)(1 << 1);
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_BUG = (int)(-('B') | (('U') << 8) | (('G') << 16) | ('!' << 24));
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_BACK_RIGHT = (int)0x00000020;
	/** <i>native declaration : libavutil/frame.h</i> */
	public static final int AV_FRAME_FLAG_CORRUPT = (int)(1 << 0);
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_BACK_LEFT = (int)0x00000010;
	/** <i>native declaration : libavutil/dict.h</i> */
	public static final int AV_DICT_DONT_STRDUP_KEY = (int)4;
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_MUXER_NOT_FOUND = (int)(-(0xF8) | (('M') << 8) | (('U') << 16) | ('X' << 24));
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_3DNOWEXT = (int)0x0020;
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_FILTER_NOT_FOUND = (int)(-(0xF8) | (('F') << 8) | (('I') << 16) | ('L' << 24));
	/** <i>native declaration : libavutil/frame.h</i> */
	public static final int AV_NUM_DATA_POINTERS = (int)8;
	/** <i>native declaration : libavutil/avutil.h</i> */
	public static final int AV_TIME_BASE = (int)1000000;
	/** <i>native declaration : libavutil/opt.h</i> */
	public static final int AV_OPT_FLAG_VIDEO_PARAM = (int)16;
	/** <i>native declaration : libavutil/version.h</i> */
	public static final boolean FF_API_VDPAU = (boolean)(55 < 56);
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_5POINT1_BACK = (int)((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000010 | 0x00000020) | 0x00000008);
	/** <i>native declaration : libavutil/pixdesc.h</i> */
	public static final int AV_PIX_FMT_FLAG_PSEUDOPAL = (int)(1 << 6);
	/** <i>native declaration : libavutil/opt.h</i> */
	public static final int AV_OPT_SEARCH_FAKE_OBJ = (int)(1 << 1);
	/** <i>native declaration : libavutil/bprint.h</i> */
	public static final int AV_BPRINT_SIZE_UNLIMITED = (int)(-1);
	/** <i>native declaration : libavutil/pixdesc.h</i> */
	public static final int AV_PIX_FMT_FLAG_ALPHA = (int)(1 << 7);
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final long AV_CH_LAYOUT_HEXADECAGONAL = (long)(((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000200 | 0x00000400) | 0x00000010 | 0x00000100 | 0x00000020) | 0x0000000080000000L | 0x0000000100000000L | 0x00008000 | 0x00020000 | 0x00010000 | 0x00002000 | 0x00001000 | 0x00004000);
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_AVXSLOW = (int)0x8000000;
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_FRONT_RIGHT = (int)0x00000002;
	/** <i>native declaration : libavutil/log.h</i> */
	public static final int AV_LOG_QUIET = (int)-8;
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_PROTOCOL_NOT_FOUND = (int)(-(0xF8) | (('P') << 8) | (('R') << 16) | ('O' << 24));
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final long AV_CH_WIDE_RIGHT = (long)0x0000000100000000L;
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_SSSE3SLOW = (int)0x4000000;
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LOW_FREQUENCY = (int)0x00000008;
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_INPUT_CHANGED = (int)(0x636e6701);
	/** <i>native declaration : libavutil/opt.h</i> */
	public static final int AV_OPT_FLAG_METADATA = (int)4;
	/** <i>native declaration : libavutil/log.h</i> */
	public static final int AV_LOG_FATAL = (int)8;
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_CMOV = (int)0x1000;
	/** <i>native declaration : libavutil/version.h</i> */
	public static final int LIBAVUTIL_VERSION_MICRO = (int)100;
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_TOP_FRONT_CENTER = (int)0x00002000;
	/** <i>native declaration : libavutil/version.h</i> */
	public static final String LIBAVUTIL_IDENT = (String)"Lavu55.78.100";
	/** <i>native declaration : libavutil/pixdesc.h</i> */
	public static final int AV_PIX_FMT_FLAG_HWACCEL = (int)(1 << 3);
	/** <i>native declaration : libavutil/log.h</i> */
	public static final int AV_LOG_DEBUG = (int)48;
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AV_ERROR_MAX_STRING_SIZE = (int)64;
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_ARMV6T2 = (int)(1 << 2);
	/** <i>native declaration : libavutil/avstring.h</i> */
	public static final int AV_UTF8_FLAG_ACCEPT_SURROGATES = (int)4;
	/** <i>native declaration : libavutil/log.h</i> */
	public static final int AV_LOG_INFO = (int)32;
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_5POINT1 = (int)((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000200 | 0x00000400) | 0x00000008);
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_5POINT0 = (int)(((0x00000001 | 0x00000002) | 0x00000004) | 0x00000200 | 0x00000400);
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_ATOM = (int)0x10000000;
	/** <i>native declaration : libavutil/pixdesc.h</i> */
	public static final int AV_PIX_FMT_FLAG_BE = (int)(1 << 0);
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_6POINT1_BACK = (int)(((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000010 | 0x00000020) | 0x00000008) | 0x00000100);
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_INVALIDDATA = (int)(-('I') | (('N') << 8) | (('D') << 16) | ('A' << 24));
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_4POINT1 = (int)((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000100) | 0x00000008);
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_4POINT0 = (int)(((0x00000001 | 0x00000002) | 0x00000004) | 0x00000100);
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_SSE2SLOW = (int)0x40000000;
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_XOP = (int)0x0400;
	/** <i>native declaration : libavutil/opt.h</i> */
	public static final int AV_OPT_FLAG_AUDIO_PARAM = (int)8;
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final long AV_CH_LOW_FREQUENCY_2 = (long)0x0000000800000000L;
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_DEMUXER_NOT_FOUND = (int)(-(0xF8) | (('D') << 8) | (('E') << 16) | ('M' << 24));
	/** <i>native declaration : libavutil/pixdesc.h</i> */
	public static final int FF_LOSS_COLORSPACE = (int)0x0004;
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_FRONT_LEFT_OF_CENTER = (int)0x00000040;
	/** <i>native declaration : libavutil/log.h</i> */
	public static final int AV_LOG_PRINT_LEVEL = (int)2;
	/** <i>native declaration : libavutil/version.h</i> */
	public static final boolean FF_API_XVMC = (boolean)(55 < 56);
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_NEON = (int)(1 << 5);
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_POWER8 = (int)0x0004;
	/** <i>native declaration : libavutil/version.h</i> */
	public static final boolean FF_API_OPT_TYPE_METADATA = (boolean)(55 < 56);
	/** <i>native declaration : libavutil/opt.h</i> */
	public static final int AV_OPT_FLAG_FILTERING_PARAM = (int)(1 << 16);
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_TOP_BACK_LEFT = (int)0x00008000;
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_HTTP_OTHER_4XX = (int)(-(0xF8) | (('4') << 8) | (('X') << 16) | ('X' << 24));
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_TOP_FRONT_RIGHT = (int)0x00004000;
	/** <i>native declaration : libavutil/avutil.h</i> */
	public static final long AV_NOPTS_VALUE = (long)(0x8000000000000000L);
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_PATCHWELCOME = (int)(-('P') | (('A') << 8) | (('W') << 16) | ('E' << 24));
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_STEREO_DOWNMIX = (int)(0x20000000 | 0x40000000);
	/** <i>native declaration : libavutil/pixdesc.h</i> */
	public static final int AV_PIX_FMT_FLAG_BITSTREAM = (int)(1 << 2);
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_FRONT_LEFT = (int)0x00000001;
	/** <i>native declaration : libavutil/bprint.h</i> */
	public static final int AV_BPRINT_SIZE_AUTOMATIC = (int)1;
	/** <i>native declaration : libavutil/opt.h</i> */
	public static final int AV_OPT_ALLOW_NULL = (int)(1 << 2);
	/** <i>native declaration : libavutil/pixfmt.h</i> */
	public static final int AVPALETTE_SIZE = (int)1024;
	/** <i>native declaration : libavutil/pixdesc.h</i> */
	public static final int FF_LOSS_DEPTH = (int)0x0002;
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final long AV_CH_WIDE_LEFT = (long)0x0000000080000000L;
	/** <i>native declaration : libavutil/bprint.h</i> */
	public static final int AV_BPRINT_SIZE_COUNT_ONLY = (int)0;
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_5POINT0_BACK = (int)(((0x00000001 | 0x00000002) | 0x00000004) | 0x00000010 | 0x00000020);
	/** <i>native declaration : libavutil/dict.h</i> */
	public static final int AV_DICT_MULTIKEY = (int)64;
	/** <i>native declaration : libavutil/avstring.h</i> */
	public static final int AV_ESCAPE_FLAG_WHITESPACE = (int)(1 << 0);
	/** <i>native declaration : libavutil/log.h</i> */
	public static final int AV_LOG_VERBOSE = (int)40;
	/** <i>native declaration : libavutil/avutil.h</i> */
	public static final int AV_FOURCC_MAX_STRING_SIZE = (int)32;
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_SSE = (int)0x0008;
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_BSF_NOT_FOUND = (int)(-(0xF8) | (('B') << 8) | (('S') << 16) | ('F' << 24));
	/** <i>native declaration : libavutil/version.h</i> */
	public static final int LIBAVUTIL_BUILD = (int)((55) << 16 | (78) << 8 | (100));
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_QUAD = (int)((0x00000001 | 0x00000002) | 0x00000010 | 0x00000020);
	/** <i>native declaration : libavutil/buffer.h</i> */
	public static final int AV_BUFFER_FLAG_READONLY = (int)(1 << 0);
	/** <i>native declaration : libavutil/opt.h</i> */
	public static final int AV_OPT_SEARCH_CHILDREN = (int)(1 << 0);
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_STEREO = (int)(0x00000001 | 0x00000002);
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_6POINT0_FRONT = (int)(((0x00000001 | 0x00000002) | 0x00000200 | 0x00000400) | 0x00000040 | 0x00000080);
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_TOP_FRONT_LEFT = (int)0x00001000;
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_6POINT1 = (int)(((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000200 | 0x00000400) | 0x00000008) | 0x00000100);
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_6POINT0 = (int)((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000200 | 0x00000400) | 0x00000100);
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final long AV_CH_SURROUND_DIRECT_LEFT = (long)0x0000000200000000L;
	/** <i>native declaration : libavutil/log.h</i> */
	public static final int AV_LOG_ERROR = (int)16;
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_ARMV5TE = (int)(1 << 0);
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_VFP_VM = (int)(1 << 7);
	/** <i>native declaration : libavutil/log.h</i> */
	public static final int AV_LOG_TRACE = (int)56;
	/** <i>native declaration : libavutil/avstring.h</i> */
	public static final int AV_UTF8_FLAG_EXCLUDE_XML_INVALID_CONTROL_CODES = (int)8;
	/** <i>native declaration : libavutil/dict.h</i> */
	public static final int AV_DICT_DONT_OVERWRITE = (int)16;
	/** <i>native declaration : libavutil/version.h</i> */
	public static final boolean FF_API_FRAME_QP = (boolean)(55 < 56);
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_2_1 = (int)((0x00000001 | 0x00000002) | 0x00000100);
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_2_2 = (int)((0x00000001 | 0x00000002) | 0x00000200 | 0x00000400);
	/** <i>native declaration : libavutil/avutil.h</i> */
	public static final int FF_LAMBDA_SHIFT = (int)7;
	/** <i>native declaration : libavutil/dict.h</i> */
	public static final int AV_DICT_DONT_STRDUP_VAL = (int)8;
	/** <i>native declaration : libavutil/log.h</i> */
	public static final int AV_LOG_SKIP_REPEATED = (int)1;
	/** <i>native declaration : libavutil/pixdesc.h</i> */
	public static final int FF_LOSS_CHROMA = (int)0x0020;
	/** <i>native declaration : libavutil/log.h</i> */
	public static final int AV_LOG_MAX_OFFSET = (int)(56 - -8);
	/** <i>native declaration : libavutil/version.h</i> */
	public static final boolean FF_API_DLOG = (boolean)(55 < 56);
	/** <i>native declaration : libavutil/avutil.h</i> */
	public static final int FF_QUALITY_SCALE = (int)(1 << 7);
	/** <i>native declaration : libavutil/pixdesc.h</i> */
	public static final int AV_PIX_FMT_FLAG_BAYER = (int)(1 << 8);
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_3POINT1 = (int)(((0x00000001 | 0x00000002) | 0x00000004) | 0x00000008);
	/** <i>native declaration : libavutil/pixdesc.h</i> */
	public static final int AV_PIX_FMT_FLAG_RGB = (int)(1 << 5);
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_EXTERNAL = (int)(-('E') | (('X') << 8) | (('T') << 16) | (' ' << 24));
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_7POINT1_WIDE_BACK = (int)(((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000010 | 0x00000020) | 0x00000008) | 0x00000040 | 0x00000080);
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_OPTION_NOT_FOUND = (int)(-(0xF8) | (('O') << 8) | (('P') << 16) | ('T' << 24));
	/** <i>native declaration : libavutil/opt.h</i> */
	public static final int AV_OPT_MULTI_COMPONENT_RANGE = (int)(1 << 12);
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_VFPV3 = (int)(1 << 4);
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_SIDE_LEFT = (int)0x00000200;
	/** <i>native declaration : libavutil/opt.h</i> */
	public static final int AV_OPT_SERIALIZE_OPT_FLAGS_EXACT = (int)0x00000002;
	/** <i>native declaration : libavutil/version.h</i> */
	public static final boolean FF_API_PLUS1_MINUS1 = (boolean)(55 < 56);
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_HTTP_FORBIDDEN = (int)(-(0xF8) | (('4') << 8) | (('0') << 16) | ('3' << 24));
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_BUG2 = (int)(-('B') | (('U') << 8) | (('G') << 16) | (' ' << 24));
	/** <i>native declaration : libavutil/pixdesc.h</i> */
	public static final int AV_PIX_FMT_FLAG_PLANAR = (int)(1 << 4);
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_OUTPUT_CHANGED = (int)(0x636e6702);
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_AVX = (int)0x4000;
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final long AV_CH_LAYOUT_NATIVE = (long)0x8000000000000000L;
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_ENCODER_NOT_FOUND = (int)(-(0xF8) | (('E') << 8) | (('N') << 16) | ('C' << 24));
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_STEREO_LEFT = (int)0x20000000;
	/**
	 * define<br>
	 * Conversion Error : 55.78.<br>
	 * SKIPPED:<br>
	 * <i>native declaration : libavutil/version.h:0</i><br>
	 * 55.78.
	 */
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_7POINT1_WIDE = (int)(((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000200 | 0x00000400) | 0x00000008) | 0x00000040 | 0x00000080);
	/** <i>native declaration : libavutil/avstring.h</i> */
	public static final int AV_UTF8_FLAG_ACCEPT_ALL = (int)(1 | 2 | 4);
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_SETEND = (int)(1 << 16);
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_STEREO_RIGHT = (int)0x40000000;
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_VSX = (int)0x0002;
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_SSE3SLOW = (int)0x20000000;
	/** <i>native declaration : libavutil/avutil.h</i> */
	public static final int FF_LAMBDA_SCALE = (int)(1 << 7);
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_ALTIVEC = (int)0x0001;
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_TOP_CENTER = (int)0x00000800;
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_6POINT1_FRONT = (int)((((0x00000001 | 0x00000002) | 0x00000200 | 0x00000400) | 0x00000040 | 0x00000080) | 0x00000008);
	/** <i>native declaration : libavutil/opt.h</i> */
	public static final int AV_OPT_FLAG_SUBTITLE_PARAM = (int)32;
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_FORCE = (int)0x80000000;
	/** <i>native declaration : ./libavutil/avconfig.h</i> */
	public static final int AV_HAVE_FAST_UNALIGNED = (int)1;
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_BUFFER_TOO_SMALL = (int)(-('B') | (('U') << 8) | (('F') << 16) | ('S' << 24));
	/** <i>native declaration : libavutil/pixfmt.h</i> */
	public static final int AVPALETTE_COUNT = (int)256;
	/** <i>native declaration : libavutil/version.h</i> */
	public static final int LIBAVUTIL_VERSION_MAJOR = (int)55;
	/** <i>native declaration : libavutil/ffversion.h</i> */
	public static final String FFMPEG_VERSION = (String)"3.4.2";
	/** <i>native declaration : libavutil/version.h</i> */
	public static final boolean FF_API_CRYPTO_SIZE_T = (boolean)(55 < 56);
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_EOF = (int)(-('E') | (('O') << 8) | (('F') << 16) | (' ' << 24));
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_TOP_BACK_RIGHT = (int)0x00020000;
	/** <i>native declaration : libavutil/pixdesc.h</i> */
	public static final int FF_LOSS_COLORQUANT = (int)0x0010;
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_SSE42 = (int)0x0200;
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_BACK_CENTER = (int)0x00000100;
	/** <i>native declaration : libavutil/dict.h</i> */
	public static final int AV_DICT_MATCH_CASE = (int)1;
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_HTTP_SERVER_ERROR = (int)(-(0xF8) | (('5') << 8) | (('X') << 16) | ('X' << 24));
	/** <i>native declaration : libavutil/pixdesc.h</i> */
	public static final int FF_LOSS_ALPHA = (int)0x0008;
	/** <i>native declaration : libavutil/opt.h</i> */
	public static final int AV_OPT_FLAG_EXPORT = (int)64;
	/** <i>native declaration : libavutil/version.h</i> */
	public static final boolean FF_API_ERROR_FRAME = (boolean)(55 < 56);
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_AVX2 = (int)0x8000;
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_FMA4 = (int)0x0800;
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_UNKNOWN = (int)(-('U') | (('N') << 8) | (('K') << 16) | ('N' << 24));
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_FMA3 = (int)0x10000;
	/** <i>native declaration : libavutil/dict.h</i> */
	public static final int AV_DICT_IGNORE_SUFFIX = (int)2;
	/** <i>native declaration : libavutil/frame.h</i> */
	public static final int FF_DECODE_ERROR_MISSING_REFERENCE = (int)2;
	/** <i>native declaration : libavutil/opt.h</i> */
	public static final int AV_OPT_FLAG_READONLY = (int)128;
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_LAYOUT_OCTAGONAL = (int)((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000200 | 0x00000400) | 0x00000010 | 0x00000100 | 0x00000020);
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_VFP = (int)(1 << 3);
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_MMX = (int)0x0001;
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_BMI2 = (int)0x40000;
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_BMI1 = (int)0x20000;
	/** <i>native declaration : libavutil/frame.h</i> */
	public static final int AV_FRAME_FLAG_DISCARD = (int)(1 << 2);
	/** <i>native declaration : libavutil/error.h</i> */
	public static final int AVERROR_HTTP_BAD_REQUEST = (int)(-(0xF8) | (('4') << 8) | (('0') << 16) | ('0' << 24));
	/** <i>native declaration : libavutil/version.h</i> */
	public static final int LIBAVUTIL_VERSION_MINOR = (int)78;
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_SSE2 = (int)0x0010;
	/** <i>native declaration : ./libavutil/channel_layout.h</i> */
	public static final int AV_CH_FRONT_RIGHT_OF_CENTER = (int)0x00000080;
	/** <i>native declaration : libavutil/version.h</i> */
	public static final int LIBAVUTIL_VERSION_INT = (int)((55) << 16 | (78) << 8 | (100));
	/** <i>native declaration : libavutil/version.h</i> */
	public static final boolean FF_API_CRC_BIG_TABLE = (boolean)(55 < 56);
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_MMXEXT = (int)0x0002;
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_SSE3 = (int)0x0040;
	/** <i>native declaration : ./libavutil/cpu.h</i> */
	public static final int AV_CPU_FLAG_SSE4 = (int)0x0100;
	/** <i>native declaration : libavutil/log.h:194</i> */
	public static abstract class av_log_set_callback_callback_callback extends Callback<av_log_set_callback_callback_callback > {
		public void apply(Pointer<? > voidPtr1, int int1, Pointer<Byte > charPtr1, Object... va_list1) {
			apply(Pointer.getPeer(voidPtr1), int1, Pointer.getPeer(charPtr1), va_list1);
		}
		public void apply(@Ptr long voidPtr1, int int1, @Ptr long charPtr1, Object... va_list1) {
			apply(Pointer.pointerToAddress(voidPtr1), int1, Pointer.pointerToAddress(charPtr1, Byte.class), va_list1);
		}
	};
	/** <i>native declaration : libavutil/buffer.h:160</i> */
	public static abstract class av_buffer_create_free_callback extends Callback<av_buffer_create_free_callback > {
		public void apply(Pointer<? > opaque, Pointer<Byte > data) {
			apply(Pointer.getPeer(opaque), Pointer.getPeer(data));
		}
		public void apply(@Ptr long opaque, @Ptr long data) {
			apply(Pointer.pointerToAddress(opaque), Pointer.pointerToAddress(data, Byte.class));
		}
	};
	/** <i>native declaration : libavutil/buffer.h:161</i> */
	public static abstract class av_buffer_pool_init_alloc_callback extends Callback<av_buffer_pool_init_alloc_callback > {
		public Pointer<AVBufferRef > _apply(int size) {
			return Pointer.pointerToAddress(apply(size), AVBufferRef.class);
		}
		@Ptr 
		public long apply(int size) {
			return Pointer.getPeer(_apply(size));
		}
	};
	/** <i>native declaration : libavutil/buffer.h:162</i> */
	public static abstract class av_buffer_pool_init2_alloc_callback extends Callback<av_buffer_pool_init2_alloc_callback > {
		public Pointer<AVBufferRef > apply(Pointer<? > opaque, int size) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(opaque), size), AVBufferRef.class);
		}
		@Ptr 
		public long apply(@Ptr long opaque, int size) {
			return Pointer.getPeer(apply(Pointer.pointerToAddress(opaque), size));
		}
	};
	/** <i>native declaration : libavutil/buffer.h:163</i> */
	public static abstract class av_buffer_pool_init2_pool_free_callback extends Callback<av_buffer_pool_init2_pool_free_callback > {
		public void apply(Pointer<? > opaque) {
			apply(Pointer.getPeer(opaque));
		}
		public void apply(@Ptr long opaque) {
			apply(Pointer.pointerToAddress(opaque));
		}
	};
	/**
	 * Return the LIBAVUTIL_VERSION_INT constant.<br>
	 * Original signature : <code>int avutil_version()</code><br>
	 * <i>native declaration : libavutil/avutil.h:4</i>
	 */
	public static native int avutil_version();
	/**
	 * Return an informative version string. This usually is the actual release<br>
	 * version number or a git commit description. This string has no fixed format<br>
	 * and can change any time. It should never be parsed by code.<br>
	 * Original signature : <code>char* av_version_info()</code><br>
	 * <i>native declaration : libavutil/avutil.h:11</i>
	 */
	public static Pointer<Byte > av__version_info() {
		return Pointer.pointerToAddress(av_version_info(), Byte.class);
	}
	@Ptr 
	protected native static long av_version_info();
	/**
	 * Return the libavutil build-time configuration.<br>
	 * Original signature : <code>char* avutil_configuration()</code><br>
	 * <i>native declaration : libavutil/avutil.h:16</i>
	 */
	public static Pointer<Byte > avutil__configuration() {
		return Pointer.pointerToAddress(avutil_configuration(), Byte.class);
	}
	@Ptr 
	protected native static long avutil_configuration();
	/**
	 * Return the libavutil license.<br>
	 * Original signature : <code>char* avutil_license()</code><br>
	 * <i>native declaration : libavutil/avutil.h:21</i>
	 */
	public static Pointer<Byte > avutil__license() {
		return Pointer.pointerToAddress(avutil_license(), Byte.class);
	}
	@Ptr 
	protected native static long avutil_license();
	/**
	 * Return a string describing the media_type enum, NULL if media_type<br>
	 * is unknown.<br>
	 * Original signature : <code>char* av_get_media_type_string(AVMediaType)</code><br>
	 * <i>native declaration : libavutil/avutil.h:39</i>
	 */
	public static Pointer<Byte > av_get_media_type_string(IntValuedEnum<AvutilLibrary.AVMediaType > media_type) {
		return Pointer.pointerToAddress(av_get_media_type_string((int)media_type.value()), Byte.class);
	}
	@Ptr 
	protected native static long av_get_media_type_string(int media_type);
	/**
	 * Return a single letter to describe the given picture type<br>
	 * pict_type.<br>
	 * * @param[in] pict_type the picture type @return a single character<br>
	 * representing the picture type, '?' if pict_type is unknown<br>
	 * Original signature : <code>char av_get_picture_type_char(AVPictureType)</code><br>
	 * <i>native declaration : libavutil/avutil.h:65</i>
	 */
	public static byte av_get_picture_type_char(IntValuedEnum<AvutilLibrary.AVPictureType > pict_type) {
		return av_get_picture_type_char((int)pict_type.value());
	}
	protected native static byte av_get_picture_type_char(int pict_type);
	/**
	 * Original signature : <code>int av_log2(unsigned)</code><br>
	 * <i>native declaration : libavutil/common.h:1</i>
	 */
	public static native int av_log2(int v);
	/**
	 * Original signature : <code>int av_log2_16bit(unsigned)</code><br>
	 * <i>native declaration : libavutil/common.h:3</i>
	 */
	public static native int av_log2_16bit(int v);
	/**
	 * Put a description of the AVERROR code errnum in errbuf.<br>
	 * In case of failure the global variable errno is set to indicate the<br>
	 * error. Even in case of failure av_strerror() will print a generic<br>
	 * error message indicating the errnum provided to errbuf.<br>
	 * * @param errnum      error code to describe<br>
	 * @param errbuf      buffer to which description is written<br>
	 * @param errbuf_size the size in bytes of errbuf<br>
	 * @return 0 on success, a negative value if a description for errnum<br>
	 * cannot be found<br>
	 * Original signature : <code>int av_strerror(int, char*, size_t)</code><br>
	 * <i>native declaration : libavutil/error.h:12</i>
	 */
	public static int av_strerror(int errnum, Pointer<Byte > errbuf, @Ptr long errbuf_size) {
		return av_strerror(errnum, Pointer.getPeer(errbuf), errbuf_size);
	}
	protected native static int av_strerror(int errnum, @Ptr long errbuf, @Ptr long errbuf_size);
	/**
	 * Allocate a memory block with alignment suitable for all memory accesses<br>
	 * (including vectors if available on the CPU).<br>
	 * * @param size Size in bytes for the memory block to be allocated<br>
	 * @return Pointer to the allocated block, or `NULL` if the block cannot<br>
	 *         be allocated<br>
	 * @see av_mallocz()<br>
	 * Original signature : <code>void* av_malloc(size_t)</code><br>
	 * <i>native declaration : libavutil/mem.h:9</i>
	 */
	public static Pointer<? > malloc(@Ptr long size) {
		return Pointer.pointerToAddress(av_malloc(size));
	}
	@Ptr 
	protected native static long av_malloc(@Ptr long size);
	/**
	 * Allocate a memory block with alignment suitable for all memory accesses<br>
	 * (including vectors if available on the CPU) and zero all the bytes of the<br>
	 * block.<br>
	 * * @param size Size in bytes for the memory block to be allocated<br>
	 * @return Pointer to the allocated block, or `NULL` if it cannot be allocated<br>
	 * @see av_malloc()<br>
	 * Original signature : <code>void* av_mallocz(size_t)</code><br>
	 * <i>native declaration : libavutil/mem.h:19</i>
	 */
	public static Pointer<? > av__mallocz(@Ptr long size) {
		return Pointer.pointerToAddress(av_mallocz(size));
	}
	@Ptr 
	protected native static long av_mallocz(@Ptr long size);
	/**
	 * Non-inlined equivalent of av_mallocz_array().<br>
	 * * Created for symmetry with the calloc() C function.<br>
	 * Original signature : <code>void* av_calloc(size_t, size_t)</code><br>
	 * <i>native declaration : libavutil/mem.h:56</i>
	 */
	public static Pointer<? > av__calloc(@Ptr long nmemb, @Ptr long size) {
		return Pointer.pointerToAddress(av_calloc(nmemb, size));
	}
	@Ptr 
	protected native static long av_calloc(@Ptr long nmemb, @Ptr long size);
	/**
	 * Allocate, reallocate, or free a block of memory.<br>
	 * * If `ptr` is `NULL` and `size` > 0, allocate a new block. If `size` is<br>
	 * zero, free the memory block pointed to by `ptr`. Otherwise, expand or<br>
	 * shrink that block of memory according to `size`.<br>
	 * * @param ptr  Pointer to a memory block already allocated with<br>
	 *             av_realloc() or `NULL`<br>
	 * @param size Size in bytes of the memory block to be allocated or<br>
	 *             reallocated<br>
	 * * @return Pointer to a newly-reallocated block or `NULL` if the block<br>
	 *         cannot be reallocated or the function is used to free the memory block<br>
	 * * @warning Unlike av_malloc(), the returned pointer is not guaranteed to be<br>
	 *          correctly aligned.<br>
	 * @see av_fast_realloc()<br>
	 * @see av_reallocp()<br>
	 * Original signature : <code>void* av_realloc(void*, size_t)</code><br>
	 * <i>native declaration : libavutil/mem.h:74</i>
	 */
	public static Pointer<? > av_realloc(Pointer<? > ptr, @Ptr long size) {
		return Pointer.pointerToAddress(av_realloc(Pointer.getPeer(ptr), size));
	}
	@Ptr 
	protected native static long av_realloc(@Ptr long ptr, @Ptr long size);
	/**
	 * Original signature : <code>int av_reallocp(void*, size_t)</code><br>
	 * <i>native declaration : libavutil/mem.h:76</i>
	 */
	public static int av_reallocp(Pointer<? > ptr, @Ptr long size) {
		return av_reallocp(Pointer.getPeer(ptr), size);
	}
	protected native static int av_reallocp(@Ptr long ptr, @Ptr long size);
	/**
	 * Allocate, reallocate, or free a block of memory.<br>
	 * * This function does the same thing as av_realloc(), except:<br>
	 * - It takes two size arguments and allocates `nelem * elsize` bytes,<br>
	 *   after checking the result of the multiplication for integer overflow.<br>
	 * - It frees the input block in case of failure, thus avoiding the memory<br>
	 *   leak with the classic<br>
	 *   @code{.c}<br>
	 *   buf = realloc(buf);<br>
	 *   if (!buf)<br>
	 *       return -1;<br>
	 *   @endcode<br>
	 *   pattern.<br>
	 * Original signature : <code>void* av_realloc_f(void*, size_t, size_t)</code><br>
	 * <i>native declaration : libavutil/mem.h:92</i>
	 */
	public static Pointer<? > av_realloc_f(Pointer<? > ptr, @Ptr long nelem, @Ptr long elsize) {
		return Pointer.pointerToAddress(av_realloc_f(Pointer.getPeer(ptr), nelem, elsize));
	}
	@Ptr 
	protected native static long av_realloc_f(@Ptr long ptr, @Ptr long nelem, @Ptr long elsize);
	/**
	 * Allocate, reallocate, or free an array.<br>
	 * * If `ptr` is `NULL` and `nmemb` > 0, allocate a new block. If<br>
	 * `nmemb` is zero, free the memory block pointed to by `ptr`.<br>
	 * * @param ptr   Pointer to a memory block already allocated with<br>
	 *              av_realloc() or `NULL`<br>
	 * @param nmemb Number of elements in the array<br>
	 * @param size  Size of the single element of the array<br>
	 * * @return Pointer to a newly-reallocated block or NULL if the block<br>
	 *         cannot be reallocated or the function is used to free the memory block<br>
	 * * @warning Unlike av_malloc(), the allocated memory is not guaranteed to be<br>
	 *          correctly aligned.<br>
	 * @see av_reallocp_array()<br>
	 * Original signature : <code>void* av_realloc_array(void*, size_t, size_t)</code><br>
	 * <i>native declaration : libavutil/mem.h:108</i>
	 */
	public static Pointer<? > av_realloc_array(Pointer<? > ptr, @Ptr long nmemb, @Ptr long size) {
		return Pointer.pointerToAddress(av_realloc_array(Pointer.getPeer(ptr), nmemb, size));
	}
	@Ptr 
	protected native static long av_realloc_array(@Ptr long ptr, @Ptr long nmemb, @Ptr long size);
	/**
	 * Allocate, reallocate, or free an array through a pointer to a pointer.<br>
	 * * If `*ptr` is `NULL` and `nmemb` > 0, allocate a new block. If `nmemb` is<br>
	 * zero, free the memory block pointed to by `*ptr`.<br>
	 * * @param[in,out] ptr   Pointer to a pointer to a memory block already<br>
	 *                      allocated with av_realloc(), or a pointer to `NULL`.<br>
	 *                      The pointer is updated on success, or freed on failure.<br>
	 * @param[in]     nmemb Number of elements<br>
	 * @param[in]     size  Size of the single element<br>
	 * * @return Zero on success, an AVERROR error code on failure<br>
	 * * @warning Unlike av_malloc(), the allocated memory is not guaranteed to be<br>
	 *          correctly aligned.<br>
	 * Original signature : <code>int av_reallocp_array(void*, size_t, size_t)</code><br>
	 * <i>native declaration : libavutil/mem.h:123</i>
	 */
	public static int av_reallocp_array(Pointer<? > ptr, @Ptr long nmemb, @Ptr long size) {
		return av_reallocp_array(Pointer.getPeer(ptr), nmemb, size);
	}
	protected native static int av_reallocp_array(@Ptr long ptr, @Ptr long nmemb, @Ptr long size);
	/**
	 * Reallocate the given buffer if it is not large enough, otherwise do nothing.<br>
	 * * If the given buffer is `NULL`, then a new uninitialized buffer is allocated.<br>
	 * * If the given buffer is not large enough, and reallocation fails, `NULL` is<br>
	 * returned and `*size` is set to 0, but the original buffer is not changed or<br>
	 * freed.<br>
	 * * A typical use pattern follows:<br>
	 * * @code{.c}<br>
	 * uint8_t *buf = ...;<br>
	 * uint8_t *new_buf = av_fast_realloc(buf, &current_size, size_needed);<br>
	 * if (!new_buf) {<br>
	 *     // Allocation failed; clean up original buffer<br>
	 *     av_freep(&buf);<br>
	 *     return AVERROR(ENOMEM);<br>
	 * }<br>
	 * @endcode<br>
	 * * @param[in,out] ptr      Already allocated buffer, or `NULL`<br>
	 * @param[in,out] size     Pointer to current size of buffer `ptr`. `*size` is<br>
	 *                         changed to `min_size` in case of success or 0 in<br>
	 *                         case of failure<br>
	 * @param[in]     min_size New size of buffer `ptr`<br>
	 * @return `ptr` if the buffer is large enough, a pointer to newly reallocated<br>
	 *         buffer if the buffer was not large enough, or `NULL` in case of<br>
	 *         error<br>
	 * @see av_realloc()<br>
	 * @see av_fast_malloc()<br>
	 * Original signature : <code>void* av_fast_realloc(void*, unsigned int*, size_t)</code><br>
	 * <i>native declaration : libavutil/mem.h:152</i>
	 */
	public static Pointer<? > av_fast_realloc(Pointer<? > ptr, Pointer<Integer > size, @Ptr long min_size) {
		return Pointer.pointerToAddress(av_fast_realloc(Pointer.getPeer(ptr), Pointer.getPeer(size), min_size));
	}
	@Ptr 
	protected native static long av_fast_realloc(@Ptr long ptr, @Ptr long size, @Ptr long min_size);
	/**
	 * Allocate a buffer, reusing the given one if large enough.<br>
	 * * Contrary to av_fast_realloc(), the current buffer contents might not be<br>
	 * preserved and on error the old buffer is freed, thus no special handling to<br>
	 * avoid memleaks is necessary.<br>
	 * * `*ptr` is allowed to be `NULL`, in which case allocation always happens if<br>
	 * `size_needed` is greater than 0.<br>
	 * * @code{.c}<br>
	 * uint8_t *buf = ...;<br>
	 * av_fast_malloc(&buf, &current_size, size_needed);<br>
	 * if (!buf) {<br>
	 *     // Allocation failed; buf already freed<br>
	 *     return AVERROR(ENOMEM);<br>
	 * }<br>
	 * @endcode<br>
	 * * @param[in,out] ptr      Pointer to pointer to an already allocated buffer.<br>
	 *                         `*ptr` will be overwritten with pointer to new<br>
	 *                         buffer on success or `NULL` on failure<br>
	 * @param[in,out] size     Pointer to current size of buffer `*ptr`. `*size` is<br>
	 *                         changed to `min_size` in case of success or 0 in<br>
	 *                         case of failure<br>
	 * @param[in]     min_size New size of buffer `*ptr`<br>
	 * @see av_realloc()<br>
	 * @see av_fast_mallocz()<br>
	 * Original signature : <code>void av_fast_malloc(void*, unsigned int*, size_t)</code><br>
	 * <i>native declaration : libavutil/mem.h:179</i>
	 */
	public static void av_fast_malloc(Pointer<? > ptr, Pointer<Integer > size, @Ptr long min_size) {
		av_fast_malloc(Pointer.getPeer(ptr), Pointer.getPeer(size), min_size);
	}
	protected native static void av_fast_malloc(@Ptr long ptr, @Ptr long size, @Ptr long min_size);
	/**
	 * Allocate and clear a buffer, reusing the given one if large enough.<br>
	 * * Like av_fast_malloc(), but all newly allocated space is initially cleared.<br>
	 * Reused buffer is not cleared.<br>
	 * * `*ptr` is allowed to be `NULL`, in which case allocation always happens if<br>
	 * `size_needed` is greater than 0.<br>
	 * * @param[in,out] ptr      Pointer to pointer to an already allocated buffer.<br>
	 *                         `*ptr` will be overwritten with pointer to new<br>
	 *                         buffer on success or `NULL` on failure<br>
	 * @param[in,out] size     Pointer to current size of buffer `*ptr`. `*size` is<br>
	 *                         changed to `min_size` in case of success or 0 in<br>
	 *                         case of failure<br>
	 * @param[in]     min_size New size of buffer `*ptr`<br>
	 * @see av_fast_malloc()<br>
	 * Original signature : <code>void av_fast_mallocz(void*, unsigned int*, size_t)</code><br>
	 * <i>native declaration : libavutil/mem.h:196</i>
	 */
	public static void av_fast_mallocz(Pointer<? > ptr, Pointer<Integer > size, @Ptr long min_size) {
		av_fast_mallocz(Pointer.getPeer(ptr), Pointer.getPeer(size), min_size);
	}
	protected native static void av_fast_mallocz(@Ptr long ptr, @Ptr long size, @Ptr long min_size);
	/**
	 * Free a memory block which has been allocated with a function of av_malloc()<br>
	 * or av_realloc() family.<br>
	 * * @param ptr Pointer to the memory block which should be freed.<br>
	 * * @note `ptr = NULL` is explicitly allowed.<br>
	 * @note It is recommended that you use av_freep() instead, to prevent leaving<br>
	 *       behind dangling pointers.<br>
	 * @see av_freep()<br>
	 * Original signature : <code>void av_free(void*)</code><br>
	 * <i>native declaration : libavutil/mem.h:207</i>
	 */
	public static void av_free(Pointer<? > ptr) {
		av_free(Pointer.getPeer(ptr));
	}
	protected native static void av_free(@Ptr long ptr);
	/**
	 * Free a memory block which has been allocated with a function of av_malloc()<br>
	 * or av_realloc() family, and set the pointer pointing to it to `NULL`.<br>
	 * * @code{.c}<br>
	 * uint8_t *buf = av_malloc(16);<br>
	 * av_free(buf);<br>
	 * // buf now contains a dangling pointer to freed memory, and accidental<br>
	 * // dereference of buf will result in a use-after-free, which may be a<br>
	 * // security risk.<br>
	 * * uint8_t *buf = av_malloc(16);<br>
	 * av_freep(&buf);<br>
	 * // buf is now NULL, and accidental dereference will only result in a<br>
	 * // NULL-pointer dereference.<br>
	 * @endcode<br>
	 * * @param ptr Pointer to the pointer to the memory block which should be freed<br>
	 * @note `*ptr = NULL` is safe and leads to no action.<br>
	 * @see av_free()<br>
	 * Original signature : <code>void av_freep(void*)</code><br>
	 * <i>native declaration : libavutil/mem.h:227</i>
	 */
	public static void av_freep(Pointer<? > ptr) {
		av_freep(Pointer.getPeer(ptr));
	}
	protected native static void av_freep(@Ptr long ptr);
	/**
	 * Duplicate a string.<br>
	 * * @param s String to be duplicated<br>
	 * @return Pointer to a newly-allocated string containing a<br>
	 *         copy of `s` or `NULL` if the string cannot be allocated<br>
	 * @see av_strndup()<br>
	 * Original signature : <code>char* av_strdup(const char*)</code><br>
	 * <i>native declaration : libavutil/mem.h:236</i>
	 */
	public static Pointer<Byte > av_strdup(Pointer<Byte > s) {
		return Pointer.pointerToAddress(av_strdup(Pointer.getPeer(s)), Byte.class);
	}
	@Ptr 
	protected native static long av_strdup(@Ptr long s);
	/**
	 * Duplicate a substring of a string.<br>
	 * * @param s   String to be duplicated<br>
	 * @param len Maximum length of the resulting string (not counting the<br>
	 *            terminating byte)<br>
	 * @return Pointer to a newly-allocated string containing a<br>
	 *         substring of `s` or `NULL` if the string cannot be allocated<br>
	 * Original signature : <code>char* av_strndup(const char*, size_t)</code><br>
	 * <i>native declaration : libavutil/mem.h:246</i>
	 */
	public static Pointer<Byte > av_strndup(Pointer<Byte > s, @Ptr long len) {
		return Pointer.pointerToAddress(av_strndup(Pointer.getPeer(s), len), Byte.class);
	}
	@Ptr 
	protected native static long av_strndup(@Ptr long s, @Ptr long len);
	/**
	 * Duplicate a buffer with av_malloc().<br>
	 * * @param p    Buffer to be duplicated<br>
	 * @param size Size in bytes of the buffer copied<br>
	 * @return Pointer to a newly allocated buffer containing a<br>
	 *         copy of `p` or `NULL` if the buffer cannot be allocated<br>
	 * Original signature : <code>void* av_memdup(const void*, size_t)</code><br>
	 * <i>native declaration : libavutil/mem.h:255</i>
	 */
	public static Pointer<? > av_memdup(Pointer<? > p, @Ptr long size) {
		return Pointer.pointerToAddress(av_memdup(Pointer.getPeer(p), size));
	}
	@Ptr 
	protected native static long av_memdup(@Ptr long p, @Ptr long size);
	/**
	 * Overlapping memcpy() implementation.<br>
	 * * @param dst  Destination buffer<br>
	 * @param back Number of bytes back to start copying (i.e. the initial size of<br>
	 *             the overlapping window); must be > 0<br>
	 * @param cnt  Number of bytes to copy; must be >= 0<br>
	 * * @note `cnt > back` is valid, this will copy the bytes we just copied,<br>
	 *       thus creating a repeating pattern with a period length of `back`.<br>
	 * Original signature : <code>void av_memcpy_backptr(uint8_t*, int, int)</code><br>
	 * <i>native declaration : libavutil/mem.h:266</i>
	 */
	public static void av_memcpy_backptr(Pointer<Byte > dst, int back, int cnt) {
		av_memcpy_backptr(Pointer.getPeer(dst), back, cnt);
	}
	protected native static void av_memcpy_backptr(@Ptr long dst, int back, int cnt);
	/**
	 * Add the pointer to an element to a dynamic array.<br>
	 * * The array to grow is supposed to be an array of pointers to<br>
	 * structures, and the element to add must be a pointer to an already<br>
	 * allocated structure.<br>
	 * * The array is reallocated when its size reaches powers of 2.<br>
	 * Therefore, the amortized cost of adding an element is constant.<br>
	 * * In case of success, the pointer to the array is updated in order to<br>
	 * point to the new grown array, and the number pointed to by `nb_ptr`<br>
	 * is incremented.<br>
	 * In case of failure, the array is freed, `*tab_ptr` is set to `NULL` and<br>
	 * `*nb_ptr` is set to 0.<br>
	 * * @param[in,out] tab_ptr Pointer to the array to grow<br>
	 * @param[in,out] nb_ptr  Pointer to the number of elements in the array<br>
	 * @param[in]     elem    Element to add<br>
	 * @see av_dynarray_add_nofree(), av_dynarray2_add()<br>
	 * Original signature : <code>void av_dynarray_add(void*, int*, void*)</code><br>
	 * <i>native declaration : libavutil/mem.h:285</i>
	 */
	public static void av_dynarray_add(Pointer<? > tab_ptr, Pointer<Integer > nb_ptr, Pointer<? > elem) {
		av_dynarray_add(Pointer.getPeer(tab_ptr), Pointer.getPeer(nb_ptr), Pointer.getPeer(elem));
	}
	protected native static void av_dynarray_add(@Ptr long tab_ptr, @Ptr long nb_ptr, @Ptr long elem);
	/**
	 * Original signature : <code>int av_dynarray_add_nofree(void*, int*, void*)</code><br>
	 * <i>native declaration : libavutil/mem.h:287</i>
	 */
	public static int av_dynarray_add_nofree(Pointer<? > tab_ptr, Pointer<Integer > nb_ptr, Pointer<? > elem) {
		return av_dynarray_add_nofree(Pointer.getPeer(tab_ptr), Pointer.getPeer(nb_ptr), Pointer.getPeer(elem));
	}
	protected native static int av_dynarray_add_nofree(@Ptr long tab_ptr, @Ptr long nb_ptr, @Ptr long elem);
	/**
	 * Add an element of size `elem_size` to a dynamic array.<br>
	 * * The array is reallocated when its number of elements reaches powers of 2.<br>
	 * Therefore, the amortized cost of adding an element is constant.<br>
	 * * In case of success, the pointer to the array is updated in order to<br>
	 * point to the new grown array, and the number pointed to by `nb_ptr`<br>
	 * is incremented.<br>
	 * In case of failure, the array is freed, `*tab_ptr` is set to `NULL` and<br>
	 * `*nb_ptr` is set to 0.<br>
	 * * @param[in,out] tab_ptr   Pointer to the array to grow<br>
	 * @param[in,out] nb_ptr    Pointer to the number of elements in the array<br>
	 * @param[in]     elem_size Size in bytes of an element in the array<br>
	 * @param[in]     elem_data Pointer to the data of the element to add. If<br>
	 *                          `NULL`, the space of the newly added element is<br>
	 *                          allocated but left uninitialized.<br>
	 * * @return Pointer to the data of the element to copy in the newly allocated<br>
	 *         space<br>
	 * @see av_dynarray_add(), av_dynarray_add_nofree()<br>
	 * Original signature : <code>void* av_dynarray2_add(void**, int*, size_t, const uint8_t*)</code><br>
	 * <i>native declaration : libavutil/mem.h:308</i>
	 */
	public static Pointer<? > av_dynarray2_add(Pointer<Pointer<? > > tab_ptr, Pointer<Integer > nb_ptr, @Ptr long elem_size, Pointer<Byte > elem_data) {
		return Pointer.pointerToAddress(av_dynarray2_add(Pointer.getPeer(tab_ptr), Pointer.getPeer(nb_ptr), elem_size, Pointer.getPeer(elem_data)));
	}
	@Ptr 
	protected native static long av_dynarray2_add(@Ptr long tab_ptr, @Ptr long nb_ptr, @Ptr long elem_size, @Ptr long elem_data);
	/**
	 * Set the maximum size that may be allocated in one block.<br>
	 * * The value specified with this function is effective for all libavutil's @ref<br>
	 * lavu_mem_funcs "heap management functions."<br>
	 * * By default, the max value is defined as `INT_MAX`.<br>
	 * * @param max Value to be set as the new maximum size<br>
	 * * @warning Exercise extreme caution when using this function. Don't touch<br>
	 *          this if you do not understand the full consequence of doing so.<br>
	 * Original signature : <code>void av_max_alloc(size_t)</code><br>
	 * <i>native declaration : libavutil/mem.h:333</i>
	 */
	public static native void av_max_alloc(@Ptr long max);
	/**
	 * Reduce a fraction.<br>
	 * * This is useful for framerate calculations.<br>
	 * * @param[out] dst_num Destination numerator<br>
	 * @param[out] dst_den Destination denominator<br>
	 * @param[in]      num Source numerator<br>
	 * @param[in]      den Source denominator<br>
	 * @param[in]      max Maximum allowed values for `dst_num` & `dst_den`<br>
	 * @return 1 if the operation is exact, 0 otherwise<br>
	 * Original signature : <code>int av_reduce(int*, int*, int64_t, int64_t, int64_t)</code><br>
	 * <i>native declaration : libavutil/rational.h:63</i>
	 */
	public static int av_reduce(Pointer<Integer > dst_num, Pointer<Integer > dst_den, long num, long den, long max) {
		return av_reduce(Pointer.getPeer(dst_num), Pointer.getPeer(dst_den), num, den, max);
	}
	protected native static int av_reduce(@Ptr long dst_num, @Ptr long dst_den, long num, long den, long max);
	/**
	 * Multiply two rationals.<br>
	 * @param b First rational<br>
	 * @param c Second rational<br>
	 * @return b*c<br>
	 * Original signature : <code>AVRational av_mul_q(AVRational, AVRational)</code><br>
	 * <i>native declaration : libavutil/rational.h:71</i>
	 */
	public static native AVRational av_mul_q(AVRational b, AVRational c);
	/**
	 * Divide one rational by another.<br>
	 * @param b First rational<br>
	 * @param c Second rational<br>
	 * @return b/c<br>
	 * Original signature : <code>AVRational av_div_q(AVRational, AVRational)</code><br>
	 * <i>native declaration : libavutil/rational.h:79</i>
	 */
	public static native AVRational av_div_q(AVRational b, AVRational c);
	/**
	 * Add two rationals.<br>
	 * @param b First rational<br>
	 * @param c Second rational<br>
	 * @return b+c<br>
	 * Original signature : <code>AVRational av_add_q(AVRational, AVRational)</code><br>
	 * <i>native declaration : libavutil/rational.h:87</i>
	 */
	public static native AVRational av_add_q(AVRational b, AVRational c);
	/**
	 * Subtract one rational from another.<br>
	 * @param b First rational<br>
	 * @param c Second rational<br>
	 * @return b-c<br>
	 * Original signature : <code>AVRational av_sub_q(AVRational, AVRational)</code><br>
	 * <i>native declaration : libavutil/rational.h:95</i>
	 */
	public static native AVRational av_sub_q(AVRational b, AVRational c);
	/**
	 * Convert a double precision floating point number to a rational.<br>
	 * * In case of infinity, the returned value is expressed as `{1, 0}` or<br>
	 * `{-1, 0}` depending on the sign.<br>
	 * * @param d   `double` to convert<br>
	 * @param max Maximum allowed numerator and denominator<br>
	 * @return `d` in AVRational form<br>
	 * @see av_q2d()<br>
	 * Original signature : <code>AVRational av_d2q(double, int)</code><br>
	 * <i>native declaration : libavutil/rational.h:116</i>
	 */
	public static native AVRational av_d2q(double d, int max);
	/**
	 * Find which of the two rationals is closer to another rational.<br>
	 * * @param q     Rational to be compared against<br>
	 * @param q1,q2 Rationals to be tested<br>
	 * @return One of the following values:<br>
	 *         - 1 if `q1` is nearer to `q` than `q2`<br>
	 *         - -1 if `q2` is nearer to `q` than `q1`<br>
	 *         - 0 if they have the same distance<br>
	 * Original signature : <code>int av_nearer_q(AVRational, AVRational, AVRational)</code><br>
	 * <i>native declaration : libavutil/rational.h:127</i>
	 */
	public static native int av_nearer_q(AVRational q, AVRational q1, AVRational q2);
	/**
	 * Find the value in a list of rationals nearest a given reference rational.<br>
	 * * @param q      Reference rational<br>
	 * @param q_list Array of rationals terminated by `{0, 0}`<br>
	 * @return Index of the nearest value found in the array<br>
	 * Original signature : <code>int av_find_nearest_q_idx(AVRational, const AVRational*)</code><br>
	 * <i>native declaration : libavutil/rational.h:135</i>
	 */
	public static int av_find_nearest_q_idx(AVRational q, Pointer<AVRational > q_list) {
		return av_find_nearest_q_idx(q, Pointer.getPeer(q_list));
	}
	protected native static int av_find_nearest_q_idx(AVRational q, @Ptr long q_list);
	/**
	 * Convert an AVRational to a IEEE 32-bit `float` expressed in fixed-point<br>
	 * format.<br>
	 * * @param q Rational to be converted<br>
	 * @return Equivalent floating-point value, expressed as an unsigned 32-bit<br>
	 *         integer.<br>
	 * @note The returned value is platform-indepedant.<br>
	 * Original signature : <code>uint32_t av_q2intfloat(AVRational)</code><br>
	 * <i>native declaration : libavutil/rational.h:145</i>
	 */
	public static native int av_q2intfloat(AVRational q);
	/**
	 * Compute the greatest common divisor of two integer operands.<br>
	 * * @param a,b Operands<br>
	 * @return GCD of a and b up to sign; if a >= 0 and b >= 0, return value is >= 0;<br>
	 * if a == 0 and b == 0, returns 0.<br>
	 * Original signature : <code>int64_t av_gcd(int64_t, int64_t)</code><br>
	 * <i>native declaration : libavutil/mathematics.h:41</i>
	 */
	public static native long av_gcd(long a, long b);
	/**
	 * Rescale a 64-bit integer with rounding to nearest.<br>
	 * * The operation is mathematically equivalent to `a * b / c`, but writing that<br>
	 * directly can overflow.<br>
	 * * This function is equivalent to av_rescale_rnd() with #AV_ROUND_NEAR_INF.<br>
	 * * @see av_rescale_rnd(), av_rescale_q(), av_rescale_q_rnd()<br>
	 * Original signature : <code>int64_t av_rescale(int64_t, int64_t, int64_t)</code><br>
	 * <i>native declaration : libavutil/mathematics.h:50</i>
	 */
	public static native long av_rescale(long a, long b, long c);
	/**
	 * Rescale a 64-bit integer with specified rounding.<br>
	 * * The operation is mathematically equivalent to `a * b / c`, but writing that<br>
	 * directly can overflow, and does not support different rounding methods.<br>
	 * * @see av_rescale(), av_rescale_q(), av_rescale_q_rnd()<br>
	 * Original signature : <code>int64_t av_rescale_rnd(int64_t, int64_t, int64_t, AVRounding)</code><br>
	 * <i>native declaration : libavutil/mathematics.h:58</i>
	 */
	public static long av_rescale_rnd(long a, long b, long c, IntValuedEnum<AvutilLibrary.AVRounding > rnd) {
		return av_rescale_rnd(a, b, c, (int)rnd.value());
	}
	protected native static long av_rescale_rnd(long a, long b, long c, int rnd);
	/**
	 * Rescale a 64-bit integer by 2 rational numbers.<br>
	 * * The operation is mathematically equivalent to `a * bq / cq`.<br>
	 * * This function is equivalent to av_rescale_q_rnd() with #AV_ROUND_NEAR_INF.<br>
	 * * @see av_rescale(), av_rescale_rnd(), av_rescale_q_rnd()<br>
	 * Original signature : <code>int64_t av_rescale_q(int64_t, AVRational, AVRational)</code><br>
	 * <i>native declaration : libavutil/mathematics.h:66</i>
	 */
	public static native long av_rescale_q(long a, AVRational bq, AVRational cq);
	/**
	 * Rescale a 64-bit integer by 2 rational numbers with specified rounding.<br>
	 * * The operation is mathematically equivalent to `a * bq / cq`.<br>
	 * * @see av_rescale(), av_rescale_rnd(), av_rescale_q()<br>
	 * Original signature : <code>int64_t av_rescale_q_rnd(int64_t, AVRational, AVRational, AVRounding)</code><br>
	 * <i>native declaration : libavutil/mathematics.h:73</i>
	 */
	public static long av_rescale_q_rnd(long a, AVRational bq, AVRational cq, IntValuedEnum<AvutilLibrary.AVRounding > rnd) {
		return av_rescale_q_rnd(a, bq, cq, (int)rnd.value());
	}
	protected native static long av_rescale_q_rnd(long a, AVRational bq, AVRational cq, int rnd);
	/**
	 * Compare two timestamps each in its own time base.<br>
	 * * @return One of the following values:<br>
	 *         - -1 if `ts_a` is before `ts_b`<br>
	 *         - 1 if `ts_a` is after `ts_b`<br>
	 *         - 0 if they represent the same position<br>
	 * * @warning<br>
	 * The result of the function is undefined if one of the timestamps is outside<br>
	 * the `int64_t` range when represented in the other's timebase.<br>
	 * Original signature : <code>int av_compare_ts(int64_t, AVRational, int64_t, AVRational)</code><br>
	 * <i>native declaration : libavutil/mathematics.h:85</i>
	 */
	public static native int av_compare_ts(long ts_a, AVRational tb_a, long ts_b, AVRational tb_b);
	/**
	 * Compare the remainders of two integer operands divided by a common divisor.<br>
	 * * In other words, compare the least significant `log2(mod)` bits of integers<br>
	 * `a` and `b`.<br>
	 * * @code{.c}<br>
	 * av_compare_mod(0x11, 0x02, 0x10) < 0 // since 0x11 % 0x10  (0x1) < 0x02 % 0x10  (0x2)<br>
	 * av_compare_mod(0x11, 0x02, 0x20) > 0 // since 0x11 % 0x20 (0x11) > 0x02 % 0x20 (0x02)<br>
	 * @endcode<br>
	 * * @param a,b Operands<br>
	 * @param mod Divisor; must be a power of 2<br>
	 * @return<br>
	 *         - a negative value if `a % mod < b % mod`<br>
	 *         - a positive value if `a % mod > b % mod`<br>
	 *         - zero             if `a % mod == b % mod`<br>
	 * Original signature : <code>int64_t av_compare_mod(uint64_t, uint64_t, uint64_t)</code><br>
	 * <i>native declaration : libavutil/mathematics.h:102</i>
	 */
	public static native long av_compare_mod(long a, long b, long mod);
	/**
	 * Rescale a timestamp while preserving known durations.<br>
	 * * This function is designed to be called per audio packet to scale the input<br>
	 * timestamp to a different time base. Compared to a simple av_rescale_q()<br>
	 * call, this function is robust against possible inconsistent frame durations.<br>
	 * * The `last` parameter is a state variable that must be preserved for all<br>
	 * subsequent calls for the same stream. For the first call, `*last` should be<br>
	 * initialized to #AV_NOPTS_VALUE.<br>
	 * * @param[in]     in_tb    Input time base<br>
	 * @param[in]     in_ts    Input timestamp<br>
	 * @param[in]     fs_tb    Duration time base; typically this is finer-grained<br>
	 *                         (greater) than `in_tb` and `out_tb`<br>
	 * @param[in]     duration Duration till the next call to this function (i.e.<br>
	 *                         duration of the current packet/frame)<br>
	 * @param[in,out] last     Pointer to a timestamp expressed in terms of<br>
	 *                         `fs_tb`, acting as a state variable<br>
	 * @param[in]     out_tb   Output timebase<br>
	 * @return        Timestamp expressed in terms of `out_tb`<br>
	 * * @note In the context of this function, "duration" is in term of samples, not<br>
	 *       seconds.<br>
	 * Original signature : <code>int64_t av_rescale_delta(AVRational, int64_t, AVRational, int, int64_t*, AVRational)</code><br>
	 * <i>native declaration : libavutil/mathematics.h:125</i>
	 */
	public static long av_rescale_delta(AVRational in_tb, long in_ts, AVRational fs_tb, int duration, Pointer<Long > last, AVRational out_tb) {
		return av_rescale_delta(in_tb, in_ts, fs_tb, duration, Pointer.getPeer(last), out_tb);
	}
	protected native static long av_rescale_delta(AVRational in_tb, long in_ts, AVRational fs_tb, int duration, @Ptr long last, AVRational out_tb);
	/**
	 * Add a value to a timestamp.<br>
	 * * This function guarantees that when the same value is repeatly added that<br>
	 * no accumulation of rounding errors occurs.<br>
	 * * @param[in] ts     Input timestamp<br>
	 * @param[in] ts_tb  Input timestamp time base<br>
	 * @param[in] inc    Value to be added<br>
	 * @param[in] inc_tb Time base of `inc`<br>
	 * Original signature : <code>int64_t av_add_stable(AVRational, int64_t, AVRational, int64_t)</code><br>
	 * <i>native declaration : libavutil/mathematics.h:136</i>
	 */
	public static native long av_add_stable(AVRational ts_tb, long ts, AVRational inc_tb, long inc);
	/**
	 * Send the specified message to the log if the level is less than or equal<br>
	 * to the current av_log_level. By default, all logging messages are sent to<br>
	 * stderr. This behavior can be altered by setting a different logging callback<br>
	 * function.<br>
	 * @see av_log_set_callback<br>
	 * * @param avcl A pointer to an arbitrary struct of which the first field is a<br>
	 *        pointer to an AVClass struct or NULL if general log.<br>
	 * @param level The importance level of the message expressed using a @ref<br>
	 *        lavu_log_constants "Logging Constant".<br>
	 * @param fmt The format string (printf-compatible) that specifies how<br>
	 *        subsequent arguments are converted to output.<br>
	 * Original signature : <code>void av_log(void*, int, const char*, null)</code><br>
	 * <i>native declaration : libavutil/log.h:103</i>
	 */
	public static void av_log(Pointer<? > avcl, int level, Pointer<Byte > fmt, Object... varArgs1) {
		av_log(Pointer.getPeer(avcl), level, Pointer.getPeer(fmt), varArgs1);
	}
	protected native static void av_log(@Ptr long avcl, int level, @Ptr long fmt, Object... varArgs1);
	/**
	 * Send the specified message to the log if the level is less than or equal<br>
	 * to the current av_log_level. By default, all logging messages are sent to<br>
	 * stderr. This behavior can be altered by setting a different logging callback<br>
	 * function.<br>
	 * @see av_log_set_callback<br>
	 * * @param avcl A pointer to an arbitrary struct of which the first field is a<br>
	 *        pointer to an AVClass struct.<br>
	 * @param level The importance level of the message expressed using a @ref<br>
	 *        lavu_log_constants "Logging Constant".<br>
	 * @param fmt The format string (printf-compatible) that specifies how<br>
	 *        subsequent arguments are converted to output.<br>
	 * @param vl The arguments referenced by the format string.<br>
	 * Original signature : <code>void av_vlog(void*, int, const char*, va_list)</code><br>
	 * <i>native declaration : libavutil/log.h:119</i>
	 */
	public static void av_vlog(Pointer<? > avcl, int level, Pointer<Byte > fmt, Object... vl) {
		av_vlog(Pointer.getPeer(avcl), level, Pointer.getPeer(fmt), vl);
	}
	protected native static void av_vlog(@Ptr long avcl, int level, @Ptr long fmt, Object... vl);
	/**
	 * Get the current log level<br>
	 * * @see lavu_log_constants<br>
	 * * @return Current log level<br>
	 * Original signature : <code>int av_log_get_level()</code><br>
	 * <i>native declaration : libavutil/log.h:126</i>
	 */
	public static native int av_log_get_level();
	/**
	 * Set the log level<br>
	 * * @see lavu_log_constants<br>
	 * * @param level Logging level<br>
	 * Original signature : <code>void av_log_set_level(int)</code><br>
	 * <i>native declaration : libavutil/log.h:133</i>
	 */
	public static native void av_log_set_level(int level);
	/**
	 * Set the logging callback<br>
	 * * @note The callback must be thread safe, even if the application does not use<br>
	 *       threads itself as some codecs are multithreaded.<br>
	 * * @see av_log_default_callback<br>
	 * * @param callback A logging function with a compatible signature.<br>
	 * Original signature : <code>void av_log_set_callback(av_log_set_callback_callback_callback*)</code><br>
	 * <i>native declaration : libavutil/log.h:142</i>
	 */
	public static void av_log_set_callback(Pointer<AvutilLibrary.av_log_set_callback_callback_callback > callback) {
		av_log_set_callback(Pointer.getPeer(callback));
	}
	protected native static void av_log_set_callback(@Ptr long callback);
	/**
	 * Default logging callback<br>
	 * * It prints the message to stderr, optionally colorizing it.<br>
	 * * @param avcl A pointer to an arbitrary struct of which the first field is a<br>
	 *        pointer to an AVClass struct.<br>
	 * @param level The importance level of the message expressed using a @ref<br>
	 *        lavu_log_constants "Logging Constant".<br>
	 * @param fmt The format string (printf-compatible) that specifies how<br>
	 *        subsequent arguments are converted to output.<br>
	 * @param vl The arguments referenced by the format string.<br>
	 * Original signature : <code>void av_log_default_callback(void*, int, const char*, va_list)</code><br>
	 * <i>native declaration : libavutil/log.h:155</i>
	 */
	public static void av_log_default_callback(Pointer<? > avcl, int level, Pointer<Byte > fmt, Object... vl) {
		av_log_default_callback(Pointer.getPeer(avcl), level, Pointer.getPeer(fmt), vl);
	}
	protected native static void av_log_default_callback(@Ptr long avcl, int level, @Ptr long fmt, Object... vl);
	/**
	 * Return the context name<br>
	 * * @param  ctx The AVClass context<br>
	 * * @return The AVClass class_name<br>
	 * Original signature : <code>char* av_default_item_name(void*)</code><br>
	 * <i>native declaration : libavutil/log.h:162</i>
	 */
	public static Pointer<Byte > av_default_item_name(Pointer<? > ctx) {
		return Pointer.pointerToAddress(av_default_item_name(Pointer.getPeer(ctx)), Byte.class);
	}
	@Ptr 
	protected native static long av_default_item_name(@Ptr long ctx);
	/**
	 * Original signature : <code>AVClassCategory av_default_get_category(void*)</code><br>
	 * <i>native declaration : libavutil/log.h:164</i>
	 */
	public static IntValuedEnum<AvutilLibrary.AVClassCategory > av_default_get_category(Pointer<? > ptr) {
		return FlagSet.fromValue(av_default_get_category(Pointer.getPeer(ptr)), AvutilLibrary.AVClassCategory.class);
	}
	protected native static int av_default_get_category(@Ptr long ptr);
	/**
	 * Format a line of log the same way as the default callback.<br>
	 * @param line          buffer to receive the formatted line<br>
	 * @param line_size     size of the buffer<br>
	 * @param print_prefix  used to store whether the prefix must be printed;<br>
	 *                      must point to a persistent integer initially set to 1<br>
	 * Original signature : <code>void av_log_format_line(void*, int, const char*, va_list, char*, int, int*)</code><br>
	 * <i>native declaration : libavutil/log.h:173</i>
	 */
	public static void av_log_format_line(Pointer<? > ptr, int level, Pointer<Byte > fmt, Pointer<Byte > vl, int line, Pointer<Integer > line_size, Pointer<Integer > print_prefix) {
		av_log_format_line(Pointer.getPeer(ptr), level, Pointer.getPeer(fmt), Pointer.getPeer(vl), line, Pointer.getPeer(line_size), Pointer.getPeer(print_prefix));
	}
	protected native static void av_log_format_line(@Ptr long ptr, int level, @Ptr long fmt, @Ptr long vl, int line, @Ptr long line_size, @Ptr long print_prefix);
	/**
	 * Format a line of log the same way as the default callback.<br>
	 * @param line          buffer to receive the formatted line;<br>
	 *                      may be NULL if line_size is 0<br>
	 * @param line_size     size of the buffer; at most line_size-1 characters will<br>
	 *                      be written to the buffer, plus one null terminator<br>
	 * @param print_prefix  used to store whether the prefix must be printed;<br>
	 *                      must point to a persistent integer initially set to 1<br>
	 * @return Returns a negative value if an error occurred, otherwise returns<br>
	 *         the number of characters that would have been written for a<br>
	 *         sufficiently large buffer, not including the terminating null<br>
	 *         character. If the return value is not less than line_size, it means<br>
	 *         that the log message was truncated to fit the buffer.<br>
	 * Original signature : <code>int av_log_format_line2(void*, int, const char*, va_list, char*, int, int*)</code><br>
	 * <i>native declaration : libavutil/log.h:189</i>
	 */
	public static int av_log_format_line2(Pointer<? > ptr, int level, Pointer<Byte > fmt, Pointer<Byte > vl, int line, Pointer<Integer > line_size, Pointer<Integer > print_prefix) {
		return av_log_format_line2(Pointer.getPeer(ptr), level, Pointer.getPeer(fmt), Pointer.getPeer(vl), line, Pointer.getPeer(line_size), Pointer.getPeer(print_prefix));
	}
	protected native static int av_log_format_line2(@Ptr long ptr, int level, @Ptr long fmt, @Ptr long vl, int line, @Ptr long line_size, @Ptr long print_prefix);
	/**
	 * Original signature : <code>void av_log_set_flags(int)</code><br>
	 * <i>native declaration : libavutil/log.h:191</i>
	 */
	public static native void av_log_set_flags(int arg);
	/**
	 * Original signature : <code>int av_log_get_flags()</code><br>
	 * <i>native declaration : libavutil/log.h:193</i>
	 */
	public static native int av_log_get_flags();
	/**
	 * Compute the length of an integer list.<br>
	 * * @param elsize  size in bytes of each list element (only 1, 2, 4 or 8)<br>
	 * @param term    list terminator (usually 0 or -1)<br>
	 * @param list    pointer to the list<br>
	 * @return  length of the list, in elements, not counting the terminator<br>
	 * Original signature : <code>int av_int_list_length_for_size(unsigned, const void*, uint64_t)</code><br>
	 * <i>native declaration : libavutil/avutil.h:15</i>
	 */
	public static int av_int_list_length_for_size(int elsize, Pointer<? > list, long term) {
		return av_int_list_length_for_size(elsize, Pointer.getPeer(list), term);
	}
	protected native static int av_int_list_length_for_size(int elsize, @Ptr long list, long term);
	/**
	 * Open a file using a UTF-8 filename.<br>
	 * The API of this function matches POSIX fopen(), errors are returned through<br>
	 * errno.<br>
	 * Original signature : <code>FILE* av_fopen_utf8(const char*, const char*)</code><br>
	 * <i>native declaration : libavutil/avutil.h:22</i>
	 */
	public static Pointer av_fopen_utf8(Pointer<Byte > path, Pointer<Byte > mode) {
		return Pointer.pointerToAddress(av_fopen_utf8(Pointer.getPeer(path), Pointer.getPeer(mode)));
	}
	@Ptr 
	protected native static long av_fopen_utf8(@Ptr long path, @Ptr long mode);
	/**
	 * Return the fractional representation of the internal time base.<br>
	 * Original signature : <code>AVRational av_get_time_base_q()</code><br>
	 * <i>native declaration : libavutil/avutil.h:27</i>
	 */
	public static native AVRational av_get_time_base_q();
	/**
	 * Fill the provided buffer with a string containing a FourCC (four-character<br>
	 * code) representation.<br>
	 * * @param buf    a buffer with size in bytes of at least AV_FOURCC_MAX_STRING_SIZE<br>
	 * @param fourcc the fourcc to represent<br>
	 * @return the buffer in input<br>
	 * Original signature : <code>char* av_fourcc_make_string(char*, uint32_t)</code><br>
	 * <i>native declaration : libavutil/avutil.h:36</i>
	 */
	public static Pointer<Byte > av_fourcc_make_string(Pointer<Byte > buf, int fourcc) {
		return Pointer.pointerToAddress(av_fourcc_make_string(Pointer.getPeer(buf), fourcc), Byte.class);
	}
	@Ptr 
	protected native static long av_fourcc_make_string(@Ptr long buf, int fourcc);
	/**
	 * Get a dictionary entry with matching key.<br>
	 * * The returned entry key or value must not be changed, or it will<br>
	 * cause undefined behavior.<br>
	 * * To iterate through all the dictionary entries, you can set the matching key<br>
	 * to the null string "" and set the AV_DICT_IGNORE_SUFFIX flag.<br>
	 * * @param prev Set to the previous matching element to find the next.<br>
	 *             If set to NULL the first matching element is returned.<br>
	 * @param key matching key<br>
	 * @param flags a collection of AV_DICT_* flags controlling how the entry is retrieved<br>
	 * @return found entry or NULL in case no matching entry was found in the dictionary<br>
	 * Original signature : <code>AVDictionaryEntry* av_dict_get(const AVDictionary*, const char*, const AVDictionaryEntry*, int)</code><br>
	 * <i>native declaration : libavutil/dict.h:20</i>
	 */
	public static Pointer<AVDictionaryEntry > av_dict_get(Pointer<AVDictionary > m, Pointer<Byte > key, Pointer<AVDictionaryEntry > prev, int flags) {
		return Pointer.pointerToAddress(av_dict_get(Pointer.getPeer(m), Pointer.getPeer(key), Pointer.getPeer(prev), flags), AVDictionaryEntry.class);
	}
	@Ptr 
	protected native static long av_dict_get(@Ptr long m, @Ptr long key, @Ptr long prev, int flags);
	/**
	 * Get number of entries in dictionary.<br>
	 * * @param m dictionary<br>
	 * @return  number of entries in dictionary<br>
	 * Original signature : <code>int av_dict_count(const AVDictionary*)</code><br>
	 * <i>native declaration : libavutil/dict.h:27</i>
	 */
	public static int av_dict_count(Pointer<AVDictionary > m) {
		return av_dict_count(Pointer.getPeer(m));
	}
	protected native static int av_dict_count(@Ptr long m);
	/**
	 * Set the given entry in *pm, overwriting an existing entry.<br>
	 * * Note: If AV_DICT_DONT_STRDUP_KEY or AV_DICT_DONT_STRDUP_VAL is set,<br>
	 * these arguments will be freed on error.<br>
	 * * Warning: Adding a new entry to a dictionary invalidates all existing entries<br>
	 * previously returned with av_dict_get.<br>
	 * * @param pm pointer to a pointer to a dictionary struct. If *pm is NULL<br>
	 * a dictionary struct is allocated and put in *pm.<br>
	 * @param key entry key to add to *pm (will either be av_strduped or added as a new key depending on flags)<br>
	 * @param value entry value to add to *pm (will be av_strduped or added as a new key depending on flags).<br>
	 *        Passing a NULL value will cause an existing entry to be deleted.<br>
	 * @return >= 0 on success otherwise an error code <0<br>
	 * Original signature : <code>int av_dict_set(AVDictionary**, const char*, const char*, int)</code><br>
	 * <i>native declaration : libavutil/dict.h:42</i>
	 */
	public static int av_dict_set(Pointer<Pointer<AVDictionary > > pm, Pointer<Byte > key, Pointer<Byte > value, int flags) {
		return av_dict_set(Pointer.getPeer(pm), Pointer.getPeer(key), Pointer.getPeer(value), flags);
	}
	protected native static int av_dict_set(@Ptr long pm, @Ptr long key, @Ptr long value, int flags);
	/**
	 * Convenience wrapper for av_dict_set that converts the value to a string<br>
	 * and stores it.<br>
	 * * Note: If AV_DICT_DONT_STRDUP_KEY is set, key will be freed on error.<br>
	 * Original signature : <code>int av_dict_set_int(AVDictionary**, const char*, int64_t, int)</code><br>
	 * <i>native declaration : libavutil/dict.h:49</i>
	 */
	public static int av_dict_set_int(Pointer<Pointer<AVDictionary > > pm, Pointer<Byte > key, long value, int flags) {
		return av_dict_set_int(Pointer.getPeer(pm), Pointer.getPeer(key), value, flags);
	}
	protected native static int av_dict_set_int(@Ptr long pm, @Ptr long key, long value, int flags);
	/**
	 * Parse the key/value pairs list and add the parsed entries to a dictionary.<br>
	 * * In case of failure, all the successfully set entries are stored in<br>
	 * *pm. You may need to manually free the created dictionary.<br>
	 * * @param key_val_sep  a 0-terminated list of characters used to separate<br>
	 *                     key from value<br>
	 * @param pairs_sep    a 0-terminated list of characters used to separate<br>
	 *                     two pairs from each other<br>
	 * @param flags        flags to use when adding to dictionary.<br>
	 *                     AV_DICT_DONT_STRDUP_KEY and AV_DICT_DONT_STRDUP_VAL<br>
	 *                     are ignored since the key/value tokens will always<br>
	 *                     be duplicated.<br>
	 * @return             0 on success, negative AVERROR code on failure<br>
	 * Original signature : <code>int av_dict_parse_string(AVDictionary**, const char*, const char*, const char*, int)</code><br>
	 * <i>native declaration : libavutil/dict.h:65</i>
	 */
	public static int av_dict_parse_string(Pointer<Pointer<AVDictionary > > pm, Pointer<Byte > str, Pointer<Byte > key_val_sep, Pointer<Byte > pairs_sep, int flags) {
		return av_dict_parse_string(Pointer.getPeer(pm), Pointer.getPeer(str), Pointer.getPeer(key_val_sep), Pointer.getPeer(pairs_sep), flags);
	}
	protected native static int av_dict_parse_string(@Ptr long pm, @Ptr long str, @Ptr long key_val_sep, @Ptr long pairs_sep, int flags);
	/**
	 * Copy entries from one AVDictionary struct into another.<br>
	 * @param dst pointer to a pointer to a AVDictionary struct. If *dst is NULL,<br>
	 *            this function will allocate a struct for you and put it in *dst<br>
	 * @param src pointer to source AVDictionary struct<br>
	 * @param flags flags to use when setting entries in *dst<br>
	 * @note metadata is read using the AV_DICT_IGNORE_SUFFIX flag<br>
	 * @return 0 on success, negative AVERROR code on failure. If dst was allocated<br>
	 *           by this function, callers should free the associated memory.<br>
	 * Original signature : <code>int av_dict_copy(AVDictionary**, const AVDictionary*, int)</code><br>
	 * <i>native declaration : libavutil/dict.h:77</i>
	 */
	public static int av_dict_copy(Pointer<Pointer<AVDictionary > > dst, Pointer<AVDictionary > src, int flags) {
		return av_dict_copy(Pointer.getPeer(dst), Pointer.getPeer(src), flags);
	}
	protected native static int av_dict_copy(@Ptr long dst, @Ptr long src, int flags);
	/**
	 * Free all the memory allocated for an AVDictionary struct<br>
	 * and all keys and values.<br>
	 * Original signature : <code>void av_dict_free(AVDictionary**)</code><br>
	 * <i>native declaration : libavutil/dict.h:83</i>
	 */
	public static void av_dict_free(Pointer<Pointer<AVDictionary > > m) {
		av_dict_free(Pointer.getPeer(m));
	}
	protected native static void av_dict_free(@Ptr long m);
	/**
	 * Get dictionary entries as a string.<br>
	 * * Create a string containing dictionary's entries.<br>
	 * Such string may be passed back to av_dict_parse_string().<br>
	 * @note String is escaped with backslashes ('\').<br>
	 * * @param[in]  m             dictionary<br>
	 * @param[out] buffer        Pointer to buffer that will be allocated with string containg entries.<br>
	 *                           Buffer must be freed by the caller when is no longer needed.<br>
	 * @param[in]  key_val_sep   character used to separate key from value<br>
	 * @param[in]  pairs_sep     character used to separate two pairs from each other<br>
	 * @return                   >= 0 on success, negative on error<br>
	 * @warning Separators cannot be neither '\\' nor '\0'. They also cannot be the same.<br>
	 * Original signature : <code>int av_dict_get_string(const AVDictionary*, char**, const char, const char)</code><br>
	 * <i>native declaration : libavutil/dict.h:98</i>
	 */
	public static int av_dict_get_string(Pointer<AVDictionary > m, Pointer<Pointer<Byte > > buffer, byte key_val_sep, byte pairs_sep) {
		return av_dict_get_string(Pointer.getPeer(m), Pointer.getPeer(buffer), key_val_sep, pairs_sep);
	}
	protected native static int av_dict_get_string(@Ptr long m, @Ptr long buffer, byte key_val_sep, byte pairs_sep);
	/**
	 * Allocate an AVBuffer of the given size using av_malloc().<br>
	 * * @return an AVBufferRef of given size or NULL when out of memory<br>
	 * Original signature : <code>AVBufferRef* av_buffer_alloc(int)</code><br>
	 * <i>native declaration : libavutil/buffer.h:28</i>
	 */
	public static Pointer<AVBufferRef > av__buffer_alloc(int size) {
		return Pointer.pointerToAddress(av_buffer_alloc(size), AVBufferRef.class);
	}
	@Ptr 
	protected native static long av_buffer_alloc(int size);
	/**
	 * Same as av_buffer_alloc(), except the returned buffer will be initialized<br>
	 * to zero.<br>
	 * Original signature : <code>AVBufferRef* av_buffer_allocz(int)</code><br>
	 * <i>native declaration : libavutil/buffer.h:34</i>
	 */
	public static Pointer<AVBufferRef > av__buffer_allocz(int size) {
		return Pointer.pointerToAddress(av_buffer_allocz(size), AVBufferRef.class);
	}
	@Ptr 
	protected native static long av_buffer_allocz(int size);
	/**
	 * Create an AVBuffer from an existing array.<br>
	 * * If this function is successful, data is owned by the AVBuffer. The caller may<br>
	 * only access data through the returned AVBufferRef and references derived from<br>
	 * it.<br>
	 * If this function fails, data is left untouched.<br>
	 * @param data   data array<br>
	 * @param size   size of data in bytes<br>
	 * @param free   a callback for freeing this buffer's data<br>
	 * @param opaque parameter to be got for processing or passed to free<br>
	 * @param flags  a combination of AV_BUFFER_FLAG_*<br>
	 * * @return an AVBufferRef referring to data on success, NULL on failure.<br>
	 * Original signature : <code>AVBufferRef* av_buffer_create(uint8_t*, int, av_buffer_create_free_callback*, void*, int)</code><br>
	 * <i>native declaration : libavutil/buffer.h:49</i>
	 */
	public static Pointer<AVBufferRef > av_buffer_create(Pointer<Byte > data, int size, Pointer<AvutilLibrary.av_buffer_create_free_callback > free, Pointer<? > opaque, int flags) {
		return Pointer.pointerToAddress(av_buffer_create(Pointer.getPeer(data), size, Pointer.getPeer(free), Pointer.getPeer(opaque), flags), AVBufferRef.class);
	}
	@Ptr 
	protected native static long av_buffer_create(@Ptr long data, int size, @Ptr long free, @Ptr long opaque, int flags);
	/**
	 * Default free callback, which calls av_free() on the buffer data.<br>
	 * This function is meant to be passed to av_buffer_create(), not called<br>
	 * directly.<br>
	 * Original signature : <code>void av_buffer_default_free(void*, uint8_t*)</code><br>
	 * <i>native declaration : libavutil/buffer.h:56</i>
	 */
	public static void av_buffer_default_free(Pointer<? > opaque, Pointer<Byte > data) {
		av_buffer_default_free(Pointer.getPeer(opaque), Pointer.getPeer(data));
	}
	protected native static void av_buffer_default_free(@Ptr long opaque, @Ptr long data);
	/**
	 * Create a new reference to an AVBuffer.<br>
	 * * @return a new AVBufferRef referring to the same AVBuffer as buf or NULL on<br>
	 * failure.<br>
	 * Original signature : <code>AVBufferRef* av_buffer_ref(AVBufferRef*)</code><br>
	 * <i>native declaration : libavutil/buffer.h:63</i>
	 */
	public static Pointer<AVBufferRef > av_buffer_ref(Pointer<AVBufferRef > buf) {
		return Pointer.pointerToAddress(av_buffer_ref(Pointer.getPeer(buf)), AVBufferRef.class);
	}
	@Ptr 
	protected native static long av_buffer_ref(@Ptr long buf);
	/**
	 * Free a given reference and automatically free the buffer if there are no more<br>
	 * references to it.<br>
	 * * @param buf the reference to be freed. The pointer is set to NULL on return.<br>
	 * Original signature : <code>void av_buffer_unref(AVBufferRef**)</code><br>
	 * <i>native declaration : libavutil/buffer.h:70</i>
	 */
	public static void av_buffer_unref(Pointer<Pointer<AVBufferRef > > buf) {
		av_buffer_unref(Pointer.getPeer(buf));
	}
	protected native static void av_buffer_unref(@Ptr long buf);
	/**
	 * @return 1 if the caller may write to the data referred to by buf (which is<br>
	 * true if and only if buf is the only reference to the underlying AVBuffer).<br>
	 * Return 0 otherwise.<br>
	 * A positive answer is valid until av_buffer_ref() is called on buf.<br>
	 * Original signature : <code>int av_buffer_is_writable(const AVBufferRef*)</code><br>
	 * <i>native declaration : libavutil/buffer.h:78</i>
	 */
	public static int av_buffer_is_writable(Pointer<AVBufferRef > buf) {
		return av_buffer_is_writable(Pointer.getPeer(buf));
	}
	protected native static int av_buffer_is_writable(@Ptr long buf);
	/**
	 * @return the opaque parameter set by av_buffer_create.<br>
	 * Original signature : <code>void* av_buffer_get_opaque(const AVBufferRef*)</code><br>
	 * <i>native declaration : libavutil/buffer.h:83</i>
	 */
	public static Pointer<? > av_buffer_get_opaque(Pointer<AVBufferRef > buf) {
		return Pointer.pointerToAddress(av_buffer_get_opaque(Pointer.getPeer(buf)));
	}
	@Ptr 
	protected native static long av_buffer_get_opaque(@Ptr long buf);
	/**
	 * Original signature : <code>int av_buffer_get_ref_count(const AVBufferRef*)</code><br>
	 * <i>native declaration : libavutil/buffer.h:85</i>
	 */
	public static int av_buffer_get_ref_count(Pointer<AVBufferRef > buf) {
		return av_buffer_get_ref_count(Pointer.getPeer(buf));
	}
	protected native static int av_buffer_get_ref_count(@Ptr long buf);
	/**
	 * Create a writable reference from a given buffer reference, avoiding data copy<br>
	 * if possible.<br>
	 * * @param buf buffer reference to make writable. On success, buf is either left<br>
	 *            untouched, or it is unreferenced and a new writable AVBufferRef is<br>
	 *            written in its place. On failure, buf is left untouched.<br>
	 * @return 0 on success, a negative AVERROR on failure.<br>
	 * Original signature : <code>int av_buffer_make_writable(AVBufferRef**)</code><br>
	 * <i>native declaration : libavutil/buffer.h:95</i>
	 */
	public static int av_buffer_make_writable(Pointer<Pointer<AVBufferRef > > buf) {
		return av_buffer_make_writable(Pointer.getPeer(buf));
	}
	protected native static int av_buffer_make_writable(@Ptr long buf);
	/**
	 * Reallocate a given buffer.<br>
	 * * @param buf  a buffer reference to reallocate. On success, buf will be<br>
	 *             unreferenced and a new reference with the required size will be<br>
	 *             written in its place. On failure buf will be left untouched. *buf<br>
	 *             may be NULL, then a new buffer is allocated.<br>
	 * @param size required new buffer size.<br>
	 * @return 0 on success, a negative AVERROR on failure.<br>
	 * * @note the buffer is actually reallocated with av_realloc() only if it was<br>
	 * initially allocated through av_buffer_realloc(NULL) and there is only one<br>
	 * reference to it (i.e. the one passed to this function). In all other cases<br>
	 * a new buffer is allocated and the data is copied.<br>
	 * Original signature : <code>int av_buffer_realloc(AVBufferRef**, int)</code><br>
	 * <i>native declaration : libavutil/buffer.h:110</i>
	 */
	public static int av_buffer_realloc(Pointer<Pointer<AVBufferRef > > buf, int size) {
		return av_buffer_realloc(Pointer.getPeer(buf), size);
	}
	protected native static int av_buffer_realloc(@Ptr long buf, int size);
	/**
	 * Allocate and initialize a buffer pool.<br>
	 * * @param size size of each buffer in this pool<br>
	 * @param alloc a function that will be used to allocate new buffers when the<br>
	 * pool is empty. May be NULL, then the default allocator will be used<br>
	 * (av_buffer_alloc()).<br>
	 * @return newly created buffer pool on success, NULL on error.<br>
	 * Original signature : <code>AVBufferPool* av_buffer_pool_init(int, av_buffer_pool_init_alloc_callback*)</code><br>
	 * <i>native declaration : libavutil/buffer.h:128</i>
	 */
	public static Pointer<AVBufferPool > av_buffer_pool_init(int size, Pointer<AvutilLibrary.av_buffer_pool_init_alloc_callback > alloc) {
		return Pointer.pointerToAddress(av_buffer_pool_init(size, Pointer.getPeer(alloc)), AVBufferPool.class);
	}
	@Ptr 
	protected native static long av_buffer_pool_init(int size, @Ptr long alloc);
	/**
	 * Allocate and initialize a buffer pool with a more complex allocator.<br>
	 * * @param size size of each buffer in this pool<br>
	 * @param opaque arbitrary user data used by the allocator<br>
	 * @param alloc a function that will be used to allocate new buffers when the<br>
	 *              pool is empty.<br>
	 * @param pool_free a function that will be called immediately before the pool<br>
	 *                  is freed. I.e. after av_buffer_pool_uninit() is called<br>
	 *                  by the caller and all the frames are returned to the pool<br>
	 *                  and freed. It is intended to uninitialize the user opaque<br>
	 *                  data.<br>
	 * @return newly created buffer pool on success, NULL on error.<br>
	 * Original signature : <code>AVBufferPool* av_buffer_pool_init2(int, void*, av_buffer_pool_init2_alloc_callback*, av_buffer_pool_init2_pool_free_callback*)</code><br>
	 * <i>native declaration : libavutil/buffer.h:143</i>
	 */
	public static Pointer<AVBufferPool > av_buffer_pool_init2(int size, Pointer<? > opaque, Pointer<AvutilLibrary.av_buffer_pool_init2_alloc_callback > alloc, Pointer<AvutilLibrary.av_buffer_pool_init2_pool_free_callback > pool_free) {
		return Pointer.pointerToAddress(av_buffer_pool_init2(size, Pointer.getPeer(opaque), Pointer.getPeer(alloc), Pointer.getPeer(pool_free)), AVBufferPool.class);
	}
	@Ptr 
	protected native static long av_buffer_pool_init2(int size, @Ptr long opaque, @Ptr long alloc, @Ptr long pool_free);
	/**
	 * Mark the pool as being available for freeing. It will actually be freed only<br>
	 * once all the allocated buffers associated with the pool are released. Thus it<br>
	 * is safe to call this function while some of the allocated buffers are still<br>
	 * in use.<br>
	 * * @param pool pointer to the pool to be freed. It will be set to NULL.<br>
	 * Original signature : <code>void av_buffer_pool_uninit(AVBufferPool**)</code><br>
	 * <i>native declaration : libavutil/buffer.h:152</i>
	 */
	public static void av_buffer_pool_uninit(Pointer<Pointer<AVBufferPool > > pool) {
		av_buffer_pool_uninit(Pointer.getPeer(pool));
	}
	protected native static void av_buffer_pool_uninit(@Ptr long pool);
	/**
	 * Allocate a new AVBuffer, reusing an old buffer from the pool when available.<br>
	 * This function may be called simultaneously from multiple threads.<br>
	 * * @return a reference to the new buffer on success, NULL on error.<br>
	 * Original signature : <code>AVBufferRef* av_buffer_pool_get(AVBufferPool*)</code><br>
	 * <i>native declaration : libavutil/buffer.h:159</i>
	 */
	public static Pointer<AVBufferRef > av_buffer_pool_get(Pointer<AVBufferPool > pool) {
		return Pointer.pointerToAddress(av_buffer_pool_get(Pointer.getPeer(pool)), AVBufferRef.class);
	}
	@Ptr 
	protected native static long av_buffer_pool_get(@Ptr long pool);
	/**
	 * Return the name of sample_fmt, or NULL if sample_fmt is not<br>
	 * recognized.<br>
	 * Original signature : <code>char* av_get_sample_fmt_name(AVSampleFormat)</code><br>
	 * <i>native declaration : libavutil/samplefmt.h:50</i>
	 */
	public static Pointer<Byte > av_get_sample_fmt_name(IntValuedEnum<AvutilLibrary.AVSampleFormat > sample_fmt) {
		return Pointer.pointerToAddress(av_get_sample_fmt_name((int)sample_fmt.value()), Byte.class);
	}
	@Ptr 
	protected native static long av_get_sample_fmt_name(int sample_fmt);
	/**
	 * Return a sample format corresponding to name, or AV_SAMPLE_FMT_NONE<br>
	 * on error.<br>
	 * Original signature : <code>AVSampleFormat av_get_sample_fmt(const char*)</code><br>
	 * <i>native declaration : libavutil/samplefmt.h:56</i>
	 */
	public static IntValuedEnum<AvutilLibrary.AVSampleFormat > av_get_sample_fmt(Pointer<Byte > name) {
		return FlagSet.fromValue(av_get_sample_fmt(Pointer.getPeer(name)), AvutilLibrary.AVSampleFormat.class);
	}
	protected native static int av_get_sample_fmt(@Ptr long name);
	/**
	 * Return the planar<->packed alternative form of the given sample format, or<br>
	 * AV_SAMPLE_FMT_NONE on error. If the passed sample_fmt is already in the<br>
	 * requested planar/packed format, the format returned is the same as the<br>
	 * input.<br>
	 * Original signature : <code>AVSampleFormat av_get_alt_sample_fmt(AVSampleFormat, int)</code><br>
	 * <i>native declaration : libavutil/samplefmt.h:64</i>
	 */
	public static IntValuedEnum<AvutilLibrary.AVSampleFormat > av_get_alt_sample_fmt(IntValuedEnum<AvutilLibrary.AVSampleFormat > sample_fmt, int planar) {
		return FlagSet.fromValue(av_get_alt_sample_fmt((int)sample_fmt.value(), planar), AvutilLibrary.AVSampleFormat.class);
	}
	protected native static int av_get_alt_sample_fmt(int sample_fmt, int planar);
	/**
	 * Get the packed alternative form of the given sample format.<br>
	 * * If the passed sample_fmt is already in packed format, the format returned is<br>
	 * the same as the input.<br>
	 * * @return  the packed alternative form of the given sample format or<br>
	 * AV_SAMPLE_FMT_NONE on error.<br>
	 * Original signature : <code>AVSampleFormat av_get_packed_sample_fmt(AVSampleFormat)</code><br>
	 * <i>native declaration : libavutil/samplefmt.h:73</i>
	 */
	public static IntValuedEnum<AvutilLibrary.AVSampleFormat > av_get_packed_sample_fmt(IntValuedEnum<AvutilLibrary.AVSampleFormat > sample_fmt) {
		return FlagSet.fromValue(av_get_packed_sample_fmt((int)sample_fmt.value()), AvutilLibrary.AVSampleFormat.class);
	}
	protected native static int av_get_packed_sample_fmt(int sample_fmt);
	/**
	 * Get the planar alternative form of the given sample format.<br>
	 * * If the passed sample_fmt is already in planar format, the format returned is<br>
	 * the same as the input.<br>
	 * * @return  the planar alternative form of the given sample format or<br>
	 * AV_SAMPLE_FMT_NONE on error.<br>
	 * Original signature : <code>AVSampleFormat av_get_planar_sample_fmt(AVSampleFormat)</code><br>
	 * <i>native declaration : libavutil/samplefmt.h:82</i>
	 */
	public static IntValuedEnum<AvutilLibrary.AVSampleFormat > av_get_planar_sample_fmt(IntValuedEnum<AvutilLibrary.AVSampleFormat > sample_fmt) {
		return FlagSet.fromValue(av_get_planar_sample_fmt((int)sample_fmt.value()), AvutilLibrary.AVSampleFormat.class);
	}
	protected native static int av_get_planar_sample_fmt(int sample_fmt);
	/**
	 * Generate a string corresponding to the sample format with<br>
	 * sample_fmt, or a header if sample_fmt is negative.<br>
	 * * @param buf the buffer where to write the string<br>
	 * @param buf_size the size of buf<br>
	 * @param sample_fmt the number of the sample format to print the<br>
	 * corresponding info string, or a negative value to print the<br>
	 * corresponding header.<br>
	 * @return the pointer to the filled buffer or NULL if sample_fmt is<br>
	 * unknown or in case of other errors<br>
	 * Original signature : <code>char* av_get_sample_fmt_string(char*, int, AVSampleFormat)</code><br>
	 * <i>native declaration : libavutil/samplefmt.h:95</i>
	 */
	public static Pointer<Byte > av_get_sample_fmt_string(Pointer<Byte > buf, int buf_size, IntValuedEnum<AvutilLibrary.AVSampleFormat > sample_fmt) {
		return Pointer.pointerToAddress(av_get_sample_fmt_string(Pointer.getPeer(buf), buf_size, (int)sample_fmt.value()), Byte.class);
	}
	@Ptr 
	protected native static long av_get_sample_fmt_string(@Ptr long buf, int buf_size, int sample_fmt);
	/**
	 * Return number of bytes per sample.<br>
	 * * @param sample_fmt the sample format<br>
	 * @return number of bytes per sample or zero if unknown for the given<br>
	 * sample format<br>
	 * Original signature : <code>int av_get_bytes_per_sample(AVSampleFormat)</code><br>
	 * <i>native declaration : libavutil/samplefmt.h:103</i>
	 */
	public static int av_get_bytes_per_sample(IntValuedEnum<AvutilLibrary.AVSampleFormat > sample_fmt) {
		return av_get_bytes_per_sample((int)sample_fmt.value());
	}
	protected native static int av_get_bytes_per_sample(int sample_fmt);
	/**
	 * Check if the sample format is planar.<br>
	 * * @param sample_fmt the sample format to inspect<br>
	 * @return 1 if the sample format is planar, 0 if it is interleaved<br>
	 * Original signature : <code>int av_sample_fmt_is_planar(AVSampleFormat)</code><br>
	 * <i>native declaration : libavutil/samplefmt.h:110</i>
	 */
	public static int av_sample_fmt_is_planar(IntValuedEnum<AvutilLibrary.AVSampleFormat > sample_fmt) {
		return av_sample_fmt_is_planar((int)sample_fmt.value());
	}
	protected native static int av_sample_fmt_is_planar(int sample_fmt);
	/**
	 * Get the required buffer size for the given audio parameters.<br>
	 * * @param[out] linesize calculated linesize, may be NULL<br>
	 * @param nb_channels   the number of channels<br>
	 * @param nb_samples    the number of samples in a single channel<br>
	 * @param sample_fmt    the sample format<br>
	 * @param align         buffer size alignment (0 = default, 1 = no alignment)<br>
	 * @return              required buffer size, or negative error code on failure<br>
	 * Original signature : <code>int av_samples_get_buffer_size(int*, int, int, AVSampleFormat, int)</code><br>
	 * <i>native declaration : libavutil/samplefmt.h:121</i>
	 */
	public static int av_samples_get_buffer_size(Pointer<Integer > linesize, int nb_channels, int nb_samples, IntValuedEnum<AvutilLibrary.AVSampleFormat > sample_fmt, int align) {
		return av_samples_get_buffer_size(Pointer.getPeer(linesize), nb_channels, nb_samples, (int)sample_fmt.value(), align);
	}
	protected native static int av_samples_get_buffer_size(@Ptr long linesize, int nb_channels, int nb_samples, int sample_fmt, int align);
	/**
	 * Fill plane data pointers and linesize for samples with sample<br>
	 * format sample_fmt.<br>
	 * * The audio_data array is filled with the pointers to the samples data planes:<br>
	 * for planar, set the start point of each channel's data within the buffer,<br>
	 * for packed, set the start point of the entire buffer only.<br>
	 * * The value pointed to by linesize is set to the aligned size of each<br>
	 * channel's data buffer for planar layout, or to the aligned size of the<br>
	 * buffer for all channels for packed layout.<br>
	 * * The buffer in buf must be big enough to contain all the samples<br>
	 * (use av_samples_get_buffer_size() to compute its minimum size),<br>
	 * otherwise the audio_data pointers will point to invalid data.<br>
	 * * @see enum AVSampleFormat<br>
	 * The documentation for AVSampleFormat describes the data layout.<br>
	 * * @param[out] audio_data  array to be filled with the pointer for each channel<br>
	 * @param[out] linesize    calculated linesize, may be NULL<br>
	 * @param buf              the pointer to a buffer containing the samples<br>
	 * @param nb_channels      the number of channels<br>
	 * @param nb_samples       the number of samples in a single channel<br>
	 * @param sample_fmt       the sample format<br>
	 * @param align            buffer size alignment (0 = default, 1 = no alignment)<br>
	 * @return                 >=0 on success or a negative error code on failure<br>
	 * @todo return minimum size in bytes required for the buffer in case<br>
	 * of success at the next bump<br>
	 * Original signature : <code>int av_samples_fill_arrays(uint8_t**, int*, const uint8_t*, int, int, AVSampleFormat, int)</code><br>
	 * <i>native declaration : libavutil/samplefmt.h:148</i>
	 */
	public static int av_samples_fill_arrays(Pointer<Pointer<Byte > > audio_data, Pointer<Integer > linesize, Pointer<Byte > buf, int nb_channels, int nb_samples, IntValuedEnum<AvutilLibrary.AVSampleFormat > sample_fmt, int align) {
		return av_samples_fill_arrays(Pointer.getPeer(audio_data), Pointer.getPeer(linesize), Pointer.getPeer(buf), nb_channels, nb_samples, (int)sample_fmt.value(), align);
	}
	protected native static int av_samples_fill_arrays(@Ptr long audio_data, @Ptr long linesize, @Ptr long buf, int nb_channels, int nb_samples, int sample_fmt, int align);
	/**
	 * Allocate a samples buffer for nb_samples samples, and fill data pointers and<br>
	 * linesize accordingly.<br>
	 * The allocated samples buffer can be freed by using av_freep(&audio_data[0])<br>
	 * Allocated data will be initialized to silence.<br>
	 * * @see enum AVSampleFormat<br>
	 * The documentation for AVSampleFormat describes the data layout.<br>
	 * * @param[out] audio_data  array to be filled with the pointer for each channel<br>
	 * @param[out] linesize    aligned size for audio buffer(s), may be NULL<br>
	 * @param nb_channels      number of audio channels<br>
	 * @param nb_samples       number of samples per channel<br>
	 * @param align            buffer size alignment (0 = default, 1 = no alignment)<br>
	 * @return                 >=0 on success or a negative error code on failure<br>
	 * @todo return the size of the allocated buffer in case of success at the next bump<br>
	 * @see av_samples_fill_arrays()<br>
	 * @see av_samples_alloc_array_and_samples()<br>
	 * Original signature : <code>int av_samples_alloc(uint8_t**, int*, int, int, AVSampleFormat, int)</code><br>
	 * <i>native declaration : libavutil/samplefmt.h:167</i>
	 */
	public static int av_samples_alloc(Pointer<Pointer<Byte > > audio_data, Pointer<Integer > linesize, int nb_channels, int nb_samples, IntValuedEnum<AvutilLibrary.AVSampleFormat > sample_fmt, int align) {
		return av_samples_alloc(Pointer.getPeer(audio_data), Pointer.getPeer(linesize), nb_channels, nb_samples, (int)sample_fmt.value(), align);
	}
	protected native static int av_samples_alloc(@Ptr long audio_data, @Ptr long linesize, int nb_channels, int nb_samples, int sample_fmt, int align);
	/**
	 * Allocate a data pointers array, samples buffer for nb_samples<br>
	 * samples, and fill data pointers and linesize accordingly.<br>
	 * * This is the same as av_samples_alloc(), but also allocates the data<br>
	 * pointers array.<br>
	 * * @see av_samples_alloc()<br>
	 * Original signature : <code>int av_samples_alloc_array_and_samples(uint8_t***, int*, int, int, AVSampleFormat, int)</code><br>
	 * <i>native declaration : libavutil/samplefmt.h:176</i>
	 */
	public static int av_samples_alloc_array_and_samples(Pointer<Pointer<Pointer<Byte > > > audio_data, Pointer<Integer > linesize, int nb_channels, int nb_samples, IntValuedEnum<AvutilLibrary.AVSampleFormat > sample_fmt, int align) {
		return av_samples_alloc_array_and_samples(Pointer.getPeer(audio_data), Pointer.getPeer(linesize), nb_channels, nb_samples, (int)sample_fmt.value(), align);
	}
	protected native static int av_samples_alloc_array_and_samples(@Ptr long audio_data, @Ptr long linesize, int nb_channels, int nb_samples, int sample_fmt, int align);
	/**
	 * Copy samples from src to dst.<br>
	 * * @param dst destination array of pointers to data planes<br>
	 * @param src source array of pointers to data planes<br>
	 * @param dst_offset offset in samples at which the data will be written to dst<br>
	 * @param src_offset offset in samples at which the data will be read from src<br>
	 * @param nb_samples number of samples to be copied<br>
	 * @param nb_channels number of audio channels<br>
	 * @param sample_fmt audio sample format<br>
	 * Original signature : <code>int av_samples_copy(uint8_t**, const uint8_t**, int, int, int, int, AVSampleFormat)</code><br>
	 * <i>native declaration : libavutil/samplefmt.h:188</i>
	 */
	public static int av_samples_copy(Pointer<Pointer<Byte > > dst, Pointer<Pointer<Byte > > src, int dst_offset, int src_offset, int nb_samples, int nb_channels, IntValuedEnum<AvutilLibrary.AVSampleFormat > sample_fmt) {
		return av_samples_copy(Pointer.getPeer(dst), Pointer.getPeer(src), dst_offset, src_offset, nb_samples, nb_channels, (int)sample_fmt.value());
	}
	protected native static int av_samples_copy(@Ptr long dst, @Ptr long src, int dst_offset, int src_offset, int nb_samples, int nb_channels, int sample_fmt);
	/**
	 * Fill an audio buffer with silence.<br>
	 * * @param audio_data  array of pointers to data planes<br>
	 * @param offset      offset in samples at which to start filling<br>
	 * @param nb_samples  number of samples to fill<br>
	 * @param nb_channels number of audio channels<br>
	 * @param sample_fmt  audio sample format<br>
	 * Original signature : <code>int av_samples_set_silence(uint8_t**, int, int, int, AVSampleFormat)</code><br>
	 * <i>native declaration : libavutil/samplefmt.h:198</i>
	 */
	public static int av_samples_set_silence(Pointer<Pointer<Byte > > audio_data, int offset, int nb_samples, int nb_channels, IntValuedEnum<AvutilLibrary.AVSampleFormat > sample_fmt) {
		return av_samples_set_silence(Pointer.getPeer(audio_data), offset, nb_samples, nb_channels, (int)sample_fmt.value());
	}
	protected native static int av_samples_set_silence(@Ptr long audio_data, int offset, int nb_samples, int nb_channels, int sample_fmt);
	/**
	 * Accessors for some AVFrame fields. These used to be provided for ABI<br>
	 * compatibility, and do not need to be used anymore.<br>
	 * Original signature : <code>int64_t av_frame_get_best_effort_timestamp(const AVFrame*)</code><br>
	 * <i>native declaration : libavutil/frame.h:393</i>
	 */
	public static long av_frame_get_best_effort_timestamp(Pointer<AVFrame > frame) {
		return av_frame_get_best_effort_timestamp(Pointer.getPeer(frame));
	}
	protected native static long av_frame_get_best_effort_timestamp(@Ptr long frame);
	/**
	 * Original signature : <code>void av_frame_set_best_effort_timestamp(AVFrame*, int64_t)</code><br>
	 * <i>native declaration : libavutil/frame.h:395</i>
	 */
	public static void av_frame_set_best_effort_timestamp(Pointer<AVFrame > frame, long val) {
		av_frame_set_best_effort_timestamp(Pointer.getPeer(frame), val);
	}
	protected native static void av_frame_set_best_effort_timestamp(@Ptr long frame, long val);
	/**
	 * Original signature : <code>int64_t av_frame_get_pkt_duration(const AVFrame*)</code><br>
	 * <i>native declaration : libavutil/frame.h:397</i>
	 */
	public static long av_frame_get_pkt_duration(Pointer<AVFrame > frame) {
		return av_frame_get_pkt_duration(Pointer.getPeer(frame));
	}
	protected native static long av_frame_get_pkt_duration(@Ptr long frame);
	/**
	 * Original signature : <code>void av_frame_set_pkt_duration(AVFrame*, int64_t)</code><br>
	 * <i>native declaration : libavutil/frame.h:399</i>
	 */
	public static void av_frame_set_pkt_duration(Pointer<AVFrame > frame, long val) {
		av_frame_set_pkt_duration(Pointer.getPeer(frame), val);
	}
	protected native static void av_frame_set_pkt_duration(@Ptr long frame, long val);
	/**
	 * Original signature : <code>int64_t av_frame_get_pkt_pos(const AVFrame*)</code><br>
	 * <i>native declaration : libavutil/frame.h:401</i>
	 */
	public static long av_frame_get_pkt_pos(Pointer<AVFrame > frame) {
		return av_frame_get_pkt_pos(Pointer.getPeer(frame));
	}
	protected native static long av_frame_get_pkt_pos(@Ptr long frame);
	/**
	 * Original signature : <code>void av_frame_set_pkt_pos(AVFrame*, int64_t)</code><br>
	 * <i>native declaration : libavutil/frame.h:403</i>
	 */
	public static void av_frame_set_pkt_pos(Pointer<AVFrame > frame, long val) {
		av_frame_set_pkt_pos(Pointer.getPeer(frame), val);
	}
	protected native static void av_frame_set_pkt_pos(@Ptr long frame, long val);
	/**
	 * Original signature : <code>int64_t av_frame_get_channel_layout(const AVFrame*)</code><br>
	 * <i>native declaration : libavutil/frame.h:405</i>
	 */
	public static long av_frame_get_channel_layout(Pointer<AVFrame > frame) {
		return av_frame_get_channel_layout(Pointer.getPeer(frame));
	}
	protected native static long av_frame_get_channel_layout(@Ptr long frame);
	/**
	 * Original signature : <code>void av_frame_set_channel_layout(AVFrame*, int64_t)</code><br>
	 * <i>native declaration : libavutil/frame.h:407</i>
	 */
	public static void av_frame_set_channel_layout(Pointer<AVFrame > frame, long val) {
		av_frame_set_channel_layout(Pointer.getPeer(frame), val);
	}
	protected native static void av_frame_set_channel_layout(@Ptr long frame, long val);
	/**
	 * Original signature : <code>int av_frame_get_channels(const AVFrame*)</code><br>
	 * <i>native declaration : libavutil/frame.h:409</i>
	 */
	public static int av_frame_get_channels(Pointer<AVFrame > frame) {
		return av_frame_get_channels(Pointer.getPeer(frame));
	}
	protected native static int av_frame_get_channels(@Ptr long frame);
	/**
	 * Original signature : <code>void av_frame_set_channels(AVFrame*, int)</code><br>
	 * <i>native declaration : libavutil/frame.h:411</i>
	 */
	public static void av_frame_set_channels(Pointer<AVFrame > frame, int val) {
		av_frame_set_channels(Pointer.getPeer(frame), val);
	}
	protected native static void av_frame_set_channels(@Ptr long frame, int val);
	/**
	 * Original signature : <code>int av_frame_get_sample_rate(const AVFrame*)</code><br>
	 * <i>native declaration : libavutil/frame.h:413</i>
	 */
	public static int av_frame_get_sample_rate(Pointer<AVFrame > frame) {
		return av_frame_get_sample_rate(Pointer.getPeer(frame));
	}
	protected native static int av_frame_get_sample_rate(@Ptr long frame);
	/**
	 * Original signature : <code>void av_frame_set_sample_rate(AVFrame*, int)</code><br>
	 * <i>native declaration : libavutil/frame.h:415</i>
	 */
	public static void av_frame_set_sample_rate(Pointer<AVFrame > frame, int val) {
		av_frame_set_sample_rate(Pointer.getPeer(frame), val);
	}
	protected native static void av_frame_set_sample_rate(@Ptr long frame, int val);
	/**
	 * Original signature : <code>AVDictionary* av_frame_get_metadata(const AVFrame*)</code><br>
	 * <i>native declaration : libavutil/frame.h:417</i>
	 */
	public static Pointer<AVDictionary > av_frame_get_metadata(Pointer<AVFrame > frame) {
		return Pointer.pointerToAddress(av_frame_get_metadata(Pointer.getPeer(frame)), AVDictionary.class);
	}
	@Ptr 
	protected native static long av_frame_get_metadata(@Ptr long frame);
	/**
	 * Original signature : <code>void av_frame_set_metadata(AVFrame*, AVDictionary*)</code><br>
	 * <i>native declaration : libavutil/frame.h:419</i>
	 */
	public static void av_frame_set_metadata(Pointer<AVFrame > frame, Pointer<AVDictionary > val) {
		av_frame_set_metadata(Pointer.getPeer(frame), Pointer.getPeer(val));
	}
	protected native static void av_frame_set_metadata(@Ptr long frame, @Ptr long val);
	/**
	 * Original signature : <code>int av_frame_get_decode_error_flags(const AVFrame*)</code><br>
	 * <i>native declaration : libavutil/frame.h:421</i>
	 */
	public static int av_frame_get_decode_error_flags(Pointer<AVFrame > frame) {
		return av_frame_get_decode_error_flags(Pointer.getPeer(frame));
	}
	protected native static int av_frame_get_decode_error_flags(@Ptr long frame);
	/**
	 * Original signature : <code>void av_frame_set_decode_error_flags(AVFrame*, int)</code><br>
	 * <i>native declaration : libavutil/frame.h:423</i>
	 */
	public static void av_frame_set_decode_error_flags(Pointer<AVFrame > frame, int val) {
		av_frame_set_decode_error_flags(Pointer.getPeer(frame), val);
	}
	protected native static void av_frame_set_decode_error_flags(@Ptr long frame, int val);
	/**
	 * Original signature : <code>int av_frame_get_pkt_size(const AVFrame*)</code><br>
	 * <i>native declaration : libavutil/frame.h:425</i>
	 */
	public static int av_frame_get_pkt_size(Pointer<AVFrame > frame) {
		return av_frame_get_pkt_size(Pointer.getPeer(frame));
	}
	protected native static int av_frame_get_pkt_size(@Ptr long frame);
	/**
	 * Original signature : <code>void av_frame_set_pkt_size(AVFrame*, int)</code><br>
	 * <i>native declaration : libavutil/frame.h:427</i>
	 */
	public static void av_frame_set_pkt_size(Pointer<AVFrame > frame, int val) {
		av_frame_set_pkt_size(Pointer.getPeer(frame), val);
	}
	protected native static void av_frame_set_pkt_size(@Ptr long frame, int val);
	/**
	 * Original signature : <code>AVDictionary** avpriv_frame_get_metadatap(AVFrame*)</code><br>
	 * <i>native declaration : libavutil/frame.h:429</i>
	 */
	public static Pointer<Pointer<AVDictionary > > avpriv_frame_get_metadatap(Pointer<AVFrame > frame) {
		return Pointer.pointerToAddress(avpriv_frame_get_metadatap(Pointer.getPeer(frame)), DefaultParameterizedType.paramType(Pointer.class, AVDictionary.class));
	}
	@Ptr 
	protected native static long avpriv_frame_get_metadatap(@Ptr long frame);
	/**
	 * Original signature : <code>int8_t* av_frame_get_qp_table(AVFrame*, int*, int*)</code><br>
	 * <i>native declaration : libavutil/frame.h:431</i>
	 */
	public static Pointer<Byte > av_frame_get_qp_table(Pointer<AVFrame > f, Pointer<Integer > stride, Pointer<Integer > type) {
		return Pointer.pointerToAddress(av_frame_get_qp_table(Pointer.getPeer(f), Pointer.getPeer(stride), Pointer.getPeer(type)), Byte.class);
	}
	@Ptr 
	protected native static long av_frame_get_qp_table(@Ptr long f, @Ptr long stride, @Ptr long type);
	/**
	 * Original signature : <code>int av_frame_set_qp_table(AVFrame*, AVBufferRef*, int, int)</code><br>
	 * <i>native declaration : libavutil/frame.h:433</i>
	 */
	public static int av_frame_set_qp_table(Pointer<AVFrame > f, Pointer<AVBufferRef > buf, int stride, int type) {
		return av_frame_set_qp_table(Pointer.getPeer(f), Pointer.getPeer(buf), stride, type);
	}
	protected native static int av_frame_set_qp_table(@Ptr long f, @Ptr long buf, int stride, int type);
	/**
	 * Original signature : <code>AVColorSpace av_frame_get_colorspace(const AVFrame*)</code><br>
	 * <i>native declaration : libavutil/frame.h:435</i>
	 */
	public static IntValuedEnum<AvutilLibrary.AVColorSpace > av_frame_get_colorspace(Pointer<AVFrame > frame) {
		return FlagSet.fromValue(av_frame_get_colorspace(Pointer.getPeer(frame)), AvutilLibrary.AVColorSpace.class);
	}
	protected native static int av_frame_get_colorspace(@Ptr long frame);
	/**
	 * Original signature : <code>void av_frame_set_colorspace(AVFrame*, AVColorSpace)</code><br>
	 * <i>native declaration : libavutil/frame.h:437</i>
	 */
	public static void av_frame_set_colorspace(Pointer<AVFrame > frame, IntValuedEnum<AvutilLibrary.AVColorSpace > val) {
		av_frame_set_colorspace(Pointer.getPeer(frame), (int)val.value());
	}
	protected native static void av_frame_set_colorspace(@Ptr long frame, int val);
	/**
	 * Original signature : <code>AVColorRange av_frame_get_color_range(const AVFrame*)</code><br>
	 * <i>native declaration : libavutil/frame.h:439</i>
	 */
	public static IntValuedEnum<AvutilLibrary.AVColorRange > av_frame_get_color_range(Pointer<AVFrame > frame) {
		return FlagSet.fromValue(av_frame_get_color_range(Pointer.getPeer(frame)), AvutilLibrary.AVColorRange.class);
	}
	protected native static int av_frame_get_color_range(@Ptr long frame);
	/**
	 * Original signature : <code>void av_frame_set_color_range(AVFrame*, AVColorRange)</code><br>
	 * <i>native declaration : libavutil/frame.h:441</i>
	 */
	public static void av_frame_set_color_range(Pointer<AVFrame > frame, IntValuedEnum<AvutilLibrary.AVColorRange > val) {
		av_frame_set_color_range(Pointer.getPeer(frame), (int)val.value());
	}
	protected native static void av_frame_set_color_range(@Ptr long frame, int val);
	/**
	 * Get the name of a colorspace.<br>
	 * @return a static string identifying the colorspace; can be NULL.<br>
	 * Original signature : <code>char* av_get_colorspace_name(AVColorSpace)</code><br>
	 * <i>native declaration : libavutil/frame.h:447</i>
	 */
	public static Pointer<Byte > av_get_colorspace_name(IntValuedEnum<AvutilLibrary.AVColorSpace > val) {
		return Pointer.pointerToAddress(av_get_colorspace_name((int)val.value()), Byte.class);
	}
	@Ptr 
	protected native static long av_get_colorspace_name(int val);
	/**
	 * Allocate an AVFrame and set its fields to default values.  The resulting<br>
	 * struct must be freed using av_frame_free().<br>
	 * * @return An AVFrame filled with default values or NULL on failure.<br>
	 * * @note this only allocates the AVFrame itself, not the data buffers. Those<br>
	 * must be allocated through other means, e.g. with av_frame_get_buffer() or<br>
	 * manually.<br>
	 * Original signature : <code>AVFrame* av_frame_alloc()</code><br>
	 * <i>native declaration : libavutil/frame.h:457</i>
	 */
	public static Pointer<AVFrame > av__frame_alloc() {
		return Pointer.pointerToAddress(av_frame_alloc(), AVFrame.class);
	}
	@Ptr 
	protected native static long av_frame_alloc();
	/**
	 * Free the frame and any dynamically allocated objects in it,<br>
	 * e.g. extended_data. If the frame is reference counted, it will be<br>
	 * unreferenced first.<br>
	 * * @param frame frame to be freed. The pointer will be set to NULL.<br>
	 * Original signature : <code>void av_frame_free(AVFrame**)</code><br>
	 * <i>native declaration : libavutil/frame.h:465</i>
	 */
	public static void av_frame_free(Pointer<Pointer<AVFrame > > frame) {
		av_frame_free(Pointer.getPeer(frame));
	}
	protected native static void av_frame_free(@Ptr long frame);
	/**
	 * Set up a new reference to the data described by the source frame.<br>
	 * * Copy frame properties from src to dst and create a new reference for each<br>
	 * AVBufferRef from src.<br>
	 * * If src is not reference counted, new buffers are allocated and the data is<br>
	 * copied.<br>
	 * * @warning: dst MUST have been either unreferenced with av_frame_unref(dst),<br>
	 *           or newly allocated with av_frame_alloc() before calling this<br>
	 *           function, or undefined behavior will occur.<br>
	 * * @return 0 on success, a negative AVERROR on error<br>
	 * Original signature : <code>int av_frame_ref(AVFrame*, const AVFrame*)</code><br>
	 * <i>native declaration : libavutil/frame.h:478</i>
	 */
	public static int av_frame_ref(Pointer<AVFrame > dst, Pointer<AVFrame > src) {
		return av_frame_ref(Pointer.getPeer(dst), Pointer.getPeer(src));
	}
	protected native static int av_frame_ref(@Ptr long dst, @Ptr long src);
	/**
	 * Create a new frame that references the same data as src.<br>
	 * * This is a shortcut for av_frame_alloc()+av_frame_ref().<br>
	 * * @return newly created AVFrame on success, NULL on error.<br>
	 * Original signature : <code>AVFrame* av_frame_clone(const AVFrame*)</code><br>
	 * <i>native declaration : libavutil/frame.h:485</i>
	 */
	public static Pointer<AVFrame > av_frame_clone(Pointer<AVFrame > src) {
		return Pointer.pointerToAddress(av_frame_clone(Pointer.getPeer(src)), AVFrame.class);
	}
	@Ptr 
	protected native static long av_frame_clone(@Ptr long src);
	/**
	 * Unreference all the buffers referenced by frame and reset the frame fields.<br>
	 * Original signature : <code>void av_frame_unref(AVFrame*)</code><br>
	 * <i>native declaration : libavutil/frame.h:490</i>
	 */
	public static void av_frame_unref(Pointer<AVFrame > frame) {
		av_frame_unref(Pointer.getPeer(frame));
	}
	protected native static void av_frame_unref(@Ptr long frame);
	/**
	 * Move everything contained in src to dst and reset src.<br>
	 * * @warning: dst is not unreferenced, but directly overwritten without reading<br>
	 *           or deallocating its contents. Call av_frame_unref(dst) manually<br>
	 *           before calling this function to ensure that no memory is leaked.<br>
	 * Original signature : <code>void av_frame_move_ref(AVFrame*, AVFrame*)</code><br>
	 * <i>native declaration : libavutil/frame.h:498</i>
	 */
	public static void av_frame_move_ref(Pointer<AVFrame > dst, Pointer<AVFrame > src) {
		av_frame_move_ref(Pointer.getPeer(dst), Pointer.getPeer(src));
	}
	protected native static void av_frame_move_ref(@Ptr long dst, @Ptr long src);
	/**
	 * Allocate new buffer(s) for audio or video data.<br>
	 * * The following fields must be set on frame before calling this function:<br>
	 * - format (pixel format for video, sample format for audio)<br>
	 * - width and height for video<br>
	 * - nb_samples and channel_layout for audio<br>
	 * * This function will fill AVFrame.data and AVFrame.buf arrays and, if<br>
	 * necessary, allocate and fill AVFrame.extended_data and AVFrame.extended_buf.<br>
	 * For planar formats, one buffer will be allocated for each plane.<br>
	 * * @warning: if frame already has been allocated, calling this function will<br>
	 *           leak memory. In addition, undefined behavior can occur in certain<br>
	 *           cases.<br>
	 * * @param frame frame in which to store the new buffers.<br>
	 * @param align Required buffer size alignment. If equal to 0, alignment will be<br>
	 *              chosen automatically for the current CPU. It is highly<br>
	 *              recommended to pass 0 here unless you know what you are doing.<br>
	 * * @return 0 on success, a negative AVERROR on error.<br>
	 * Original signature : <code>int av_frame_get_buffer(AVFrame*, int)</code><br>
	 * <i>native declaration : libavutil/frame.h:518</i>
	 */
	public static int av_frame_get_buffer(Pointer<AVFrame > frame, int align) {
		return av_frame_get_buffer(Pointer.getPeer(frame), align);
	}
	protected native static int av_frame_get_buffer(@Ptr long frame, int align);
	/**
	 * Check if the frame data is writable.<br>
	 * * @return A positive value if the frame data is writable (which is true if and<br>
	 * only if each of the underlying buffers has only one reference, namely the one<br>
	 * stored in this frame). Return 0 otherwise.<br>
	 * * If 1 is returned the answer is valid until av_buffer_ref() is called on any<br>
	 * of the underlying AVBufferRefs (e.g. through av_frame_ref() or directly).<br>
	 * * @see av_frame_make_writable(), av_buffer_is_writable()<br>
	 * Original signature : <code>int av_frame_is_writable(AVFrame*)</code><br>
	 * <i>native declaration : libavutil/frame.h:529</i>
	 */
	public static int av_frame_is_writable(Pointer<AVFrame > frame) {
		return av_frame_is_writable(Pointer.getPeer(frame));
	}
	protected native static int av_frame_is_writable(@Ptr long frame);
	/**
	 * Ensure that the frame data is writable, avoiding data copy if possible.<br>
	 * * Do nothing if the frame is writable, allocate new buffers and copy the data<br>
	 * if it is not.<br>
	 * * @return 0 on success, a negative AVERROR on error.<br>
	 * * @see av_frame_is_writable(), av_buffer_is_writable(),<br>
	 * av_buffer_make_writable()<br>
	 * Original signature : <code>int av_frame_make_writable(AVFrame*)</code><br>
	 * <i>native declaration : libavutil/frame.h:539</i>
	 */
	public static int av_frame_make_writable(Pointer<AVFrame > frame) {
		return av_frame_make_writable(Pointer.getPeer(frame));
	}
	protected native static int av_frame_make_writable(@Ptr long frame);
	/**
	 * Copy the frame data from src to dst.<br>
	 * * This function does not allocate anything, dst must be already initialized and<br>
	 * allocated with the same parameters as src.<br>
	 * * This function only copies the frame data (i.e. the contents of the data /<br>
	 * extended data arrays), not any other properties.<br>
	 * * @return >= 0 on success, a negative AVERROR on error.<br>
	 * Original signature : <code>int av_frame_copy(AVFrame*, const AVFrame*)</code><br>
	 * <i>native declaration : libavutil/frame.h:549</i>
	 */
	public static int av_frame_copy(Pointer<AVFrame > dst, Pointer<AVFrame > src) {
		return av_frame_copy(Pointer.getPeer(dst), Pointer.getPeer(src));
	}
	protected native static int av_frame_copy(@Ptr long dst, @Ptr long src);
	/**
	 * Copy only "metadata" fields from src to dst.<br>
	 * * Metadata for the purpose of this function are those fields that do not affect<br>
	 * the data layout in the buffers.  E.g. pts, sample rate (for audio) or sample<br>
	 * aspect ratio (for video), but not width/height or channel layout.<br>
	 * Side data is also copied.<br>
	 * Original signature : <code>int av_frame_copy_props(AVFrame*, const AVFrame*)</code><br>
	 * <i>native declaration : libavutil/frame.h:558</i>
	 */
	public static int av_frame_copy_props(Pointer<AVFrame > dst, Pointer<AVFrame > src) {
		return av_frame_copy_props(Pointer.getPeer(dst), Pointer.getPeer(src));
	}
	protected native static int av_frame_copy_props(@Ptr long dst, @Ptr long src);
	/**
	 * Get the buffer reference a given data plane is stored in.<br>
	 * * @param plane index of the data plane of interest in frame->extended_data.<br>
	 * * @return the buffer reference that contains the plane or NULL if the input<br>
	 * frame is not valid.<br>
	 * Original signature : <code>AVBufferRef* av_frame_get_plane_buffer(AVFrame*, int)</code><br>
	 * <i>native declaration : libavutil/frame.h:566</i>
	 */
	public static Pointer<AVBufferRef > av_frame_get_plane_buffer(Pointer<AVFrame > frame, int plane) {
		return Pointer.pointerToAddress(av_frame_get_plane_buffer(Pointer.getPeer(frame), plane), AVBufferRef.class);
	}
	@Ptr 
	protected native static long av_frame_get_plane_buffer(@Ptr long frame, int plane);
	/**
	 * Add a new side data to a frame.<br>
	 * * @param frame a frame to which the side data should be added<br>
	 * @param type type of the added side data<br>
	 * @param size size of the side data<br>
	 * * @return newly added side data on success, NULL on error<br>
	 * Original signature : <code>AVFrameSideData* av_frame_new_side_data(AVFrame*, AVFrameSideDataType, int)</code><br>
	 * <i>native declaration : libavutil/frame.h:575</i>
	 */
	public static Pointer<AVFrameSideData > av_frame_new_side_data(Pointer<AVFrame > frame, IntValuedEnum<AvutilLibrary.AVFrameSideDataType > type, int size) {
		return Pointer.pointerToAddress(av_frame_new_side_data(Pointer.getPeer(frame), (int)type.value(), size), AVFrameSideData.class);
	}
	@Ptr 
	protected native static long av_frame_new_side_data(@Ptr long frame, int type, int size);
	/**
	 * @return a pointer to the side data of a given type on success, NULL if there<br>
	 * is no side data with such type in this frame.<br>
	 * Original signature : <code>AVFrameSideData* av_frame_get_side_data(const AVFrame*, AVFrameSideDataType)</code><br>
	 * <i>native declaration : libavutil/frame.h:581</i>
	 */
	public static Pointer<AVFrameSideData > av_frame_get_side_data(Pointer<AVFrame > frame, IntValuedEnum<AvutilLibrary.AVFrameSideDataType > type) {
		return Pointer.pointerToAddress(av_frame_get_side_data(Pointer.getPeer(frame), (int)type.value()), AVFrameSideData.class);
	}
	@Ptr 
	protected native static long av_frame_get_side_data(@Ptr long frame, int type);
	/**
	 * If side data of the supplied type exists in the frame, free it and remove it<br>
	 * from the frame.<br>
	 * Original signature : <code>void av_frame_remove_side_data(AVFrame*, AVFrameSideDataType)</code><br>
	 * <i>native declaration : libavutil/frame.h:587</i>
	 */
	public static void av_frame_remove_side_data(Pointer<AVFrame > frame, IntValuedEnum<AvutilLibrary.AVFrameSideDataType > type) {
		av_frame_remove_side_data(Pointer.getPeer(frame), (int)type.value());
	}
	protected native static void av_frame_remove_side_data(@Ptr long frame, int type);
	/**
	 * Crop the given video AVFrame according to its crop_left/crop_top/crop_right/<br>
	 * crop_bottom fields. If cropping is successful, the function will adjust the<br>
	 * data pointers and the width/height fields, and set the crop fields to 0.<br>
	 * * In all cases, the cropping boundaries will be rounded to the inherent<br>
	 * alignment of the pixel format. In some cases, such as for opaque hwaccel<br>
	 * formats, the left/top cropping is ignored. The crop fields are set to 0 even<br>
	 * if the cropping was rounded or ignored.<br>
	 * * @param frame the frame which should be cropped<br>
	 * @param flags Some combination of AV_FRAME_CROP_* flags, or 0.<br>
	 * * @return >= 0 on success, a negative AVERROR on error. If the cropping fields<br>
	 * were invalid, AVERROR(ERANGE) is returned, and nothing is changed.<br>
	 * Original signature : <code>int av_frame_apply_cropping(AVFrame*, int)</code><br>
	 * <i>native declaration : libavutil/frame.h:614</i>
	 */
	public static int av_frame_apply_cropping(Pointer<AVFrame > frame, int flags) {
		return av_frame_apply_cropping(Pointer.getPeer(frame), flags);
	}
	protected native static int av_frame_apply_cropping(@Ptr long frame, int flags);
	/**
	 * @return a string identifying the side data type<br>
	 * Original signature : <code>char* av_frame_side_data_name(AVFrameSideDataType)</code><br>
	 * <i>native declaration : libavutil/frame.h:619</i>
	 */
	public static Pointer<Byte > av_frame_side_data_name(IntValuedEnum<AvutilLibrary.AVFrameSideDataType > type) {
		return Pointer.pointerToAddress(av_frame_side_data_name((int)type.value()), Byte.class);
	}
	@Ptr 
	protected native static long av_frame_side_data_name(int type);
	/**
	 * Show the obj options.<br>
	 * * @param req_flags requested flags for the options to show. Show only the<br>
	 * options for which it is opt->flags & req_flags.<br>
	 * @param rej_flags rejected flags for the options to show. Show only the<br>
	 * options for which it is !(opt->flags & req_flags).<br>
	 * @param av_log_obj log context to use for showing the options<br>
	 * Original signature : <code>int av_opt_show2(void*, void*, int, int)</code><br>
	 * <i>native declaration : libavutil/opt.h:134</i>
	 */
	public static int av_opt_show2(Pointer<? > obj, Pointer<? > av_log_obj, int req_flags, int rej_flags) {
		return av_opt_show2(Pointer.getPeer(obj), Pointer.getPeer(av_log_obj), req_flags, rej_flags);
	}
	protected native static int av_opt_show2(@Ptr long obj, @Ptr long av_log_obj, int req_flags, int rej_flags);
	/**
	 * Set the values of all AVOption fields to their default values.<br>
	 * * @param s an AVOption-enabled struct (its first member must be a pointer to AVClass)<br>
	 * Original signature : <code>void av_opt_set_defaults(void*)</code><br>
	 * <i>native declaration : libavutil/opt.h:140</i>
	 */
	public static void av_opt_set_defaults(Pointer<? > s) {
		av_opt_set_defaults(Pointer.getPeer(s));
	}
	protected native static void av_opt_set_defaults(@Ptr long s);
	/**
	 * Set the values of all AVOption fields to their default values. Only these<br>
	 * AVOption fields for which (opt->flags & mask) == flags will have their<br>
	 * default applied to s.<br>
	 * * @param s an AVOption-enabled struct (its first member must be a pointer to AVClass)<br>
	 * @param mask combination of AV_OPT_FLAG_*<br>
	 * @param flags combination of AV_OPT_FLAG_*<br>
	 * Original signature : <code>void av_opt_set_defaults2(void*, int, int)</code><br>
	 * <i>native declaration : libavutil/opt.h:150</i>
	 */
	public static void av_opt_set_defaults2(Pointer<? > s, int mask, int flags) {
		av_opt_set_defaults2(Pointer.getPeer(s), mask, flags);
	}
	protected native static void av_opt_set_defaults2(@Ptr long s, int mask, int flags);
	/**
	 * Parse the key/value pairs list in opts. For each key/value pair<br>
	 * found, stores the value in the field in ctx that is named like the<br>
	 * key. ctx must be an AVClass context, storing is done using<br>
	 * AVOptions.<br>
	 * * @param opts options string to parse, may be NULL<br>
	 * @param key_val_sep a 0-terminated list of characters used to<br>
	 * separate key from value<br>
	 * @param pairs_sep a 0-terminated list of characters used to separate<br>
	 * two pairs from each other<br>
	 * @return the number of successfully set key/value pairs, or a negative<br>
	 * value corresponding to an AVERROR code in case of error:<br>
	 * AVERROR(EINVAL) if opts cannot be parsed,<br>
	 * the error code issued by av_opt_set() if a key/value pair<br>
	 * cannot be set<br>
	 * Original signature : <code>int av_set_options_string(void*, const char*, const char*, const char*)</code><br>
	 * <i>native declaration : libavutil/opt.h:168</i>
	 */
	public static int av_set_options_string(Pointer<? > ctx, Pointer<Byte > opts, Pointer<Byte > key_val_sep, Pointer<Byte > pairs_sep) {
		return av_set_options_string(Pointer.getPeer(ctx), Pointer.getPeer(opts), Pointer.getPeer(key_val_sep), Pointer.getPeer(pairs_sep));
	}
	protected native static int av_set_options_string(@Ptr long ctx, @Ptr long opts, @Ptr long key_val_sep, @Ptr long pairs_sep);
	/**
	 * Parse the key-value pairs list in opts. For each key=value pair found,<br>
	 * set the value of the corresponding option in ctx.<br>
	 * * @param ctx          the AVClass object to set options on<br>
	 * @param opts         the options string, key-value pairs separated by a<br>
	 *                     delimiter<br>
	 * @param shorthand    a NULL-terminated array of options names for shorthand<br>
	 *                     notation: if the first field in opts has no key part,<br>
	 *                     the key is taken from the first element of shorthand;<br>
	 *                     then again for the second, etc., until either opts is<br>
	 *                     finished, shorthand is finished or a named option is<br>
	 *                     found; after that, all options must be named<br>
	 * @param key_val_sep  a 0-terminated list of characters used to separate<br>
	 *                     key from value, for example '='<br>
	 * @param pairs_sep    a 0-terminated list of characters used to separate<br>
	 *                     two pairs from each other, for example ':' or ','<br>
	 * @return  the number of successfully set key=value pairs, or a negative<br>
	 *          value corresponding to an AVERROR code in case of error:<br>
	 *          AVERROR(EINVAL) if opts cannot be parsed,<br>
	 *          the error code issued by av_set_string3() if a key/value pair<br>
	 *          cannot be set<br>
	 * * Options names must use only the following characters: a-z A-Z 0-9 - . / _<br>
	 * Separators must use characters distinct from option names and from each<br>
	 * other.<br>
	 * Original signature : <code>int av_opt_set_from_string(void*, const char*, const const char**, const char*, const char*)</code><br>
	 * <i>native declaration : libavutil/opt.h:195</i>
	 */
	public static int av_opt_set_from_string(Pointer<? > ctx, Pointer<Byte > opts, Pointer<Pointer<Byte > > shorthand, Pointer<Byte > key_val_sep, Pointer<Byte > pairs_sep) {
		return av_opt_set_from_string(Pointer.getPeer(ctx), Pointer.getPeer(opts), Pointer.getPeer(shorthand), Pointer.getPeer(key_val_sep), Pointer.getPeer(pairs_sep));
	}
	protected native static int av_opt_set_from_string(@Ptr long ctx, @Ptr long opts, @Ptr long shorthand, @Ptr long key_val_sep, @Ptr long pairs_sep);
	/**
	 * Free all allocated objects in obj.<br>
	 * Original signature : <code>void av_opt_free(void*)</code><br>
	 * <i>native declaration : libavutil/opt.h:200</i>
	 */
	public static void av_opt_free(Pointer<? > obj) {
		av_opt_free(Pointer.getPeer(obj));
	}
	protected native static void av_opt_free(@Ptr long obj);
	/**
	 * Check whether a particular flag is set in a flags field.<br>
	 * * @param field_name the name of the flag field option<br>
	 * @param flag_name the name of the flag to check<br>
	 * @return non-zero if the flag is set, zero if the flag isn't set,<br>
	 *         isn't of the right type, or the flags field doesn't exist.<br>
	 * Original signature : <code>int av_opt_flag_is_set(void*, const char*, const char*)</code><br>
	 * <i>native declaration : libavutil/opt.h:209</i>
	 */
	public static int av_opt_flag_is_set(Pointer<? > obj, Pointer<Byte > field_name, Pointer<Byte > flag_name) {
		return av_opt_flag_is_set(Pointer.getPeer(obj), Pointer.getPeer(field_name), Pointer.getPeer(flag_name));
	}
	protected native static int av_opt_flag_is_set(@Ptr long obj, @Ptr long field_name, @Ptr long flag_name);
	/**
	 * Set all the options from a given dictionary on an object.<br>
	 * * @param obj a struct whose first element is a pointer to AVClass<br>
	 * @param options options to process. This dictionary will be freed and replaced<br>
	 *                by a new one containing all options not found in obj.<br>
	 *                Of course this new dictionary needs to be freed by caller<br>
	 *                with av_dict_free().<br>
	 * * @return 0 on success, a negative AVERROR if some option was found in obj,<br>
	 *         but could not be set.<br>
	 * * @see av_dict_copy()<br>
	 * Original signature : <code>int av_opt_set_dict(void*, AVDictionary**)</code><br>
	 * <i>native declaration : libavutil/opt.h:222</i>
	 */
	public static int av_opt_set_dict(Pointer<? > obj, Pointer<Pointer<AVDictionary > > options) {
		return av_opt_set_dict(Pointer.getPeer(obj), Pointer.getPeer(options));
	}
	protected native static int av_opt_set_dict(@Ptr long obj, @Ptr long options);
	/**
	 * Set all the options from a given dictionary on an object.<br>
	 * * @param obj a struct whose first element is a pointer to AVClass<br>
	 * @param options options to process. This dictionary will be freed and replaced<br>
	 *                by a new one containing all options not found in obj.<br>
	 *                Of course this new dictionary needs to be freed by caller<br>
	 *                with av_dict_free().<br>
	 * @param search_flags A combination of AV_OPT_SEARCH_*.<br>
	 * * @return 0 on success, a negative AVERROR if some option was found in obj,<br>
	 *         but could not be set.<br>
	 * * @see av_dict_copy()<br>
	 * Original signature : <code>int av_opt_set_dict2(void*, AVDictionary**, int)</code><br>
	 * <i>native declaration : libavutil/opt.h:236</i>
	 */
	public static int av_opt_set_dict2(Pointer<? > obj, Pointer<Pointer<AVDictionary > > options, int search_flags) {
		return av_opt_set_dict2(Pointer.getPeer(obj), Pointer.getPeer(options), search_flags);
	}
	protected native static int av_opt_set_dict2(@Ptr long obj, @Ptr long options, int search_flags);
	/**
	 * Extract a key-value pair from the beginning of a string.<br>
	 * * @param ropts        pointer to the options string, will be updated to<br>
	 *                     point to the rest of the string (one of the pairs_sep<br>
	 *                     or the final NUL)<br>
	 * @param key_val_sep  a 0-terminated list of characters used to separate<br>
	 *                     key from value, for example '='<br>
	 * @param pairs_sep    a 0-terminated list of characters used to separate<br>
	 *                     two pairs from each other, for example ':' or ','<br>
	 * @param flags        flags; see the AV_OPT_FLAG_* values below<br>
	 * @param rkey         parsed key; must be freed using av_free()<br>
	 * @param rval         parsed value; must be freed using av_free()<br>
	 * * @return  >=0 for success, or a negative value corresponding to an<br>
	 *          AVERROR code in case of error; in particular:<br>
	 *          AVERROR(EINVAL) if no key is present<br>
	 * Original signature : <code>int av_opt_get_key_value(const char**, const char*, const char*, unsigned, char**, char**)</code><br>
	 * <i>native declaration : libavutil/opt.h:254</i>
	 */
	public static int av_opt_get_key_value(Pointer<Pointer<Byte > > ropts, Pointer<Byte > key_val_sep, Pointer<Byte > pairs_sep, int flags, Pointer<Pointer<Byte > > rkey, Pointer<Pointer<Byte > > rval) {
		return av_opt_get_key_value(Pointer.getPeer(ropts), Pointer.getPeer(key_val_sep), Pointer.getPeer(pairs_sep), flags, Pointer.getPeer(rkey), Pointer.getPeer(rval));
	}
	protected native static int av_opt_get_key_value(@Ptr long ropts, @Ptr long key_val_sep, @Ptr long pairs_sep, int flags, @Ptr long rkey, @Ptr long rval);
	/**
	 * @defgroup opt_eval_funcs Evaluating option strings<br>
	 * @{<br>
	 * This group of functions can be used to evaluate option strings<br>
	 * and get numbers out of them. They do the same thing as av_opt_set(),<br>
	 * except the result is written into the caller-supplied pointer.<br>
	 * * @param obj a struct whose first element is a pointer to AVClass.<br>
	 * @param o an option for which the string is to be evaluated.<br>
	 * @param val string to be evaluated.<br>
	 * @param *_out value of the string will be written here.<br>
	 * * @return 0 on success, a negative number on failure.<br>
	 * Original signature : <code>int av_opt_eval_flags(void*, const AVOption*, const char*, int*)</code><br>
	 * <i>native declaration : libavutil/opt.h:275</i>
	 */
	public static int av_opt_eval_flags(Pointer<? > obj, Pointer<AVOption > o, Pointer<Byte > val, Pointer<Integer > flags_out) {
		return av_opt_eval_flags(Pointer.getPeer(obj), Pointer.getPeer(o), Pointer.getPeer(val), Pointer.getPeer(flags_out));
	}
	protected native static int av_opt_eval_flags(@Ptr long obj, @Ptr long o, @Ptr long val, @Ptr long flags_out);
	/**
	 * Original signature : <code>int av_opt_eval_int(void*, const AVOption*, const char*, int*)</code><br>
	 * <i>native declaration : libavutil/opt.h:277</i>
	 */
	public static int av_opt_eval_int(Pointer<? > obj, Pointer<AVOption > o, Pointer<Byte > val, Pointer<Integer > int_out) {
		return av_opt_eval_int(Pointer.getPeer(obj), Pointer.getPeer(o), Pointer.getPeer(val), Pointer.getPeer(int_out));
	}
	protected native static int av_opt_eval_int(@Ptr long obj, @Ptr long o, @Ptr long val, @Ptr long int_out);
	/**
	 * Original signature : <code>int av_opt_eval_int64(void*, const AVOption*, const char*, int64_t*)</code><br>
	 * <i>native declaration : libavutil/opt.h:279</i>
	 */
	public static int av_opt_eval_int64(Pointer<? > obj, Pointer<AVOption > o, Pointer<Byte > val, Pointer<Long > int64_out) {
		return av_opt_eval_int64(Pointer.getPeer(obj), Pointer.getPeer(o), Pointer.getPeer(val), Pointer.getPeer(int64_out));
	}
	protected native static int av_opt_eval_int64(@Ptr long obj, @Ptr long o, @Ptr long val, @Ptr long int64_out);
	/**
	 * Original signature : <code>int av_opt_eval_float(void*, const AVOption*, const char*, float*)</code><br>
	 * <i>native declaration : libavutil/opt.h:281</i>
	 */
	public static int av_opt_eval_float(Pointer<? > obj, Pointer<AVOption > o, Pointer<Byte > val, Pointer<Float > float_out) {
		return av_opt_eval_float(Pointer.getPeer(obj), Pointer.getPeer(o), Pointer.getPeer(val), Pointer.getPeer(float_out));
	}
	protected native static int av_opt_eval_float(@Ptr long obj, @Ptr long o, @Ptr long val, @Ptr long float_out);
	/**
	 * Original signature : <code>int av_opt_eval_double(void*, const AVOption*, const char*, double*)</code><br>
	 * <i>native declaration : libavutil/opt.h:283</i>
	 */
	public static int av_opt_eval_double(Pointer<? > obj, Pointer<AVOption > o, Pointer<Byte > val, Pointer<Double > double_out) {
		return av_opt_eval_double(Pointer.getPeer(obj), Pointer.getPeer(o), Pointer.getPeer(val), Pointer.getPeer(double_out));
	}
	protected native static int av_opt_eval_double(@Ptr long obj, @Ptr long o, @Ptr long val, @Ptr long double_out);
	/**
	 * Original signature : <code>int av_opt_eval_q(void*, const AVOption*, const char*, AVRational*)</code><br>
	 * <i>native declaration : libavutil/opt.h:285</i>
	 */
	public static int av_opt_eval_q(Pointer<? > obj, Pointer<AVOption > o, Pointer<Byte > val, Pointer<AVRational > q_out) {
		return av_opt_eval_q(Pointer.getPeer(obj), Pointer.getPeer(o), Pointer.getPeer(val), Pointer.getPeer(q_out));
	}
	protected native static int av_opt_eval_q(@Ptr long obj, @Ptr long o, @Ptr long val, @Ptr long q_out);
	/**
	 * Look for an option in an object. Consider only options which<br>
	 * have all the specified flags set.<br>
	 * * @param[in] obj A pointer to a struct whose first element is a<br>
	 *                pointer to an AVClass.<br>
	 *                Alternatively a double pointer to an AVClass, if<br>
	 *                AV_OPT_SEARCH_FAKE_OBJ search flag is set.<br>
	 * @param[in] name The name of the option to look for.<br>
	 * @param[in] unit When searching for named constants, name of the unit<br>
	 *                 it belongs to.<br>
	 * @param opt_flags Find only options with all the specified flags set (AV_OPT_FLAG).<br>
	 * @param search_flags A combination of AV_OPT_SEARCH_*.<br>
	 * * @return A pointer to the option found, or NULL if no option<br>
	 *         was found.<br>
	 * * @note Options found with AV_OPT_SEARCH_CHILDREN flag may not be settable<br>
	 * directly with av_opt_set(). Use special calls which take an options<br>
	 * AVDictionary (e.g. avformat_open_input()) to set options found with this<br>
	 * flag.<br>
	 * Original signature : <code>AVOption* av_opt_find(void*, const char*, const char*, int, int)</code><br>
	 * <i>native declaration : libavutil/opt.h:306</i>
	 */
	public static Pointer<AVOption > av_opt_find(Pointer<? > obj, Pointer<Byte > name, Pointer<Byte > unit, int opt_flags, int search_flags) {
		return Pointer.pointerToAddress(av_opt_find(Pointer.getPeer(obj), Pointer.getPeer(name), Pointer.getPeer(unit), opt_flags, search_flags), AVOption.class);
	}
	@Ptr 
	protected native static long av_opt_find(@Ptr long obj, @Ptr long name, @Ptr long unit, int opt_flags, int search_flags);
	/**
	 * Look for an option in an object. Consider only options which<br>
	 * have all the specified flags set.<br>
	 * * @param[in] obj A pointer to a struct whose first element is a<br>
	 *                pointer to an AVClass.<br>
	 *                Alternatively a double pointer to an AVClass, if<br>
	 *                AV_OPT_SEARCH_FAKE_OBJ search flag is set.<br>
	 * @param[in] name The name of the option to look for.<br>
	 * @param[in] unit When searching for named constants, name of the unit<br>
	 *                 it belongs to.<br>
	 * @param opt_flags Find only options with all the specified flags set (AV_OPT_FLAG).<br>
	 * @param search_flags A combination of AV_OPT_SEARCH_*.<br>
	 * @param[out] target_obj if non-NULL, an object to which the option belongs will be<br>
	 * written here. It may be different from obj if AV_OPT_SEARCH_CHILDREN is present<br>
	 * in search_flags. This parameter is ignored if search_flags contain<br>
	 * AV_OPT_SEARCH_FAKE_OBJ.<br>
	 * * @return A pointer to the option found, or NULL if no option<br>
	 *         was found.<br>
	 * Original signature : <code>AVOption* av_opt_find2(void*, const char*, const char*, int, int, void**)</code><br>
	 * <i>native declaration : libavutil/opt.h:327</i>
	 */
	public static Pointer<AVOption > av_opt_find2(Pointer<? > obj, Pointer<Byte > name, Pointer<Byte > unit, int opt_flags, int search_flags, Pointer<Pointer<? > > target_obj) {
		return Pointer.pointerToAddress(av_opt_find2(Pointer.getPeer(obj), Pointer.getPeer(name), Pointer.getPeer(unit), opt_flags, search_flags, Pointer.getPeer(target_obj)), AVOption.class);
	}
	@Ptr 
	protected native static long av_opt_find2(@Ptr long obj, @Ptr long name, @Ptr long unit, int opt_flags, int search_flags, @Ptr long target_obj);
	/**
	 * Iterate over all AVOptions belonging to obj.<br>
	 * * @param obj an AVOptions-enabled struct or a double pointer to an<br>
	 *            AVClass describing it.<br>
	 * @param prev result of the previous call to av_opt_next() on this object<br>
	 *             or NULL<br>
	 * @return next AVOption or NULL<br>
	 * Original signature : <code>AVOption* av_opt_next(const void*, const AVOption*)</code><br>
	 * <i>native declaration : libavutil/opt.h:337</i>
	 */
	public static Pointer<AVOption > av_opt_next(Pointer<? > obj, Pointer<AVOption > prev) {
		return Pointer.pointerToAddress(av_opt_next(Pointer.getPeer(obj), Pointer.getPeer(prev)), AVOption.class);
	}
	@Ptr 
	protected native static long av_opt_next(@Ptr long obj, @Ptr long prev);
	/**
	 * Iterate over AVOptions-enabled children of obj.<br>
	 * * @param prev result of a previous call to this function or NULL<br>
	 * @return next AVOptions-enabled child or NULL<br>
	 * Original signature : <code>void* av_opt_child_next(void*, void*)</code><br>
	 * <i>native declaration : libavutil/opt.h:344</i>
	 */
	public static Pointer<? > av_opt_child_next(Pointer<? > obj, Pointer<? > prev) {
		return Pointer.pointerToAddress(av_opt_child_next(Pointer.getPeer(obj), Pointer.getPeer(prev)));
	}
	@Ptr 
	protected native static long av_opt_child_next(@Ptr long obj, @Ptr long prev);
	/**
	 * Iterate over potential AVOptions-enabled children of parent.<br>
	 * * @param prev result of a previous call to this function or NULL<br>
	 * @return AVClass corresponding to next potential child or NULL<br>
	 * Original signature : <code>AVClass* av_opt_child_class_next(const AVClass*, const AVClass*)</code><br>
	 * <i>native declaration : libavutil/opt.h:351</i>
	 */
	public static Pointer<AVClass > av_opt_child_class_next(Pointer<AVClass > parent, Pointer<AVClass > prev) {
		return Pointer.pointerToAddress(av_opt_child_class_next(Pointer.getPeer(parent), Pointer.getPeer(prev)), AVClass.class);
	}
	@Ptr 
	protected native static long av_opt_child_class_next(@Ptr long parent, @Ptr long prev);
	/**
	 * @defgroup opt_set_funcs Option setting functions<br>
	 * @{<br>
	 * Those functions set the field of obj with the given name to value.<br>
	 * * @param[in] obj A struct whose first element is a pointer to an AVClass.<br>
	 * @param[in] name the name of the field to set<br>
	 * @param[in] val The value to set. In case of av_opt_set() if the field is not<br>
	 * of a string type, then the given string is parsed.<br>
	 * SI postfixes and some named scalars are supported.<br>
	 * If the field is of a numeric type, it has to be a numeric or named<br>
	 * scalar. Behavior with more than one scalar and +- infix operators<br>
	 * is undefined.<br>
	 * If the field is of a flags type, it has to be a sequence of numeric<br>
	 * scalars or named flags separated by '+' or '-'. Prefixing a flag<br>
	 * with '+' causes it to be set without affecting the other flags;<br>
	 * similarly, '-' unsets a flag.<br>
	 * @param search_flags flags passed to av_opt_find2. I.e. if AV_OPT_SEARCH_CHILDREN<br>
	 * is passed here, then the option may be set on a child of obj.<br>
	 * * @return 0 if the value has been set, or an AVERROR code in case of<br>
	 * error:<br>
	 * AVERROR_OPTION_NOT_FOUND if no matching option exists<br>
	 * AVERROR(ERANGE) if the value is out of range<br>
	 * AVERROR(EINVAL) if the value is not valid<br>
	 * Original signature : <code>int av_opt_set(void*, const char*, const char*, int)</code><br>
	 * <i>native declaration : libavutil/opt.h:377</i>
	 */
	public static int av_opt_set(Pointer<? > obj, Pointer<Byte > name, Pointer<Byte > val, int search_flags) {
		return av_opt_set(Pointer.getPeer(obj), Pointer.getPeer(name), Pointer.getPeer(val), search_flags);
	}
	protected native static int av_opt_set(@Ptr long obj, @Ptr long name, @Ptr long val, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_int(void*, const char*, int64_t, int)</code><br>
	 * <i>native declaration : libavutil/opt.h:379</i>
	 */
	public static int av_opt_set_int(Pointer<? > obj, Pointer<Byte > name, long val, int search_flags) {
		return av_opt_set_int(Pointer.getPeer(obj), Pointer.getPeer(name), val, search_flags);
	}
	protected native static int av_opt_set_int(@Ptr long obj, @Ptr long name, long val, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_double(void*, const char*, double, int)</code><br>
	 * <i>native declaration : libavutil/opt.h:381</i>
	 */
	public static int av_opt_set_double(Pointer<? > obj, Pointer<Byte > name, double val, int search_flags) {
		return av_opt_set_double(Pointer.getPeer(obj), Pointer.getPeer(name), val, search_flags);
	}
	protected native static int av_opt_set_double(@Ptr long obj, @Ptr long name, double val, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_q(void*, const char*, AVRational, int)</code><br>
	 * <i>native declaration : libavutil/opt.h:383</i>
	 */
	public static int av_opt_set_q(Pointer<? > obj, Pointer<Byte > name, AVRational val, int search_flags) {
		return av_opt_set_q(Pointer.getPeer(obj), Pointer.getPeer(name), val, search_flags);
	}
	protected native static int av_opt_set_q(@Ptr long obj, @Ptr long name, AVRational val, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_bin(void*, const char*, const uint8_t*, int, int)</code><br>
	 * <i>native declaration : libavutil/opt.h:385</i>
	 */
	public static int av_opt_set_bin(Pointer<? > obj, Pointer<Byte > name, Pointer<Byte > val, int size, int search_flags) {
		return av_opt_set_bin(Pointer.getPeer(obj), Pointer.getPeer(name), Pointer.getPeer(val), size, search_flags);
	}
	protected native static int av_opt_set_bin(@Ptr long obj, @Ptr long name, @Ptr long val, int size, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_image_size(void*, const char*, int, int, int)</code><br>
	 * <i>native declaration : libavutil/opt.h:387</i>
	 */
	public static int av_opt_set_image_size(Pointer<? > obj, Pointer<Byte > name, int w, int h, int search_flags) {
		return av_opt_set_image_size(Pointer.getPeer(obj), Pointer.getPeer(name), w, h, search_flags);
	}
	protected native static int av_opt_set_image_size(@Ptr long obj, @Ptr long name, int w, int h, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_pixel_fmt(void*, const char*, AVPixelFormat, int)</code><br>
	 * <i>native declaration : libavutil/opt.h:389</i>
	 */
	public static int av_opt_set_pixel_fmt(Pointer<? > obj, Pointer<Byte > name, IntValuedEnum<AvutilLibrary.AVPixelFormat > fmt, int search_flags) {
		return av_opt_set_pixel_fmt(Pointer.getPeer(obj), Pointer.getPeer(name), (int)fmt.value(), search_flags);
	}
	protected native static int av_opt_set_pixel_fmt(@Ptr long obj, @Ptr long name, int fmt, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_sample_fmt(void*, const char*, AVSampleFormat, int)</code><br>
	 * <i>native declaration : libavutil/opt.h:391</i>
	 */
	public static int av_opt_set_sample_fmt(Pointer<? > obj, Pointer<Byte > name, IntValuedEnum<AvutilLibrary.AVSampleFormat > fmt, int search_flags) {
		return av_opt_set_sample_fmt(Pointer.getPeer(obj), Pointer.getPeer(name), (int)fmt.value(), search_flags);
	}
	protected native static int av_opt_set_sample_fmt(@Ptr long obj, @Ptr long name, int fmt, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_video_rate(void*, const char*, AVRational, int)</code><br>
	 * <i>native declaration : libavutil/opt.h:393</i>
	 */
	public static int av_opt_set_video_rate(Pointer<? > obj, Pointer<Byte > name, AVRational val, int search_flags) {
		return av_opt_set_video_rate(Pointer.getPeer(obj), Pointer.getPeer(name), val, search_flags);
	}
	protected native static int av_opt_set_video_rate(@Ptr long obj, @Ptr long name, AVRational val, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_channel_layout(void*, const char*, int64_t, int)</code><br>
	 * <i>native declaration : libavutil/opt.h:395</i>
	 */
	public static int av_opt_set_channel_layout(Pointer<? > obj, Pointer<Byte > name, long ch_layout, int search_flags) {
		return av_opt_set_channel_layout(Pointer.getPeer(obj), Pointer.getPeer(name), ch_layout, search_flags);
	}
	protected native static int av_opt_set_channel_layout(@Ptr long obj, @Ptr long name, long ch_layout, int search_flags);
	/**
	 * @note Any old dictionary present is discarded and replaced with a copy of the new one. The<br>
	 * caller still owns val is and responsible for freeing it.<br>
	 * Original signature : <code>int av_opt_set_dict_val(void*, const char*, const AVDictionary*, int)</code><br>
	 * <i>native declaration : libavutil/opt.h:401</i>
	 */
	public static int av_opt_set_dict_val(Pointer<? > obj, Pointer<Byte > name, Pointer<AVDictionary > val, int search_flags) {
		return av_opt_set_dict_val(Pointer.getPeer(obj), Pointer.getPeer(name), Pointer.getPeer(val), search_flags);
	}
	protected native static int av_opt_set_dict_val(@Ptr long obj, @Ptr long name, @Ptr long val, int search_flags);
	/**
	 * @note the returned string will be av_malloc()ed and must be av_free()ed by the caller<br>
	 * * @note if AV_OPT_ALLOW_NULL is set in search_flags in av_opt_get, and the option has<br>
	 * AV_OPT_TYPE_STRING or AV_OPT_TYPE_BINARY and is set to NULL, *out_val will be set<br>
	 * to NULL instead of an allocated empty string.<br>
	 * Original signature : <code>int av_opt_get(void*, const char*, int, uint8_t**)</code><br>
	 * <i>native declaration : libavutil/opt.h:409</i>
	 */
	public static int av_opt_get(Pointer<? > obj, Pointer<Byte > name, int search_flags, Pointer<Pointer<Byte > > out_val) {
		return av_opt_get(Pointer.getPeer(obj), Pointer.getPeer(name), search_flags, Pointer.getPeer(out_val));
	}
	protected native static int av_opt_get(@Ptr long obj, @Ptr long name, int search_flags, @Ptr long out_val);
	/**
	 * Original signature : <code>int av_opt_get_int(void*, const char*, int, int64_t*)</code><br>
	 * <i>native declaration : libavutil/opt.h:411</i>
	 */
	public static int av_opt_get_int(Pointer<? > obj, Pointer<Byte > name, int search_flags, Pointer<Long > out_val) {
		return av_opt_get_int(Pointer.getPeer(obj), Pointer.getPeer(name), search_flags, Pointer.getPeer(out_val));
	}
	protected native static int av_opt_get_int(@Ptr long obj, @Ptr long name, int search_flags, @Ptr long out_val);
	/**
	 * Original signature : <code>int av_opt_get_double(void*, const char*, int, double*)</code><br>
	 * <i>native declaration : libavutil/opt.h:413</i>
	 */
	public static int av_opt_get_double(Pointer<? > obj, Pointer<Byte > name, int search_flags, Pointer<Double > out_val) {
		return av_opt_get_double(Pointer.getPeer(obj), Pointer.getPeer(name), search_flags, Pointer.getPeer(out_val));
	}
	protected native static int av_opt_get_double(@Ptr long obj, @Ptr long name, int search_flags, @Ptr long out_val);
	/**
	 * Original signature : <code>int av_opt_get_q(void*, const char*, int, AVRational*)</code><br>
	 * <i>native declaration : libavutil/opt.h:415</i>
	 */
	public static int av_opt_get_q(Pointer<? > obj, Pointer<Byte > name, int search_flags, Pointer<AVRational > out_val) {
		return av_opt_get_q(Pointer.getPeer(obj), Pointer.getPeer(name), search_flags, Pointer.getPeer(out_val));
	}
	protected native static int av_opt_get_q(@Ptr long obj, @Ptr long name, int search_flags, @Ptr long out_val);
	/**
	 * Original signature : <code>int av_opt_get_image_size(void*, const char*, int, int*, int*)</code><br>
	 * <i>native declaration : libavutil/opt.h:417</i>
	 */
	public static int av_opt_get_image_size(Pointer<? > obj, Pointer<Byte > name, int search_flags, Pointer<Integer > w_out, Pointer<Integer > h_out) {
		return av_opt_get_image_size(Pointer.getPeer(obj), Pointer.getPeer(name), search_flags, Pointer.getPeer(w_out), Pointer.getPeer(h_out));
	}
	protected native static int av_opt_get_image_size(@Ptr long obj, @Ptr long name, int search_flags, @Ptr long w_out, @Ptr long h_out);
	/**
	 * Original signature : <code>int av_opt_get_pixel_fmt(void*, const char*, int, AVPixelFormat*)</code><br>
	 * <i>native declaration : libavutil/opt.h:419</i>
	 */
	public static int av_opt_get_pixel_fmt(Pointer<? > obj, Pointer<Byte > name, int search_flags, Pointer<IntValuedEnum<AvutilLibrary.AVPixelFormat > > out_fmt) {
		return av_opt_get_pixel_fmt(Pointer.getPeer(obj), Pointer.getPeer(name), search_flags, Pointer.getPeer(out_fmt));
	}
	protected native static int av_opt_get_pixel_fmt(@Ptr long obj, @Ptr long name, int search_flags, @Ptr long out_fmt);
	/**
	 * Original signature : <code>int av_opt_get_sample_fmt(void*, const char*, int, AVSampleFormat*)</code><br>
	 * <i>native declaration : libavutil/opt.h:421</i>
	 */
	public static int av_opt_get_sample_fmt(Pointer<? > obj, Pointer<Byte > name, int search_flags, Pointer<IntValuedEnum<AvutilLibrary.AVSampleFormat > > out_fmt) {
		return av_opt_get_sample_fmt(Pointer.getPeer(obj), Pointer.getPeer(name), search_flags, Pointer.getPeer(out_fmt));
	}
	protected native static int av_opt_get_sample_fmt(@Ptr long obj, @Ptr long name, int search_flags, @Ptr long out_fmt);
	/**
	 * Original signature : <code>int av_opt_get_video_rate(void*, const char*, int, AVRational*)</code><br>
	 * <i>native declaration : libavutil/opt.h:423</i>
	 */
	public static int av_opt_get_video_rate(Pointer<? > obj, Pointer<Byte > name, int search_flags, Pointer<AVRational > out_val) {
		return av_opt_get_video_rate(Pointer.getPeer(obj), Pointer.getPeer(name), search_flags, Pointer.getPeer(out_val));
	}
	protected native static int av_opt_get_video_rate(@Ptr long obj, @Ptr long name, int search_flags, @Ptr long out_val);
	/**
	 * Original signature : <code>int av_opt_get_channel_layout(void*, const char*, int, int64_t*)</code><br>
	 * <i>native declaration : libavutil/opt.h:425</i>
	 */
	public static int av_opt_get_channel_layout(Pointer<? > obj, Pointer<Byte > name, int search_flags, Pointer<Long > ch_layout) {
		return av_opt_get_channel_layout(Pointer.getPeer(obj), Pointer.getPeer(name), search_flags, Pointer.getPeer(ch_layout));
	}
	protected native static int av_opt_get_channel_layout(@Ptr long obj, @Ptr long name, int search_flags, @Ptr long ch_layout);
	/**
	 * @param[out] out_val The returned dictionary is a copy of the actual value and must<br>
	 * be freed with av_dict_free() by the caller<br>
	 * Original signature : <code>int av_opt_get_dict_val(void*, const char*, int, AVDictionary**)</code><br>
	 * <i>native declaration : libavutil/opt.h:431</i>
	 */
	public static int av_opt_get_dict_val(Pointer<? > obj, Pointer<Byte > name, int search_flags, Pointer<Pointer<AVDictionary > > out_val) {
		return av_opt_get_dict_val(Pointer.getPeer(obj), Pointer.getPeer(name), search_flags, Pointer.getPeer(out_val));
	}
	protected native static int av_opt_get_dict_val(@Ptr long obj, @Ptr long name, int search_flags, @Ptr long out_val);
	/**
	 * Gets a pointer to the requested field in a struct.<br>
	 * This function allows accessing a struct even when its fields are moved or<br>
	 * renamed since the application making the access has been compiled,<br>
	 * * @returns a pointer to the field, it can be cast to the correct type and read<br>
	 *          or written to.<br>
	 * Original signature : <code>void* av_opt_ptr(const AVClass*, void*, const char*)</code><br>
	 * <i>native declaration : libavutil/opt.h:440</i>
	 */
	public static Pointer<? > av_opt_ptr(Pointer<AVClass > avclass, Pointer<? > obj, Pointer<Byte > name) {
		return Pointer.pointerToAddress(av_opt_ptr(Pointer.getPeer(avclass), Pointer.getPeer(obj), Pointer.getPeer(name)));
	}
	@Ptr 
	protected native static long av_opt_ptr(@Ptr long avclass, @Ptr long obj, @Ptr long name);
	/**
	 * Free an AVOptionRanges struct and set it to NULL.<br>
	 * Original signature : <code>void av_opt_freep_ranges(AVOptionRanges**)</code><br>
	 * <i>native declaration : libavutil/opt.h:445</i>
	 */
	public static void av_opt_freep_ranges(Pointer<Pointer<AVOptionRanges > > ranges) {
		av_opt_freep_ranges(Pointer.getPeer(ranges));
	}
	protected native static void av_opt_freep_ranges(@Ptr long ranges);
	/**
	 * Get a list of allowed ranges for the given option.<br>
	 * * The returned list may depend on other fields in obj like for example profile.<br>
	 * * @param flags is a bitmask of flags, undefined flags should not be set and should be ignored<br>
	 *              AV_OPT_SEARCH_FAKE_OBJ indicates that the obj is a double pointer to a AVClass instead of a full instance<br>
	 *              AV_OPT_MULTI_COMPONENT_RANGE indicates that function may return more than one component, @see AVOptionRanges<br>
	 * * The result must be freed with av_opt_freep_ranges.<br>
	 * * @return number of compontents returned on success, a negative errro code otherwise<br>
	 * Original signature : <code>int av_opt_query_ranges(AVOptionRanges**, void*, const char*, int)</code><br>
	 * <i>native declaration : libavutil/opt.h:456</i>
	 */
	public static int av_opt_query_ranges(Pointer<Pointer<AVOptionRanges > > AVOptionRangesPtrPtr1, Pointer<? > obj, Pointer<Byte > key, int flags) {
		return av_opt_query_ranges(Pointer.getPeer(AVOptionRangesPtrPtr1), Pointer.getPeer(obj), Pointer.getPeer(key), flags);
	}
	protected native static int av_opt_query_ranges(@Ptr long AVOptionRangesPtrPtr1, @Ptr long obj, @Ptr long key, int flags);
	/**
	 * Copy options from src object into dest object.<br>
	 * * Options that require memory allocation (e.g. string or binary) are malloc'ed in dest object.<br>
	 * Original memory allocated for such options is freed unless both src and dest options points to the same memory.<br>
	 * * @param dest Object to copy from<br>
	 * @param src  Object to copy into<br>
	 * @return 0 on success, negative on error<br>
	 * Original signature : <code>int av_opt_copy(void*, const void*)</code><br>
	 * <i>native declaration : libavutil/opt.h:466</i>
	 */
	public static int av_opt_copy(Pointer<? > dest, Pointer<? > src) {
		return av_opt_copy(Pointer.getPeer(dest), Pointer.getPeer(src));
	}
	protected native static int av_opt_copy(@Ptr long dest, @Ptr long src);
	/**
	 * Get a default list of allowed ranges for the given option.<br>
	 * * This list is constructed without using the AVClass.query_ranges() callback<br>
	 * and can be used as fallback from within the callback.<br>
	 * * @param flags is a bitmask of flags, undefined flags should not be set and should be ignored<br>
	 *              AV_OPT_SEARCH_FAKE_OBJ indicates that the obj is a double pointer to a AVClass instead of a full instance<br>
	 *              AV_OPT_MULTI_COMPONENT_RANGE indicates that function may return more than one component, @see AVOptionRanges<br>
	 * * The result must be freed with av_opt_free_ranges.<br>
	 * * @return number of compontents returned on success, a negative errro code otherwise<br>
	 * Original signature : <code>int av_opt_query_ranges_default(AVOptionRanges**, void*, const char*, int)</code><br>
	 * <i>native declaration : libavutil/opt.h:478</i>
	 */
	public static int av_opt_query_ranges_default(Pointer<Pointer<AVOptionRanges > > AVOptionRangesPtrPtr1, Pointer<? > obj, Pointer<Byte > key, int flags) {
		return av_opt_query_ranges_default(Pointer.getPeer(AVOptionRangesPtrPtr1), Pointer.getPeer(obj), Pointer.getPeer(key), flags);
	}
	protected native static int av_opt_query_ranges_default(@Ptr long AVOptionRangesPtrPtr1, @Ptr long obj, @Ptr long key, int flags);
	/**
	 * Check if given option is set to its default value.<br>
	 * * Options o must belong to the obj. This function must not be called to check child's options state.<br>
	 * @see av_opt_is_set_to_default_by_name().<br>
	 * * @param obj  AVClass object to check option on<br>
	 * @param o    option to be checked<br>
	 * @return     >0 when option is set to its default,<br>
	 *              0 when option is not set its default,<br>
	 *             <0 on error<br>
	 * Original signature : <code>int av_opt_is_set_to_default(void*, const AVOption*)</code><br>
	 * <i>native declaration : libavutil/opt.h:490</i>
	 */
	public static int av_opt_is_set_to_default(Pointer<? > obj, Pointer<AVOption > o) {
		return av_opt_is_set_to_default(Pointer.getPeer(obj), Pointer.getPeer(o));
	}
	protected native static int av_opt_is_set_to_default(@Ptr long obj, @Ptr long o);
	/**
	 * Check if given option is set to its default value.<br>
	 * * @param obj          AVClass object to check option on<br>
	 * @param name         option name<br>
	 * @param search_flags combination of AV_OPT_SEARCH_*<br>
	 * @return             >0 when option is set to its default,<br>
	 *                     0 when option is not set its default,<br>
	 *                     <0 on error<br>
	 * Original signature : <code>int av_opt_is_set_to_default_by_name(void*, const char*, int)</code><br>
	 * <i>native declaration : libavutil/opt.h:501</i>
	 */
	public static int av_opt_is_set_to_default_by_name(Pointer<? > obj, Pointer<Byte > name, int search_flags) {
		return av_opt_is_set_to_default_by_name(Pointer.getPeer(obj), Pointer.getPeer(name), search_flags);
	}
	protected native static int av_opt_is_set_to_default_by_name(@Ptr long obj, @Ptr long name, int search_flags);
	/**
	 * Serialize object's options.<br>
	 * * Create a string containing object's serialized options.<br>
	 * Such string may be passed back to av_opt_set_from_string() in order to restore option values.<br>
	 * A key/value or pairs separator occurring in the serialized value or<br>
	 * name string are escaped through the av_escape() function.<br>
	 * * @param[in]  obj           AVClass object to serialize<br>
	 * @param[in]  opt_flags     serialize options with all the specified flags set (AV_OPT_FLAG)<br>
	 * @param[in]  flags         combination of AV_OPT_SERIALIZE_* flags<br>
	 * @param[out] buffer        Pointer to buffer that will be allocated with string containg serialized options.<br>
	 *                           Buffer must be freed by the caller when is no longer needed.<br>
	 * @param[in]  key_val_sep   character used to separate key from value<br>
	 * @param[in]  pairs_sep     character used to separate two pairs from each other<br>
	 * @return                   >= 0 on success, negative on error<br>
	 * @warning Separators cannot be neither '\\' nor '\0'. They also cannot be the same.<br>
	 * Original signature : <code>int av_opt_serialize(void*, int, int, char**, const char, const char)</code><br>
	 * <i>native declaration : libavutil/opt.h:519</i>
	 */
	public static int av_opt_serialize(Pointer<? > obj, int opt_flags, int flags, Pointer<Pointer<Byte > > buffer, byte key_val_sep, byte pairs_sep) {
		return av_opt_serialize(Pointer.getPeer(obj), opt_flags, flags, Pointer.getPeer(buffer), key_val_sep, pairs_sep);
	}
	protected native static int av_opt_serialize(@Ptr long obj, int opt_flags, int flags, @Ptr long buffer, byte key_val_sep, byte pairs_sep);
	/**
	 * Return the number of bits per pixel used by the pixel format<br>
	 * described by pixdesc. Note that this is not the same as the number<br>
	 * of bits per sample.<br>
	 * * The returned number of bits refers to the number of bits actually<br>
	 * used for storing the pixel information, that is padding bits are<br>
	 * not counted.<br>
	 * Original signature : <code>int av_get_bits_per_pixel(const AVPixFmtDescriptor*)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:78</i>
	 */
	public static int av_get_bits_per_pixel(Pointer<AVPixFmtDescriptor > pixdesc) {
		return av_get_bits_per_pixel(Pointer.getPeer(pixdesc));
	}
	protected native static int av_get_bits_per_pixel(@Ptr long pixdesc);
	/**
	 * Return the number of bits per pixel for the pixel format<br>
	 * described by pixdesc, including any padding or unused bits.<br>
	 * Original signature : <code>int av_get_padded_bits_per_pixel(const AVPixFmtDescriptor*)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:84</i>
	 */
	public static int av_get_padded_bits_per_pixel(Pointer<AVPixFmtDescriptor > pixdesc) {
		return av_get_padded_bits_per_pixel(Pointer.getPeer(pixdesc));
	}
	protected native static int av_get_padded_bits_per_pixel(@Ptr long pixdesc);
	/**
	 * @return a pixel format descriptor for provided pixel format or NULL if<br>
	 * this pixel format is unknown.<br>
	 * Original signature : <code>AVPixFmtDescriptor* av_pix_fmt_desc_get(AVPixelFormat)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:90</i>
	 */
	public static Pointer<AVPixFmtDescriptor > av_pix_fmt_desc_get(IntValuedEnum<AvutilLibrary.AVPixelFormat > pix_fmt) {
		return Pointer.pointerToAddress(av_pix_fmt_desc_get((int)pix_fmt.value()), AVPixFmtDescriptor.class);
	}
	@Ptr 
	protected native static long av_pix_fmt_desc_get(int pix_fmt);
	/**
	 * Iterate over all pixel format descriptors known to libavutil.<br>
	 * * @param prev previous descriptor. NULL to get the first descriptor.<br>
	 * * @return next descriptor or NULL after the last descriptor<br>
	 * Original signature : <code>AVPixFmtDescriptor* av_pix_fmt_desc_next(const AVPixFmtDescriptor*)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:97</i>
	 */
	public static Pointer<AVPixFmtDescriptor > av_pix_fmt_desc_next(Pointer<AVPixFmtDescriptor > prev) {
		return Pointer.pointerToAddress(av_pix_fmt_desc_next(Pointer.getPeer(prev)), AVPixFmtDescriptor.class);
	}
	@Ptr 
	protected native static long av_pix_fmt_desc_next(@Ptr long prev);
	/**
	 * @return an AVPixelFormat id described by desc, or AV_PIX_FMT_NONE if desc<br>
	 * is not a valid pointer to a pixel format descriptor.<br>
	 * Original signature : <code>AVPixelFormat av_pix_fmt_desc_get_id(const AVPixFmtDescriptor*)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:103</i>
	 */
	public static IntValuedEnum<AvutilLibrary.AVPixelFormat > av_pix_fmt_desc_get_id(Pointer<AVPixFmtDescriptor > desc) {
		return FlagSet.fromValue(av_pix_fmt_desc_get_id(Pointer.getPeer(desc)), AvutilLibrary.AVPixelFormat.class);
	}
	protected native static int av_pix_fmt_desc_get_id(@Ptr long desc);
	/**
	 * Utility function to access log2_chroma_w log2_chroma_h from<br>
	 * the pixel format AVPixFmtDescriptor.<br>
	 * * See av_get_chroma_sub_sample() for a function that asserts a<br>
	 * valid pixel format instead of returning an error code.<br>
	 * Its recommended that you use avcodec_get_chroma_sub_sample unless<br>
	 * you do check the return code!<br>
	 * * @param[in]  pix_fmt the pixel format<br>
	 * @param[out] h_shift store log2_chroma_w (horizontal/width shift)<br>
	 * @param[out] v_shift store log2_chroma_h (vertical/height shift)<br>
	 * * @return 0 on success, AVERROR(ENOSYS) on invalid or unknown pixel format<br>
	 * Original signature : <code>int av_pix_fmt_get_chroma_sub_sample(AVPixelFormat, int*, int*)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:117</i>
	 */
	public static int av_pix_fmt_get_chroma_sub_sample(IntValuedEnum<AvutilLibrary.AVPixelFormat > pix_fmt, Pointer<Integer > h_shift, Pointer<Integer > v_shift) {
		return av_pix_fmt_get_chroma_sub_sample((int)pix_fmt.value(), Pointer.getPeer(h_shift), Pointer.getPeer(v_shift));
	}
	protected native static int av_pix_fmt_get_chroma_sub_sample(int pix_fmt, @Ptr long h_shift, @Ptr long v_shift);
	/**
	 * @return number of planes in pix_fmt, a negative AVERROR if pix_fmt is not a<br>
	 * valid pixel format.<br>
	 * Original signature : <code>int av_pix_fmt_count_planes(AVPixelFormat)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:123</i>
	 */
	public static int av_pix_fmt_count_planes(IntValuedEnum<AvutilLibrary.AVPixelFormat > pix_fmt) {
		return av_pix_fmt_count_planes((int)pix_fmt.value());
	}
	protected native static int av_pix_fmt_count_planes(int pix_fmt);
	/**
	 * @return the name for provided color range or NULL if unknown.<br>
	 * Original signature : <code>char* av_color_range_name(AVColorRange)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:128</i>
	 */
	public static Pointer<Byte > av_color_range_name(IntValuedEnum<AvutilLibrary.AVColorRange > range) {
		return Pointer.pointerToAddress(av_color_range_name((int)range.value()), Byte.class);
	}
	@Ptr 
	protected native static long av_color_range_name(int range);
	/**
	 * @return the AVColorRange value for name or an AVError if not found.<br>
	 * Original signature : <code>int av_color_range_from_name(const char*)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:133</i>
	 */
	public static int av_color_range_from_name(Pointer<Byte > name) {
		return av_color_range_from_name(Pointer.getPeer(name));
	}
	protected native static int av_color_range_from_name(@Ptr long name);
	/**
	 * @return the name for provided color primaries or NULL if unknown.<br>
	 * Original signature : <code>char* av_color_primaries_name(AVColorPrimaries)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:138</i>
	 */
	public static Pointer<Byte > av_color_primaries_name(IntValuedEnum<AvutilLibrary.AVColorPrimaries > primaries) {
		return Pointer.pointerToAddress(av_color_primaries_name((int)primaries.value()), Byte.class);
	}
	@Ptr 
	protected native static long av_color_primaries_name(int primaries);
	/**
	 * @return the AVColorPrimaries value for name or an AVError if not found.<br>
	 * Original signature : <code>int av_color_primaries_from_name(const char*)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:143</i>
	 */
	public static int av_color_primaries_from_name(Pointer<Byte > name) {
		return av_color_primaries_from_name(Pointer.getPeer(name));
	}
	protected native static int av_color_primaries_from_name(@Ptr long name);
	/**
	 * @return the name for provided color transfer or NULL if unknown.<br>
	 * Original signature : <code>char* av_color_transfer_name(AVColorTransferCharacteristic)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:148</i>
	 */
	public static Pointer<Byte > av_color_transfer_name(IntValuedEnum<AvutilLibrary.AVColorTransferCharacteristic > transfer) {
		return Pointer.pointerToAddress(av_color_transfer_name((int)transfer.value()), Byte.class);
	}
	@Ptr 
	protected native static long av_color_transfer_name(int transfer);
	/**
	 * @return the AVColorTransferCharacteristic value for name or an AVError if not found.<br>
	 * Original signature : <code>int av_color_transfer_from_name(const char*)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:153</i>
	 */
	public static int av_color_transfer_from_name(Pointer<Byte > name) {
		return av_color_transfer_from_name(Pointer.getPeer(name));
	}
	protected native static int av_color_transfer_from_name(@Ptr long name);
	/**
	 * @return the name for provided color space or NULL if unknown.<br>
	 * Original signature : <code>char* av_color_space_name(AVColorSpace)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:158</i>
	 */
	public static Pointer<Byte > av_color_space_name(IntValuedEnum<AvutilLibrary.AVColorSpace > space) {
		return Pointer.pointerToAddress(av_color_space_name((int)space.value()), Byte.class);
	}
	@Ptr 
	protected native static long av_color_space_name(int space);
	/**
	 * @return the AVColorSpace value for name or an AVError if not found.<br>
	 * Original signature : <code>int av_color_space_from_name(const char*)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:163</i>
	 */
	public static int av_color_space_from_name(Pointer<Byte > name) {
		return av_color_space_from_name(Pointer.getPeer(name));
	}
	protected native static int av_color_space_from_name(@Ptr long name);
	/**
	 * @return the name for provided chroma location or NULL if unknown.<br>
	 * Original signature : <code>char* av_chroma_location_name(AVChromaLocation)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:168</i>
	 */
	public static Pointer<Byte > av_chroma_location_name(IntValuedEnum<AvutilLibrary.AVChromaLocation > location) {
		return Pointer.pointerToAddress(av_chroma_location_name((int)location.value()), Byte.class);
	}
	@Ptr 
	protected native static long av_chroma_location_name(int location);
	/**
	 * @return the AVChromaLocation value for name or an AVError if not found.<br>
	 * Original signature : <code>int av_chroma_location_from_name(const char*)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:173</i>
	 */
	public static int av_chroma_location_from_name(Pointer<Byte > name) {
		return av_chroma_location_from_name(Pointer.getPeer(name));
	}
	protected native static int av_chroma_location_from_name(@Ptr long name);
	/**
	 * Return the pixel format corresponding to name.<br>
	 * * If there is no pixel format with name name, then looks for a<br>
	 * pixel format with the name corresponding to the native endian<br>
	 * format of name.<br>
	 * For example in a little-endian system, first looks for "gray16",<br>
	 * then for "gray16le".<br>
	 * * Finally if no pixel format has been found, returns AV_PIX_FMT_NONE.<br>
	 * Original signature : <code>AVPixelFormat av_get_pix_fmt(const char*)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:184</i>
	 */
	public static IntValuedEnum<AvutilLibrary.AVPixelFormat > av_get_pix_fmt(Pointer<Byte > name) {
		return FlagSet.fromValue(av_get_pix_fmt(Pointer.getPeer(name)), AvutilLibrary.AVPixelFormat.class);
	}
	protected native static int av_get_pix_fmt(@Ptr long name);
	/**
	 * Return the short name for a pixel format, NULL in case pix_fmt is<br>
	 * unknown.<br>
	 * * @see av_get_pix_fmt(), av_get_pix_fmt_string()<br>
	 * Original signature : <code>char* av_get_pix_fmt_name(AVPixelFormat)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:191</i>
	 */
	public static Pointer<Byte > av_get_pix_fmt_name(IntValuedEnum<AvutilLibrary.AVPixelFormat > pix_fmt) {
		return Pointer.pointerToAddress(av_get_pix_fmt_name((int)pix_fmt.value()), Byte.class);
	}
	@Ptr 
	protected native static long av_get_pix_fmt_name(int pix_fmt);
	/**
	 * Print in buf the string corresponding to the pixel format with<br>
	 * number pix_fmt, or a header if pix_fmt is negative.<br>
	 * * @param buf the buffer where to write the string<br>
	 * @param buf_size the size of buf<br>
	 * @param pix_fmt the number of the pixel format to print the<br>
	 * corresponding info string, or a negative value to print the<br>
	 * corresponding header.<br>
	 * Original signature : <code>char* av_get_pix_fmt_string(char*, int, AVPixelFormat)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:202</i>
	 */
	public static Pointer<Byte > av_get_pix_fmt_string(Pointer<Byte > buf, int buf_size, IntValuedEnum<AvutilLibrary.AVPixelFormat > pix_fmt) {
		return Pointer.pointerToAddress(av_get_pix_fmt_string(Pointer.getPeer(buf), buf_size, (int)pix_fmt.value()), Byte.class);
	}
	@Ptr 
	protected native static long av_get_pix_fmt_string(@Ptr long buf, int buf_size, int pix_fmt);
	/**
	 * Read a line from an image, and write the values of the<br>
	 * pixel format component c to dst.<br>
	 * * @param data the array containing the pointers to the planes of the image<br>
	 * @param linesize the array containing the linesizes of the image<br>
	 * @param desc the pixel format descriptor for the image<br>
	 * @param x the horizontal coordinate of the first pixel to read<br>
	 * @param y the vertical coordinate of the first pixel to read<br>
	 * @param w the width of the line to read, that is the number of<br>
	 * values to write to dst<br>
	 * @param read_pal_component if not zero and the format is a paletted<br>
	 * format writes the values corresponding to the palette<br>
	 * component c in data[1] to dst, rather than the palette indexes in<br>
	 * data[0]. The behavior is undefined if the format is not paletted.<br>
	 * Original signature : <code>void av_read_image_line(uint16_t*, const uint8_t*[4], const int[4], const AVPixFmtDescriptor*, int, int, int, int, int)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:219</i>
	 */
	public static void av_read_image_line(Pointer<Short > dst, Pointer<Pointer<Byte > > data, Pointer<Integer > linesize, Pointer<AVPixFmtDescriptor > desc, int x, int y, int c, int w, int read_pal_component) {
		av_read_image_line(Pointer.getPeer(dst), Pointer.getPeer(data), Pointer.getPeer(linesize), Pointer.getPeer(desc), x, y, c, w, read_pal_component);
	}
	protected native static void av_read_image_line(@Ptr long dst, @Ptr long data, @Ptr long linesize, @Ptr long desc, int x, int y, int c, int w, int read_pal_component);
	/**
	 * Write the values from src to the pixel format component c of an<br>
	 * image line.<br>
	 * * @param src array containing the values to write<br>
	 * @param data the array containing the pointers to the planes of the<br>
	 * image to write into. It is supposed to be zeroed.<br>
	 * @param linesize the array containing the linesizes of the image<br>
	 * @param desc the pixel format descriptor for the image<br>
	 * @param x the horizontal coordinate of the first pixel to write<br>
	 * @param y the vertical coordinate of the first pixel to write<br>
	 * @param w the width of the line to write, that is the number of<br>
	 * values to write to the image line<br>
	 * Original signature : <code>void av_write_image_line(const uint16_t*, uint8_t*[4], const int[4], const AVPixFmtDescriptor*, int, int, int, int)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:234</i>
	 */
	public static void av_write_image_line(Pointer<Short > src, Pointer<Pointer<Byte > > data, Pointer<Integer > linesize, Pointer<AVPixFmtDescriptor > desc, int x, int y, int c, int w) {
		av_write_image_line(Pointer.getPeer(src), Pointer.getPeer(data), Pointer.getPeer(linesize), Pointer.getPeer(desc), x, y, c, w);
	}
	protected native static void av_write_image_line(@Ptr long src, @Ptr long data, @Ptr long linesize, @Ptr long desc, int x, int y, int c, int w);
	/**
	 * Utility function to swap the endianness of a pixel format.<br>
	 * * @param[in]  pix_fmt the pixel format<br>
	 * * @return pixel format with swapped endianness if it exists,<br>
	 * otherwise AV_PIX_FMT_NONE<br>
	 * Original signature : <code>AVPixelFormat av_pix_fmt_swap_endianness(AVPixelFormat)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:242</i>
	 */
	public static IntValuedEnum<AvutilLibrary.AVPixelFormat > av_pix_fmt_swap_endianness(IntValuedEnum<AvutilLibrary.AVPixelFormat > pix_fmt) {
		return FlagSet.fromValue(av_pix_fmt_swap_endianness((int)pix_fmt.value()), AvutilLibrary.AVPixelFormat.class);
	}
	protected native static int av_pix_fmt_swap_endianness(int pix_fmt);
	/**
	 * Compute what kind of losses will occur when converting from one specific<br>
	 * pixel format to another.<br>
	 * When converting from one pixel format to another, information loss may occur.<br>
	 * For example, when converting from RGB24 to GRAY, the color information will<br>
	 * be lost. Similarly, other losses occur when converting from some formats to<br>
	 * other formats. These losses can involve loss of chroma, but also loss of<br>
	 * resolution, loss of color depth, loss due to the color space conversion, loss<br>
	 * of the alpha bits or loss due to color quantization.<br>
	 * av_get_fix_fmt_loss() informs you about the various types of losses<br>
	 * which will occur when converting from one pixel format to another.<br>
	 * * @param[in] dst_pix_fmt destination pixel format<br>
	 * @param[in] src_pix_fmt source pixel format<br>
	 * @param[in] has_alpha Whether the source pixel format alpha channel is used.<br>
	 * @return Combination of flags informing you what kind of losses will occur<br>
	 * (maximum loss for an invalid dst_pix_fmt).<br>
	 * Original signature : <code>int av_get_pix_fmt_loss(AVPixelFormat, AVPixelFormat, int)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:261</i>
	 */
	public static int av_get_pix_fmt_loss(IntValuedEnum<AvutilLibrary.AVPixelFormat > dst_pix_fmt, IntValuedEnum<AvutilLibrary.AVPixelFormat > src_pix_fmt, int has_alpha) {
		return av_get_pix_fmt_loss((int)dst_pix_fmt.value(), (int)src_pix_fmt.value(), has_alpha);
	}
	protected native static int av_get_pix_fmt_loss(int dst_pix_fmt, int src_pix_fmt, int has_alpha);
	/**
	 * Compute what kind of losses will occur when converting from one specific<br>
	 * pixel format to another.<br>
	 * When converting from one pixel format to another, information loss may occur.<br>
	 * For example, when converting from RGB24 to GRAY, the color information will<br>
	 * be lost. Similarly, other losses occur when converting from some formats to<br>
	 * other formats. These losses can involve loss of chroma, but also loss of<br>
	 * resolution, loss of color depth, loss due to the color space conversion, loss<br>
	 * of the alpha bits or loss due to color quantization.<br>
	 * av_get_fix_fmt_loss() informs you about the various types of losses<br>
	 * which will occur when converting from one pixel format to another.<br>
	 * * @param[in] dst_pix_fmt destination pixel format<br>
	 * @param[in] src_pix_fmt source pixel format<br>
	 * @param[in] has_alpha Whether the source pixel format alpha channel is used.<br>
	 * @return Combination of flags informing you what kind of losses will occur<br>
	 * (maximum loss for an invalid dst_pix_fmt).<br>
	 * Original signature : <code>AVPixelFormat av_find_best_pix_fmt_of_2(AVPixelFormat, AVPixelFormat, AVPixelFormat, int, int*)</code><br>
	 * <i>native declaration : libavutil/pixdesc.h:280</i>
	 */
	public static IntValuedEnum<AvutilLibrary.AVPixelFormat > av_find_best_pix_fmt_of_2(IntValuedEnum<AvutilLibrary.AVPixelFormat > dst_pix_fmt1, IntValuedEnum<AvutilLibrary.AVPixelFormat > dst_pix_fmt2, IntValuedEnum<AvutilLibrary.AVPixelFormat > src_pix_fmt, int has_alpha, Pointer<Integer > loss_ptr) {
		return FlagSet.fromValue(av_find_best_pix_fmt_of_2((int)dst_pix_fmt1.value(), (int)dst_pix_fmt2.value(), (int)src_pix_fmt.value(), has_alpha, Pointer.getPeer(loss_ptr)), AvutilLibrary.AVPixelFormat.class);
	}
	protected native static int av_find_best_pix_fmt_of_2(int dst_pix_fmt1, int dst_pix_fmt2, int src_pix_fmt, int has_alpha, @Ptr long loss_ptr);
	/**
	 * Compute the max pixel step for each plane of an image with a<br>
	 * format described by pixdesc.<br>
	 * * The pixel step is the distance in bytes between the first byte of<br>
	 * the group of bytes which describe a pixel component and the first<br>
	 * byte of the successive group in the same plane for the same<br>
	 * component.<br>
	 * * @param max_pixsteps an array which is filled with the max pixel step<br>
	 * for each plane. Since a plane may contain different pixel<br>
	 * components, the computed max_pixsteps[plane] is relative to the<br>
	 * component in the plane with the max pixel step.<br>
	 * @param max_pixstep_comps an array which is filled with the component<br>
	 * for each plane which has the max pixel step. May be NULL.<br>
	 * Original signature : <code>void av_image_fill_max_pixsteps(int[4], int[4], const AVPixFmtDescriptor*)</code><br>
	 * <i>native declaration : libavutil/imgutils.h:15</i>
	 */
	public static void av_image_fill_max_pixsteps(Pointer<Integer > max_pixsteps, Pointer<Integer > max_pixstep_comps, Pointer<AVPixFmtDescriptor > pixdesc) {
		av_image_fill_max_pixsteps(Pointer.getPeer(max_pixsteps), Pointer.getPeer(max_pixstep_comps), Pointer.getPeer(pixdesc));
	}
	protected native static void av_image_fill_max_pixsteps(@Ptr long max_pixsteps, @Ptr long max_pixstep_comps, @Ptr long pixdesc);
	/**
	 * Compute the size of an image line with format pix_fmt and width<br>
	 * width for the plane plane.<br>
	 * * @return the computed size in bytes<br>
	 * Original signature : <code>int av_image_get_linesize(AVPixelFormat, int, int)</code><br>
	 * <i>native declaration : libavutil/imgutils.h:22</i>
	 */
	public static int av_image_get_linesize(IntValuedEnum<AvutilLibrary.AVPixelFormat > pix_fmt, int width, int plane) {
		return av_image_get_linesize((int)pix_fmt.value(), width, plane);
	}
	protected native static int av_image_get_linesize(int pix_fmt, int width, int plane);
	/**
	 * Fill plane linesizes for an image with pixel format pix_fmt and<br>
	 * width width.<br>
	 * * @param linesizes array to be filled with the linesize for each plane<br>
	 * @return >= 0 in case of success, a negative error code otherwise<br>
	 * Original signature : <code>int av_image_fill_linesizes(int[4], AVPixelFormat, int)</code><br>
	 * <i>native declaration : libavutil/imgutils.h:30</i>
	 */
	public static int av_image_fill_linesizes(Pointer<Integer > linesizes, IntValuedEnum<AvutilLibrary.AVPixelFormat > pix_fmt, int width) {
		return av_image_fill_linesizes(Pointer.getPeer(linesizes), (int)pix_fmt.value(), width);
	}
	protected native static int av_image_fill_linesizes(@Ptr long linesizes, int pix_fmt, int width);
	/**
	 * Fill plane data pointers for an image with pixel format pix_fmt and<br>
	 * height height.<br>
	 * * @param data pointers array to be filled with the pointer for each image plane<br>
	 * @param ptr the pointer to a buffer which will contain the image<br>
	 * @param linesizes the array containing the linesize for each<br>
	 * plane, should be filled by av_image_fill_linesizes()<br>
	 * @return the size in bytes required for the image buffer, a negative<br>
	 * error code in case of failure<br>
	 * Original signature : <code>int av_image_fill_pointers(uint8_t*[4], AVPixelFormat, int, uint8_t*, const int[4])</code><br>
	 * <i>native declaration : libavutil/imgutils.h:42</i>
	 */
	public static int av_image_fill_pointers(Pointer<Pointer<Byte > > data, IntValuedEnum<AvutilLibrary.AVPixelFormat > pix_fmt, int height, Pointer<Byte > ptr, Pointer<Integer > linesizes) {
		return av_image_fill_pointers(Pointer.getPeer(data), (int)pix_fmt.value(), height, Pointer.getPeer(ptr), Pointer.getPeer(linesizes));
	}
	protected native static int av_image_fill_pointers(@Ptr long data, int pix_fmt, int height, @Ptr long ptr, @Ptr long linesizes);
	/**
	 * Allocate an image with size w and h and pixel format pix_fmt, and<br>
	 * fill pointers and linesizes accordingly.<br>
	 * The allocated image buffer has to be freed by using<br>
	 * av_freep(&pointers[0]).<br>
	 * * @param align the value to use for buffer size alignment<br>
	 * @return the size in bytes required for the image buffer, a negative<br>
	 * error code in case of failure<br>
	 * Original signature : <code>int av_image_alloc(uint8_t*[4], int[4], int, int, AVPixelFormat, int)</code><br>
	 * <i>native declaration : libavutil/imgutils.h:53</i>
	 */
	public static int av_image_alloc(Pointer<Pointer<Byte > > pointers, Pointer<Integer > linesizes, int w, int h, IntValuedEnum<AvutilLibrary.AVPixelFormat > pix_fmt, int align) {
		return av_image_alloc(Pointer.getPeer(pointers), Pointer.getPeer(linesizes), w, h, (int)pix_fmt.value(), align);
	}
	protected native static int av_image_alloc(@Ptr long pointers, @Ptr long linesizes, int w, int h, int pix_fmt, int align);
	/**
	 * Copy image plane from src to dst.<br>
	 * That is, copy "height" number of lines of "bytewidth" bytes each.<br>
	 * The first byte of each successive line is separated by *_linesize<br>
	 * bytes.<br>
	 * * bytewidth must be contained by both absolute values of dst_linesize<br>
	 * and src_linesize, otherwise the function behavior is undefined.<br>
	 * * @param dst_linesize linesize for the image plane in dst<br>
	 * @param src_linesize linesize for the image plane in src<br>
	 * Original signature : <code>void av_image_copy_plane(uint8_t*, int, const uint8_t*, int, int, int)</code><br>
	 * <i>native declaration : libavutil/imgutils.h:65</i>
	 */
	public static void av_image_copy_plane(Pointer<Byte > dst, int dst_linesize, Pointer<Byte > src, int src_linesize, int bytewidth, int height) {
		av_image_copy_plane(Pointer.getPeer(dst), dst_linesize, Pointer.getPeer(src), src_linesize, bytewidth, height);
	}
	protected native static void av_image_copy_plane(@Ptr long dst, int dst_linesize, @Ptr long src, int src_linesize, int bytewidth, int height);
	/**
	 * Copy image in src_data to dst_data.<br>
	 * * @param dst_linesizes linesizes for the image in dst_data<br>
	 * @param src_linesizes linesizes for the image in src_data<br>
	 * Original signature : <code>void av_image_copy(uint8_t*[4], int[4], const uint8_t*[4], const int[4], AVPixelFormat, int, int)</code><br>
	 * <i>native declaration : libavutil/imgutils.h:72</i>
	 */
	public static void av_image_copy(Pointer<Pointer<Byte > > dst_data, Pointer<Integer > dst_linesizes, Pointer<Pointer<Byte > > src_data, Pointer<Integer > src_linesizes, IntValuedEnum<AvutilLibrary.AVPixelFormat > pix_fmt, int width, int height) {
		av_image_copy(Pointer.getPeer(dst_data), Pointer.getPeer(dst_linesizes), Pointer.getPeer(src_data), Pointer.getPeer(src_linesizes), (int)pix_fmt.value(), width, height);
	}
	protected native static void av_image_copy(@Ptr long dst_data, @Ptr long dst_linesizes, @Ptr long src_data, @Ptr long src_linesizes, int pix_fmt, int width, int height);
	/**
	 * Copy image data located in uncacheable (e.g. GPU mapped) memory. Where<br>
	 * available, this function will use special functionality for reading from such<br>
	 * memory, which may result in greatly improved performance compared to plain<br>
	 * av_image_copy().<br>
	 * * The data pointers and the linesizes must be aligned to the maximum required<br>
	 * by the CPU architecture.<br>
	 * * @note The linesize parameters have the type ptrdiff_t here, while they are<br>
	 *       int for av_image_copy().<br>
	 * @note On x86, the linesizes currently need to be aligned to the cacheline<br>
	 *       size (i.e. 64) to get improved performance.<br>
	 * Original signature : <code>void av_image_copy_uc_from(uint8_t*[4], const ptrdiff_t[4], const uint8_t*[4], const ptrdiff_t[4], AVPixelFormat, int, int)</code><br>
	 * <i>native declaration : libavutil/imgutils.h:86</i>
	 */
	public static void av_image_copy_uc_from(Pointer<Pointer<Byte > > dst_data, Pointer<SizeT > dst_linesizes, Pointer<Pointer<Byte > > src_data, Pointer<SizeT > src_linesizes, IntValuedEnum<AvutilLibrary.AVPixelFormat > pix_fmt, int width, int height) {
		av_image_copy_uc_from(Pointer.getPeer(dst_data), Pointer.getPeer(dst_linesizes), Pointer.getPeer(src_data), Pointer.getPeer(src_linesizes), (int)pix_fmt.value(), width, height);
	}
	protected native static void av_image_copy_uc_from(@Ptr long dst_data, @Ptr long dst_linesizes, @Ptr long src_data, @Ptr long src_linesizes, int pix_fmt, int width, int height);
	/**
	 * Setup the data pointers and linesizes based on the specified image<br>
	 * parameters and the provided array.<br>
	 * * The fields of the given image are filled in by using the src<br>
	 * address which points to the image data buffer. Depending on the<br>
	 * specified pixel format, one or multiple image data pointers and<br>
	 * line sizes will be set.  If a planar format is specified, several<br>
	 * pointers will be set pointing to the different picture planes and<br>
	 * the line sizes of the different planes will be stored in the<br>
	 * lines_sizes array. Call with src == NULL to get the required<br>
	 * size for the src buffer.<br>
	 * * To allocate the buffer and fill in the dst_data and dst_linesize in<br>
	 * one call, use av_image_alloc().<br>
	 * * @param dst_data      data pointers to be filled in<br>
	 * @param dst_linesize  linesizes for the image in dst_data to be filled in<br>
	 * @param src           buffer which will contain or contains the actual image data, can be NULL<br>
	 * @param pix_fmt       the pixel format of the image<br>
	 * @param width         the width of the image in pixels<br>
	 * @param height        the height of the image in pixels<br>
	 * @param align         the value used in src for linesize alignment<br>
	 * @return the size in bytes required for src, a negative error code<br>
	 * in case of failure<br>
	 * Original signature : <code>int av_image_fill_arrays(uint8_t*[4], int[4], const uint8_t*, AVPixelFormat, int, int, int)</code><br>
	 * <i>native declaration : libavutil/imgutils.h:111</i>
	 */
	public static int av_image_fill_arrays(Pointer<Pointer<Byte > > dst_data, Pointer<Integer > dst_linesize, Pointer<Byte > src, IntValuedEnum<AvutilLibrary.AVPixelFormat > pix_fmt, int width, int height, int align) {
		return av_image_fill_arrays(Pointer.getPeer(dst_data), Pointer.getPeer(dst_linesize), Pointer.getPeer(src), (int)pix_fmt.value(), width, height, align);
	}
	protected native static int av_image_fill_arrays(@Ptr long dst_data, @Ptr long dst_linesize, @Ptr long src, int pix_fmt, int width, int height, int align);
	/**
	 * Return the size in bytes of the amount of data required to store an<br>
	 * image with the given parameters.<br>
	 * * @param pix_fmt  the pixel format of the image<br>
	 * @param width    the width of the image in pixels<br>
	 * @param height   the height of the image in pixels<br>
	 * @param align    the assumed linesize alignment<br>
	 * @return the buffer size in bytes, a negative error code in case of failure<br>
	 * Original signature : <code>int av_image_get_buffer_size(AVPixelFormat, int, int, int)</code><br>
	 * <i>native declaration : libavutil/imgutils.h:122</i>
	 */
	public static int av_image_get_buffer_size(IntValuedEnum<AvutilLibrary.AVPixelFormat > pix_fmt, int width, int height, int align) {
		return av_image_get_buffer_size((int)pix_fmt.value(), width, height, align);
	}
	protected native static int av_image_get_buffer_size(int pix_fmt, int width, int height, int align);
	/**
	 * Copy image data from an image into a buffer.<br>
	 * * av_image_get_buffer_size() can be used to compute the required size<br>
	 * for the buffer to fill.<br>
	 * * @param dst           a buffer into which picture data will be copied<br>
	 * @param dst_size      the size in bytes of dst<br>
	 * @param src_data      pointers containing the source image data<br>
	 * @param src_linesize  linesizes for the image in src_data<br>
	 * @param pix_fmt       the pixel format of the source image<br>
	 * @param width         the width of the source image in pixels<br>
	 * @param height        the height of the source image in pixels<br>
	 * @param align         the assumed linesize alignment for dst<br>
	 * @return the number of bytes written to dst, or a negative value<br>
	 * (error code) on error<br>
	 * Original signature : <code>int av_image_copy_to_buffer(uint8_t*, int, const const uint8_t*[4], const int[4], AVPixelFormat, int, int, int)</code><br>
	 * <i>native declaration : libavutil/imgutils.h:139</i>
	 */
	public static int av_image_copy_to_buffer(Pointer<Byte > dst, int dst_size, Pointer<Pointer<Byte > > src_data, Pointer<Integer > src_linesize, IntValuedEnum<AvutilLibrary.AVPixelFormat > pix_fmt, int width, int height, int align) {
		return av_image_copy_to_buffer(Pointer.getPeer(dst), dst_size, Pointer.getPeer(src_data), Pointer.getPeer(src_linesize), (int)pix_fmt.value(), width, height, align);
	}
	protected native static int av_image_copy_to_buffer(@Ptr long dst, int dst_size, @Ptr long src_data, @Ptr long src_linesize, int pix_fmt, int width, int height, int align);
	/**
	 * Check if the given dimension of an image is valid, meaning that all<br>
	 * bytes of the image can be addressed with a signed int.<br>
	 * * @param w the width of the picture<br>
	 * @param h the height of the picture<br>
	 * @param log_offset the offset to sum to the log level for logging with log_ctx<br>
	 * @param log_ctx the parent logging context, it may be NULL<br>
	 * @return >= 0 if valid, a negative error code otherwise<br>
	 * Original signature : <code>int av_image_check_size(unsigned int, unsigned int, int, void*)</code><br>
	 * <i>native declaration : libavutil/imgutils.h:150</i>
	 */
	public static int av_image_check_size(int w, int h, int log_offset, Pointer<? > log_ctx) {
		return av_image_check_size(w, h, log_offset, Pointer.getPeer(log_ctx));
	}
	protected native static int av_image_check_size(int w, int h, int log_offset, @Ptr long log_ctx);
	/**
	 * Check if the given dimension of an image is valid, meaning that all<br>
	 * bytes of a plane of an image with the specified pix_fmt can be addressed<br>
	 * with a signed int.<br>
	 * * @param w the width of the picture<br>
	 * @param h the height of the picture<br>
	 * @param max_pixels the maximum number of pixels the user wants to accept<br>
	 * @param pix_fmt the pixel format, can be AV_PIX_FMT_NONE if unknown.<br>
	 * @param log_offset the offset to sum to the log level for logging with log_ctx<br>
	 * @param log_ctx the parent logging context, it may be NULL<br>
	 * @return >= 0 if valid, a negative error code otherwise<br>
	 * Original signature : <code>int av_image_check_size2(unsigned int, unsigned int, int64_t, AVPixelFormat, int, void*)</code><br>
	 * <i>native declaration : libavutil/imgutils.h:164</i>
	 */
	public static int av_image_check_size2(int w, int h, long max_pixels, IntValuedEnum<AvutilLibrary.AVPixelFormat > pix_fmt, int log_offset, Pointer<? > log_ctx) {
		return av_image_check_size2(w, h, max_pixels, (int)pix_fmt.value(), log_offset, Pointer.getPeer(log_ctx));
	}
	protected native static int av_image_check_size2(int w, int h, long max_pixels, int pix_fmt, int log_offset, @Ptr long log_ctx);
	/**
	 * Check if the given sample aspect ratio of an image is valid.<br>
	 * * It is considered invalid if the denominator is 0 or if applying the ratio<br>
	 * to the image size would make the smaller dimension less than 1. If the<br>
	 * sar numerator is 0, it is considered unknown and will return as valid.<br>
	 * * @param w width of the image<br>
	 * @param h height of the image<br>
	 * @param sar sample aspect ratio of the image<br>
	 * @return 0 if valid, a negative AVERROR code otherwise<br>
	 * Original signature : <code>int av_image_check_sar(unsigned int, unsigned int, AVRational)</code><br>
	 * <i>native declaration : libavutil/imgutils.h:176</i>
	 */
	public static native int av_image_check_sar(int w, int h, AVRational sar);
	/**
	 * Overwrite the image data with black. This is suitable for filling a<br>
	 * sub-rectangle of an image, meaning the padding between the right most pixel<br>
	 * and the left most pixel on the next line will not be overwritten. For some<br>
	 * formats, the image size might be rounded up due to inherent alignment.<br>
	 * * If the pixel format has alpha, the alpha is cleared to opaque.<br>
	 * * This can return an error if the pixel format is not supported. Normally, all<br>
	 * non-hwaccel pixel formats should be supported.<br>
	 * * Passing NULL for dst_data is allowed. Then the function returns whether the<br>
	 * operation would have succeeded. (It can return an error if the pix_fmt is<br>
	 * not supported.)<br>
	 * * @param dst_data      data pointers to destination image<br>
	 * @param dst_linesize  linesizes for the destination image<br>
	 * @param pix_fmt       the pixel format of the image<br>
	 * @param range         the color range of the image (important for colorspaces such as YUV)<br>
	 * @param width         the width of the image in pixels<br>
	 * @param height        the height of the image in pixels<br>
	 * @return 0 if the image data was cleared, a negative AVERROR code otherwise<br>
	 * Original signature : <code>int av_image_fill_black(uint8_t*[4], const ptrdiff_t[4], AVPixelFormat, AVColorRange, int, int)</code><br>
	 * <i>native declaration : libavutil/imgutils.h:197</i>
	 */
	public static int av_image_fill_black(Pointer<Pointer<Byte > > dst_data, Pointer<SizeT > dst_linesize, IntValuedEnum<AvutilLibrary.AVPixelFormat > pix_fmt, IntValuedEnum<AvutilLibrary.AVColorRange > range, int width, int height) {
		return av_image_fill_black(Pointer.getPeer(dst_data), Pointer.getPeer(dst_linesize), (int)pix_fmt.value(), (int)range.value(), width, height);
	}
	protected native static int av_image_fill_black(@Ptr long dst_data, @Ptr long dst_linesize, int pix_fmt, int range, int width, int height);
	/**
	 * Allocate a AVSphericalVideo structure and initialize its fields to default<br>
	 * values.<br>
	 * * @return the newly allocated struct or NULL on failure<br>
	 * Original signature : <code>AVSphericalMapping* av_spherical_alloc(size_t*)</code><br>
	 * <i>native declaration : libavutil/spherical.h:123</i>
	 */
	public static Pointer<AVSphericalMapping > av_spherical_alloc(Pointer<SizeT > size) {
		return Pointer.pointerToAddress(av_spherical_alloc(Pointer.getPeer(size)), AVSphericalMapping.class);
	}
	@Ptr 
	protected native static long av_spherical_alloc(@Ptr long size);
	/**
	 * Convert the @ref bounding fields from an AVSphericalVideo<br>
	 * from 0.32 fixed point to pixels.<br>
	 * * @param map    The AVSphericalVideo map to read bound values from.<br>
	 * @param width  Width of the current frame or stream.<br>
	 * @param height Height of the current frame or stream.<br>
	 * @param left   Pixels from the left edge.<br>
	 * @param top    Pixels from the top edge.<br>
	 * @param right  Pixels from the right edge.<br>
	 * @param bottom Pixels from the bottom edge.<br>
	 * Original signature : <code>void av_spherical_tile_bounds(const AVSphericalMapping*, size_t, size_t, size_t*, size_t*, size_t*, size_t*)</code><br>
	 * <i>native declaration : libavutil/spherical.h:136</i>
	 */
	public static void av_spherical_tile_bounds(Pointer<AVSphericalMapping > map, @Ptr long width, @Ptr long height, Pointer<SizeT > left, Pointer<SizeT > top, Pointer<SizeT > right, Pointer<SizeT > bottom) {
		av_spherical_tile_bounds(Pointer.getPeer(map), width, height, Pointer.getPeer(left), Pointer.getPeer(top), Pointer.getPeer(right), Pointer.getPeer(bottom));
	}
	protected native static void av_spherical_tile_bounds(@Ptr long map, @Ptr long width, @Ptr long height, @Ptr long left, @Ptr long top, @Ptr long right, @Ptr long bottom);
	/**
	 * Provide a human-readable name of a given AVSphericalProjection.<br>
	 * * @param projection The input AVSphericalProjection.<br>
	 * * @return The name of the AVSphericalProjection, or "unknown".<br>
	 * Original signature : <code>char* av_spherical_projection_name(AVSphericalProjection)</code><br>
	 * <i>native declaration : libavutil/spherical.h:143</i>
	 */
	public static Pointer<Byte > av_spherical_projection_name(IntValuedEnum<AvutilLibrary.AVSphericalProjection > projection) {
		return Pointer.pointerToAddress(av_spherical_projection_name((int)projection.value()), Byte.class);
	}
	@Ptr 
	protected native static long av_spherical_projection_name(int projection);
	/**
	 * Get the AVSphericalProjection form a human-readable name.<br>
	 * * @param name The input string.<br>
	 * * @return The AVSphericalProjection value, or -1 if not found.<br>
	 * Original signature : <code>int av_spherical_from_name(const char*)</code><br>
	 * <i>native declaration : libavutil/spherical.h:150</i>
	 */
	public static int av_spherical_from_name(Pointer<Byte > name) {
		return av_spherical_from_name(Pointer.getPeer(name));
	}
	protected native static int av_spherical_from_name(@Ptr long name);
	/**
	 * Return non-zero if pfx is a prefix of str. If it is, *ptr is set to<br>
	 * the address of the first character in str after the prefix.<br>
	 * * @param str input string<br>
	 * @param pfx prefix to test<br>
	 * @param ptr updated if the prefix is matched inside str<br>
	 * @return non-zero if the prefix matches, zero otherwise<br>
	 * Original signature : <code>int av_strstart(const char*, const char*, const char**)</code><br>
	 * <i>native declaration : libavutil/avstring.h:9</i>
	 */
	public static int av_strstart(Pointer<Byte > str, Pointer<Byte > pfx, Pointer<Pointer<Byte > > ptr) {
		return av_strstart(Pointer.getPeer(str), Pointer.getPeer(pfx), Pointer.getPeer(ptr));
	}
	protected native static int av_strstart(@Ptr long str, @Ptr long pfx, @Ptr long ptr);
	/**
	 * Return non-zero if pfx is a prefix of str independent of case. If<br>
	 * it is, *ptr is set to the address of the first character in str<br>
	 * after the prefix.<br>
	 * * @param str input string<br>
	 * @param pfx prefix to test<br>
	 * @param ptr updated if the prefix is matched inside str<br>
	 * @return non-zero if the prefix matches, zero otherwise<br>
	 * Original signature : <code>int av_stristart(const char*, const char*, const char**)</code><br>
	 * <i>native declaration : libavutil/avstring.h:20</i>
	 */
	public static int av_stristart(Pointer<Byte > str, Pointer<Byte > pfx, Pointer<Pointer<Byte > > ptr) {
		return av_stristart(Pointer.getPeer(str), Pointer.getPeer(pfx), Pointer.getPeer(ptr));
	}
	protected native static int av_stristart(@Ptr long str, @Ptr long pfx, @Ptr long ptr);
	/**
	 * Locate the first case-independent occurrence in the string haystack<br>
	 * of the string needle.  A zero-length string needle is considered to<br>
	 * match at the start of haystack.<br>
	 * * This function is a case-insensitive version of the standard strstr().<br>
	 * * @param haystack string to search in<br>
	 * @param needle   string to search for<br>
	 * @return         pointer to the located match within haystack<br>
	 *                 or a null pointer if no match<br>
	 * Original signature : <code>char* av_stristr(const char*, const char*)</code><br>
	 * <i>native declaration : libavutil/avstring.h:32</i>
	 */
	public static Pointer<Byte > av_stristr(Pointer<Byte > haystack, Pointer<Byte > needle) {
		return Pointer.pointerToAddress(av_stristr(Pointer.getPeer(haystack), Pointer.getPeer(needle)), Byte.class);
	}
	@Ptr 
	protected native static long av_stristr(@Ptr long haystack, @Ptr long needle);
	/**
	 * Locate the first occurrence of the string needle in the string haystack<br>
	 * where not more than hay_length characters are searched. A zero-length<br>
	 * string needle is considered to match at the start of haystack.<br>
	 * * This function is a length-limited version of the standard strstr().<br>
	 * * @param haystack   string to search in<br>
	 * @param needle     string to search for<br>
	 * @param hay_length length of string to search in<br>
	 * @return           pointer to the located match within haystack<br>
	 *                   or a null pointer if no match<br>
	 * Original signature : <code>char* av_strnstr(const char*, const char*, size_t)</code><br>
	 * <i>native declaration : libavutil/avstring.h:45</i>
	 */
	public static Pointer<Byte > av_strnstr(Pointer<Byte > haystack, Pointer<Byte > needle, @Ptr long hay_length) {
		return Pointer.pointerToAddress(av_strnstr(Pointer.getPeer(haystack), Pointer.getPeer(needle), hay_length), Byte.class);
	}
	@Ptr 
	protected native static long av_strnstr(@Ptr long haystack, @Ptr long needle, @Ptr long hay_length);
	/**
	 * Copy the string src to dst, but no more than size - 1 bytes, and<br>
	 * null-terminate dst.<br>
	 * * This function is the same as BSD strlcpy().<br>
	 * * @param dst destination buffer<br>
	 * @param src source string<br>
	 * @param size size of destination buffer<br>
	 * @return the length of src<br>
	 * * @warning since the return value is the length of src, src absolutely<br>
	 * _must_ be a properly 0-terminated string, otherwise this will read beyond<br>
	 * the end of the buffer and possibly crash.<br>
	 * Original signature : <code>size_t av_strlcpy(char*, const char*, size_t)</code><br>
	 * <i>native declaration : libavutil/avstring.h:59</i>
	 */
	@Ptr 
	public static long av_strlcpy(Pointer<Byte > dst, Pointer<Byte > src, @Ptr long size) {
		return av_strlcpy(Pointer.getPeer(dst), Pointer.getPeer(src), size);
	}
	@Ptr 
	protected native static long av_strlcpy(@Ptr long dst, @Ptr long src, @Ptr long size);
	/**
	 * Append the string src to the string dst, but to a total length of<br>
	 * no more than size - 1 bytes, and null-terminate dst.<br>
	 * * This function is similar to BSD strlcat(), but differs when<br>
	 * size <= strlen(dst).<br>
	 * * @param dst destination buffer<br>
	 * @param src source string<br>
	 * @param size size of destination buffer<br>
	 * @return the total length of src and dst<br>
	 * * @warning since the return value use the length of src and dst, these<br>
	 * absolutely _must_ be a properly 0-terminated strings, otherwise this<br>
	 * will read beyond the end of the buffer and possibly crash.<br>
	 * Original signature : <code>size_t av_strlcat(char*, const char*, size_t)</code><br>
	 * <i>native declaration : libavutil/avstring.h:74</i>
	 */
	@Ptr 
	public static long av_strlcat(Pointer<Byte > dst, Pointer<Byte > src, @Ptr long size) {
		return av_strlcat(Pointer.getPeer(dst), Pointer.getPeer(src), size);
	}
	@Ptr 
	protected native static long av_strlcat(@Ptr long dst, @Ptr long src, @Ptr long size);
	/**
	 * Append output to a string, according to a format. Never write out of<br>
	 * the destination buffer, and always put a terminating 0 within<br>
	 * the buffer.<br>
	 * @param dst destination buffer (string to which the output is<br>
	 *  appended)<br>
	 * @param size total size of the destination buffer<br>
	 * @param fmt printf-compatible format string, specifying how the<br>
	 *  following parameters are used<br>
	 * @return the length of the string that would have been generated<br>
	 *  if enough space had been available<br>
	 * Original signature : <code>size_t av_strlcatf(char*, size_t, const char*, null)</code><br>
	 * <i>native declaration : libavutil/avstring.h:88</i>
	 */
	@Ptr 
	public static long av_strlcatf(Pointer<Byte > dst, @Ptr long size, Pointer<Byte > fmt, Object... varArgs1) {
		return av_strlcatf(Pointer.getPeer(dst), size, Pointer.getPeer(fmt), varArgs1);
	}
	@Ptr 
	protected native static long av_strlcatf(@Ptr long dst, @Ptr long size, @Ptr long fmt, Object... varArgs1);
	/**
	 * Print arguments following specified format into a large enough auto<br>
	 * allocated buffer. It is similar to GNU asprintf().<br>
	 * @param fmt printf-compatible format string, specifying how the<br>
	 *            following parameters are used.<br>
	 * @return the allocated string<br>
	 * @note You have to free the string yourself with av_free().<br>
	 * Original signature : <code>char* av_asprintf(const char*, null)</code><br>
	 * <i>native declaration : libavutil/avstring.h:108</i>
	 */
	public static Pointer<Byte > av_asprintf(Pointer<Byte > fmt, Object... varArgs1) {
		return Pointer.pointerToAddress(av_asprintf(Pointer.getPeer(fmt), varArgs1), Byte.class);
	}
	@Ptr 
	protected native static long av_asprintf(@Ptr long fmt, Object... varArgs1);
	/**
	 * Convert a number to an av_malloced string.<br>
	 * Original signature : <code>char* av_d2str(double)</code><br>
	 * <i>native declaration : libavutil/avstring.h:113</i>
	 */
	public static Pointer<Byte > av_d2str(double d) {
		return Pointer.pointerToAddress(av_d2str$2(d), Byte.class);
	}
	@Ptr 
	protected native static long av_d2str$2(double d);
	/**
	 * Unescape the given string until a non escaped terminating char,<br>
	 * and return the token corresponding to the unescaped string.<br>
	 * * The normal \ and ' escaping is supported. Leading and trailing<br>
	 * whitespaces are removed, unless they are escaped with '\' or are<br>
	 * enclosed between ''.<br>
	 * * @param buf the buffer to parse, buf will be updated to point to the<br>
	 * terminating char<br>
	 * @param term a 0-terminated list of terminating chars<br>
	 * @return the malloced unescaped string, which must be av_freed by<br>
	 * the user, NULL in case of allocation failure<br>
	 * Original signature : <code>char* av_get_token(const char**, const char*)</code><br>
	 * <i>native declaration : libavutil/avstring.h:127</i>
	 */
	public static Pointer<Byte > av_get_token(Pointer<Pointer<Byte > > buf, Pointer<Byte > term) {
		return Pointer.pointerToAddress(av_get_token(Pointer.getPeer(buf), Pointer.getPeer(term)), Byte.class);
	}
	@Ptr 
	protected native static long av_get_token(@Ptr long buf, @Ptr long term);
	/**
	 * Split the string into several tokens which can be accessed by<br>
	 * successive calls to av_strtok().<br>
	 * * A token is defined as a sequence of characters not belonging to the<br>
	 * set specified in delim.<br>
	 * * On the first call to av_strtok(), s should point to the string to<br>
	 * parse, and the value of saveptr is ignored. In subsequent calls, s<br>
	 * should be NULL, and saveptr should be unchanged since the previous<br>
	 * call.<br>
	 * * This function is similar to strtok_r() defined in POSIX.1.<br>
	 * * @param s the string to parse, may be NULL<br>
	 * @param delim 0-terminated list of token delimiters, must be non-NULL<br>
	 * @param saveptr user-provided pointer which points to stored<br>
	 * information necessary for av_strtok() to continue scanning the same<br>
	 * string. saveptr is updated to point to the next character after the<br>
	 * first delimiter found, or to NULL if the string was terminated<br>
	 * @return the found token, or NULL when no token is found<br>
	 * Original signature : <code>char* av_strtok(char*, const char*, char**)</code><br>
	 * <i>native declaration : libavutil/avstring.h:147</i>
	 */
	public static Pointer<Byte > av_strtok(Pointer<Byte > s, Pointer<Byte > delim, Pointer<Pointer<Byte > > saveptr) {
		return Pointer.pointerToAddress(av_strtok(Pointer.getPeer(s), Pointer.getPeer(delim), Pointer.getPeer(saveptr)), Byte.class);
	}
	@Ptr 
	protected native static long av_strtok(@Ptr long s, @Ptr long delim, @Ptr long saveptr);
	/**
	 * Locale-independent case-insensitive compare.<br>
	 * @note This means only ASCII-range characters are case-insensitive<br>
	 * Original signature : <code>int av_strcasecmp(const char*, const char*)</code><br>
	 * <i>native declaration : libavutil/avstring.h:193</i>
	 */
	public static int av_strcasecmp(Pointer<Byte > a, Pointer<Byte > b) {
		return av_strcasecmp(Pointer.getPeer(a), Pointer.getPeer(b));
	}
	protected native static int av_strcasecmp(@Ptr long a, @Ptr long b);
	/**
	 * Locale-independent case-insensitive compare.<br>
	 * @note This means only ASCII-range characters are case-insensitive<br>
	 * Original signature : <code>int av_strncasecmp(const char*, const char*, size_t)</code><br>
	 * <i>native declaration : libavutil/avstring.h:199</i>
	 */
	public static int av_strncasecmp(Pointer<Byte > a, Pointer<Byte > b, @Ptr long n) {
		return av_strncasecmp(Pointer.getPeer(a), Pointer.getPeer(b), n);
	}
	protected native static int av_strncasecmp(@Ptr long a, @Ptr long b, @Ptr long n);
	/**
	 * Locale-independent strings replace.<br>
	 * @note This means only ASCII-range characters are replace<br>
	 * Original signature : <code>char* av_strireplace(const char*, const char*, const char*)</code><br>
	 * <i>native declaration : libavutil/avstring.h:205</i>
	 */
	public static Pointer<Byte > av_strireplace(Pointer<Byte > str, Pointer<Byte > from, Pointer<Byte > to) {
		return Pointer.pointerToAddress(av_strireplace(Pointer.getPeer(str), Pointer.getPeer(from), Pointer.getPeer(to)), Byte.class);
	}
	@Ptr 
	protected native static long av_strireplace(@Ptr long str, @Ptr long from, @Ptr long to);
	/**
	 * Thread safe basename.<br>
	 * @param path the path, on DOS both \ and / are considered separators.<br>
	 * @return pointer to the basename substring.<br>
	 * Original signature : <code>char* av_basename(const char*)</code><br>
	 * <i>native declaration : libavutil/avstring.h:212</i>
	 */
	public static Pointer<Byte > av_basename(Pointer<Byte > path) {
		return Pointer.pointerToAddress(av_basename(Pointer.getPeer(path)), Byte.class);
	}
	@Ptr 
	protected native static long av_basename(@Ptr long path);
	/**
	 * Thread safe dirname.<br>
	 * @param path the path, on DOS both \ and / are considered separators.<br>
	 * @return the path with the separator replaced by the string terminator or ".".<br>
	 * @note the function may change the input string.<br>
	 * Original signature : <code>char* av_dirname(char*)</code><br>
	 * <i>native declaration : libavutil/avstring.h:220</i>
	 */
	public static Pointer<Byte > av_dirname(Pointer<Byte > path) {
		return Pointer.pointerToAddress(av_dirname(Pointer.getPeer(path)), Byte.class);
	}
	@Ptr 
	protected native static long av_dirname(@Ptr long path);
	/**
	 * Match instances of a name in a comma-separated list of names.<br>
	 * List entries are checked from the start to the end of the names list,<br>
	 * the first match ends further processing. If an entry prefixed with '-'<br>
	 * matches, then 0 is returned. The "ALL" list entry is considered to<br>
	 * match all names.<br>
	 * * @param name  Name to look for.<br>
	 * @param names List of names.<br>
	 * @return 1 on match, 0 otherwise.<br>
	 * Original signature : <code>int av_match_name(const char*, const char*)</code><br>
	 * <i>native declaration : libavutil/avstring.h:232</i>
	 */
	public static int av_match_name(Pointer<Byte > name, Pointer<Byte > names) {
		return av_match_name(Pointer.getPeer(name), Pointer.getPeer(names));
	}
	protected native static int av_match_name(@Ptr long name, @Ptr long names);
	/**
	 * Append path component to the existing path.<br>
	 * Path separator '/' is placed between when needed.<br>
	 * Resulting string have to be freed with av_free().<br>
	 * @param path      base path<br>
	 * @param component component to be appended<br>
	 * @return new path or NULL on error.<br>
	 * Original signature : <code>char* av_append_path_component(const char*, const char*)</code><br>
	 * <i>native declaration : libavutil/avstring.h:242</i>
	 */
	public static Pointer<Byte > av_append_path_component(Pointer<Byte > path, Pointer<Byte > component) {
		return Pointer.pointerToAddress(av_append_path_component(Pointer.getPeer(path), Pointer.getPeer(component)), Byte.class);
	}
	@Ptr 
	protected native static long av_append_path_component(@Ptr long path, @Ptr long component);
	/**
	 * Original signature : <code>int av_escape(char**, const char*, const char*, AVEscapeMode, int)</code><br>
	 * <i>native declaration : libavutil/avstring.h:252</i>
	 */
	public static int av_escape(Pointer<Pointer<Byte > > dst, Pointer<Byte > src, Pointer<Byte > special_chars, IntValuedEnum<AvutilLibrary.AVEscapeMode > mode, int flags) {
		return av_escape(Pointer.getPeer(dst), Pointer.getPeer(src), Pointer.getPeer(special_chars), (int)mode.value(), flags);
	}
	protected native static int av_escape(@Ptr long dst, @Ptr long src, @Ptr long special_chars, int mode, int flags);
	/**
	 * Original signature : <code>int av_utf8_decode(int32_t*, const uint8_t**, const uint8_t*, unsigned int)</code><br>
	 * <i>native declaration : libavutil/avstring.h:254</i>
	 */
	public static int av_utf8_decode(Pointer<Integer > codep, Pointer<Pointer<Byte > > bufp, Pointer<Byte > buf_end, int flags) {
		return av_utf8_decode(Pointer.getPeer(codep), Pointer.getPeer(bufp), Pointer.getPeer(buf_end), flags);
	}
	protected native static int av_utf8_decode(@Ptr long codep, @Ptr long bufp, @Ptr long buf_end, int flags);
	/**
	 * Check if a name is in a list.<br>
	 * @returns 0 if not found, or the 1 based index where it has been found in the<br>
	 *            list.<br>
	 * Original signature : <code>int av_match_list(const char*, const char*, char)</code><br>
	 * <i>native declaration : libavutil/avstring.h:261</i>
	 */
	public static int av_match_list(Pointer<Byte > name, Pointer<Byte > list, byte separator) {
		return av_match_list(Pointer.getPeer(name), Pointer.getPeer(list), separator);
	}
	protected native static int av_match_list(@Ptr long name, @Ptr long list, byte separator);
	/**
	 * Init a print buffer.<br>
	 * * @param buf        buffer to init<br>
	 * @param size_init  initial size (including the final 0)<br>
	 * @param size_max   maximum size;<br>
	 *                   0 means do not write anything, just count the length;<br>
	 *                   1 is replaced by the maximum value for automatic storage;<br>
	 *                   any large value means that the internal buffer will be<br>
	 *                   reallocated as needed up to that limit; -1 is converted to<br>
	 *                   UINT_MAX, the largest limit possible.<br>
	 *                   Check also AV_BPRINT_SIZE_* macros.<br>
	 * Original signature : <code>void av_bprint_init(AVBPrint*, unsigned, unsigned)</code><br>
	 * <i>native declaration : libavutil/bprint.h:21</i>
	 */
	public static void av_bprint_init(Pointer<AVBPrint > buf, int size_init, int size_max) {
		av_bprint_init(Pointer.getPeer(buf), size_init, size_max);
	}
	protected native static void av_bprint_init(@Ptr long buf, int size_init, int size_max);
	/**
	 * Init a print buffer using a pre-existing buffer.<br>
	 * * The buffer will not be reallocated.<br>
	 * * @param buf     buffer structure to init<br>
	 * @param buffer  byte buffer to use for the string data<br>
	 * @param size    size of buffer<br>
	 * Original signature : <code>void av_bprint_init_for_buffer(AVBPrint*, char*, unsigned)</code><br>
	 * <i>native declaration : libavutil/bprint.h:30</i>
	 */
	public static void av_bprint_init_for_buffer(Pointer<AVBPrint > buf, Pointer<Byte > buffer, int size) {
		av_bprint_init_for_buffer(Pointer.getPeer(buf), Pointer.getPeer(buffer), size);
	}
	protected native static void av_bprint_init_for_buffer(@Ptr long buf, @Ptr long buffer, int size);
	/**
	 * Append a formatted string to a print buffer.<br>
	 * Original signature : <code>void av_bprintf(AVBPrint*, const char*, null)</code><br>
	 * <i>native declaration : libavutil/bprint.h:35</i>
	 */
	public static void av_bprintf(Pointer<AVBPrint > buf, Pointer<Byte > fmt, Object... varArgs1) {
		av_bprintf(Pointer.getPeer(buf), Pointer.getPeer(fmt), varArgs1);
	}
	protected native static void av_bprintf(@Ptr long buf, @Ptr long fmt, Object... varArgs1);
	/**
	 * Append a formatted string to a print buffer.<br>
	 * Original signature : <code>void av_vbprintf(AVBPrint*, const char*, va_list)</code><br>
	 * <i>native declaration : libavutil/bprint.h:40</i>
	 */
	public static void av_vbprintf(Pointer<AVBPrint > buf, Pointer<Byte > fmt, Object... vl_arg) {
		av_vbprintf(Pointer.getPeer(buf), Pointer.getPeer(fmt), vl_arg);
	}
	protected native static void av_vbprintf(@Ptr long buf, @Ptr long fmt, Object... vl_arg);
	/**
	 * Append char c n times to a print buffer.<br>
	 * Original signature : <code>void av_bprint_chars(AVBPrint*, char, unsigned)</code><br>
	 * <i>native declaration : libavutil/bprint.h:45</i>
	 */
	public static void av_bprint_chars(Pointer<AVBPrint > buf, byte c, int n) {
		av_bprint_chars(Pointer.getPeer(buf), c, n);
	}
	protected native static void av_bprint_chars(@Ptr long buf, byte c, int n);
	/**
	 * Append data to a print buffer.<br>
	 * * param buf  bprint buffer to use<br>
	 * param data pointer to data<br>
	 * param size size of data<br>
	 * Original signature : <code>void av_bprint_append_data(AVBPrint*, const char*, unsigned)</code><br>
	 * <i>native declaration : libavutil/bprint.h:53</i>
	 */
	public static void av_bprint_append_data(Pointer<AVBPrint > buf, Pointer<Byte > data, int size) {
		av_bprint_append_data(Pointer.getPeer(buf), Pointer.getPeer(data), size);
	}
	protected native static void av_bprint_append_data(@Ptr long buf, @Ptr long data, int size);
	/**
	 * Append a formatted date and time to a print buffer.<br>
	 * * param buf  bprint buffer to use<br>
	 * param fmt  date and time format string, see strftime()<br>
	 * param tm   broken-down time structure to translate<br>
	 * * @note due to poor design of the standard strftime function, it may<br>
	 * produce poor results if the format string expands to a very long text and<br>
	 * the bprint buffer is near the limit stated by the size_max option.<br>
	 * Original signature : <code>void av_bprint_strftime(AVBPrint*, const char*, tm*)</code><br>
	 * <i>native declaration : libavutil/bprint.h:65</i>
	 */
	public static void av_bprint_strftime(Pointer<AVBPrint > buf, Pointer<Byte > fmt, Pointer<AvutilLibrary.tm > tm) {
		av_bprint_strftime(Pointer.getPeer(buf), Pointer.getPeer(fmt), Pointer.getPeer(tm));
	}
	protected native static void av_bprint_strftime(@Ptr long buf, @Ptr long fmt, @Ptr long tm);
	/**
	 * Allocate bytes in the buffer for external use.<br>
	 * * @param[in]  buf          buffer structure<br>
	 * @param[in]  size         required size<br>
	 * @param[out] mem          pointer to the memory area<br>
	 * @param[out] actual_size  size of the memory area after allocation;<br>
	 *                          can be larger or smaller than size<br>
	 * Original signature : <code>void av_bprint_get_buffer(AVBPrint*, unsigned, unsigned char**, unsigned*)</code><br>
	 * <i>native declaration : libavutil/bprint.h:75</i>
	 */
	public static void av_bprint_get_buffer(Pointer<AVBPrint > buf, int size, Pointer<Pointer<Byte > > mem, Pointer<Integer > actual_size) {
		av_bprint_get_buffer(Pointer.getPeer(buf), size, Pointer.getPeer(mem), Pointer.getPeer(actual_size));
	}
	protected native static void av_bprint_get_buffer(@Ptr long buf, int size, @Ptr long mem, @Ptr long actual_size);
	/**
	 * Reset the string to "" but keep internal allocated data.<br>
	 * Original signature : <code>void av_bprint_clear(AVBPrint*)</code><br>
	 * <i>native declaration : libavutil/bprint.h:80</i>
	 */
	public static void av_bprint_clear(Pointer<AVBPrint > buf) {
		av_bprint_clear(Pointer.getPeer(buf));
	}
	protected native static void av_bprint_clear(@Ptr long buf);
	/**
	 * Finalize a print buffer.<br>
	 * * The print buffer can no longer be used afterwards,<br>
	 * but the len and size fields are still valid.<br>
	 * * @arg[out] ret_str  if not NULL, used to return a permanent copy of the<br>
	 *                    buffer contents, or NULL if memory allocation fails;<br>
	 *                    if NULL, the buffer is discarded and freed<br>
	 * @return  0 for success or error code (probably AVERROR(ENOMEM))<br>
	 * Original signature : <code>int av_bprint_finalize(AVBPrint*, char**)</code><br>
	 * <i>native declaration : libavutil/bprint.h:100</i>
	 */
	public static int av_bprint_finalize(Pointer<AVBPrint > buf, Pointer<Pointer<Byte > > ret_str) {
		return av_bprint_finalize(Pointer.getPeer(buf), Pointer.getPeer(ret_str));
	}
	protected native static int av_bprint_finalize(@Ptr long buf, @Ptr long ret_str);
	/**
	 * Escape the content in src and append it to dstbuf.<br>
	 * * @param dstbuf        already inited destination bprint buffer<br>
	 * @param src           string containing the text to escape<br>
	 * @param special_chars string containing the special characters which<br>
	 *                      need to be escaped, can be NULL<br>
	 * @param mode          escape mode to employ, see AV_ESCAPE_MODE_* macros.<br>
	 *                      Any unknown value for mode will be considered equivalent to<br>
	 *                      AV_ESCAPE_MODE_BACKSLASH, but this behaviour can change without<br>
	 *                      notice.<br>
	 * @param flags         flags which control how to escape, see AV_ESCAPE_FLAG_* macros<br>
	 * Original signature : <code>void av_bprint_escape(AVBPrint*, const char*, const char*, AVEscapeMode, int)</code><br>
	 * <i>native declaration : libavutil/bprint.h:114</i>
	 */
	public static void av_bprint_escape(Pointer<AVBPrint > dstbuf, Pointer<Byte > src, Pointer<Byte > special_chars, IntValuedEnum<AvutilLibrary.AVEscapeMode > mode, int flags) {
		av_bprint_escape(Pointer.getPeer(dstbuf), Pointer.getPeer(src), Pointer.getPeer(special_chars), (int)mode.value(), flags);
	}
	protected native static void av_bprint_escape(@Ptr long dstbuf, @Ptr long src, @Ptr long special_chars, int mode, int flags);
	/**
	 * Return the flags which specify extensions supported by the CPU.<br>
	 * The returned value is affected by av_force_cpu_flags() if that was used<br>
	 * before. So av_get_cpu_flags() can easily be used in an application to<br>
	 * detect the enabled cpu flags.<br>
	 * Original signature : <code>int av_get_cpu_flags()</code><br>
	 * <i>native declaration : ./libavutil/cpu.h:7</i>
	 */
	public static native int av_get_cpu_flags();
	/**
	 * Disables cpu detection and forces the specified flags.<br>
	 * -1 is a special case that disables forcing of specific flags.<br>
	 * Original signature : <code>void av_force_cpu_flags(int)</code><br>
	 * <i>native declaration : ./libavutil/cpu.h:13</i>
	 */
	public static native void av_force_cpu_flags(int flags);
	/**
	 * Set a mask on flags returned by av_get_cpu_flags().<br>
	 * This function is mainly useful for testing.<br>
	 * Please use av_force_cpu_flags() and av_get_cpu_flags() instead which are more flexible<br>
	 * Original signature : <code>void av_set_cpu_flags_mask(int)</code><br>
	 * <i>native declaration : ./libavutil/cpu.h:20</i>
	 */
	public static native void av_set_cpu_flags_mask(int mask);
	/**
	 * Parse CPU flags from a string.<br>
	 * * The returned flags contain the specified flags as well as related unspecified flags.<br>
	 * * This function exists only for compatibility with libav.<br>
	 * Please use av_parse_cpu_caps() when possible.<br>
	 * @return a combination of AV_CPU_* flags, negative on error.<br>
	 * Original signature : <code>int av_parse_cpu_flags(const char*)</code><br>
	 * <i>native declaration : ./libavutil/cpu.h:29</i>
	 */
	public static int av_parse_cpu_flags(Pointer<Byte > s) {
		return av_parse_cpu_flags(Pointer.getPeer(s));
	}
	protected native static int av_parse_cpu_flags(@Ptr long s);
	/**
	 * Parse CPU caps from a string and update the given AV_CPU_* flags based on that.<br>
	 * * @return negative on error.<br>
	 * Original signature : <code>int av_parse_cpu_caps(unsigned*, const char*)</code><br>
	 * <i>native declaration : ./libavutil/cpu.h:35</i>
	 */
	public static int av_parse_cpu_caps(Pointer<Integer > flags, Pointer<Byte > s) {
		return av_parse_cpu_caps(Pointer.getPeer(flags), Pointer.getPeer(s));
	}
	protected native static int av_parse_cpu_caps(@Ptr long flags, @Ptr long s);
	/**
	 * @return the number of logical CPU cores present.<br>
	 * Original signature : <code>int av_cpu_count()</code><br>
	 * <i>native declaration : ./libavutil/cpu.h:40</i>
	 */
	public static native int av_cpu_count();
	/**
	 * Get the maximum data alignment that may be required by FFmpeg.<br>
	 * * Note that this is affected by the build configuration and the CPU flags mask,<br>
	 * so e.g. if the CPU supports AVX, but libavutil has been built with<br>
	 * --disable-avx or the AV_CPU_FLAG_AVX flag has been disabled through<br>
	 *  av_set_cpu_flags_mask(), then this function will behave as if AVX is not<br>
	 *  present.<br>
	 * Original signature : <code>size_t av_cpu_max_align()</code><br>
	 * <i>native declaration : ./libavutil/cpu.h:50</i>
	 */
	@Ptr 
	public static native long av_cpu_max_align();
	/**
	 * Return a channel layout id that matches name, or 0 if no match is found.<br>
	 * * name can be one or several of the following notations,<br>
	 * separated by '+' or '|':<br>
	 * - the name of an usual channel layout (mono, stereo, 4.0, quad, 5.0,<br>
	 *   5.0(side), 5.1, 5.1(side), 7.1, 7.1(wide), downmix);<br>
	 * - the name of a single channel (FL, FR, FC, LFE, BL, BR, FLC, FRC, BC,<br>
	 *   SL, SR, TC, TFL, TFC, TFR, TBL, TBC, TBR, DL, DR);<br>
	 * - a number of channels, in decimal, followed by 'c', yielding<br>
	 *   the default channel layout for that number of channels (@see<br>
	 *   av_get_default_channel_layout);<br>
	 * - a channel layout mask, in hexadecimal starting with "0x" (see the<br>
	 *   AV_CH_* macros).<br>
	 * * Example: "stereo+FC" = "2c+FC" = "2c+1c" = "0x7"<br>
	 * Original signature : <code>uint64_t av_get_channel_layout(const char*)</code><br>
	 * <i>native declaration : ./libavutil/channel_layout.h:26</i>
	 */
	public static long av_get_channel_layout(Pointer<Byte > name) {
		return av_get_channel_layout(Pointer.getPeer(name));
	}
	protected native static long av_get_channel_layout(@Ptr long name);
	/**
	 * Return a channel layout and the number of channels based on the specified name.<br>
	 * * This function is similar to (@see av_get_channel_layout), but can also parse<br>
	 * unknown channel layout specifications.<br>
	 * * @param[in]  name             channel layout specification string<br>
	 * @param[out] channel_layout   parsed channel layout (0 if unknown)<br>
	 * @param[out] nb_channels      number of channels<br>
	 * * @return 0 on success, AVERROR(EINVAL) if the parsing fails.<br>
	 * Original signature : <code>int av_get_extended_channel_layout(const char*, uint64_t*, int*)</code><br>
	 * <i>native declaration : ./libavutil/channel_layout.h:37</i>
	 */
	public static int av_get_extended_channel_layout(Pointer<Byte > name, Pointer<Long > channel_layout, Pointer<Integer > nb_channels) {
		return av_get_extended_channel_layout(Pointer.getPeer(name), Pointer.getPeer(channel_layout), Pointer.getPeer(nb_channels));
	}
	protected native static int av_get_extended_channel_layout(@Ptr long name, @Ptr long channel_layout, @Ptr long nb_channels);
	/**
	 * Return a description of a channel layout.<br>
	 * If nb_channels is <= 0, it is guessed from the channel_layout.<br>
	 * * @param buf put here the string containing the channel layout<br>
	 * @param buf_size size in bytes of the buffer<br>
	 * Original signature : <code>void av_get_channel_layout_string(char*, int, int, uint64_t)</code><br>
	 * <i>native declaration : ./libavutil/channel_layout.h:45</i>
	 */
	public static void av_get_channel_layout_string(Pointer<Byte > buf, int buf_size, int nb_channels, long channel_layout) {
		av_get_channel_layout_string(Pointer.getPeer(buf), buf_size, nb_channels, channel_layout);
	}
	protected native static void av_get_channel_layout_string(@Ptr long buf, int buf_size, int nb_channels, long channel_layout);
	/**
	 * Append a description of a channel layout to a bprint buffer.<br>
	 * Original signature : <code>void av_bprint_channel_layout(AVBPrint*, int, uint64_t)</code><br>
	 * <i>native declaration : ./libavutil/channel_layout.h:51</i>
	 */
	public static void av_bprint_channel_layout(Pointer<AVBPrint > bp, int nb_channels, long channel_layout) {
		av_bprint_channel_layout(Pointer.getPeer(bp), nb_channels, channel_layout);
	}
	protected native static void av_bprint_channel_layout(@Ptr long bp, int nb_channels, long channel_layout);
	/**
	 * Return the number of channels in the channel layout.<br>
	 * Original signature : <code>int av_get_channel_layout_nb_channels(uint64_t)</code><br>
	 * <i>native declaration : ./libavutil/channel_layout.h:56</i>
	 */
	public static native int av_get_channel_layout_nb_channels(long channel_layout);
	/**
	 * Return default channel layout for a given number of channels.<br>
	 * Original signature : <code>int64_t av_get_default_channel_layout(int)</code><br>
	 * <i>native declaration : ./libavutil/channel_layout.h:61</i>
	 */
	public static native long av_get_default_channel_layout(int nb_channels);
	/**
	 * Get the index of a channel in channel_layout.<br>
	 * * @param channel a channel layout describing exactly one channel which must be<br>
	 *                present in channel_layout.<br>
	 * * @return index of channel in channel_layout on success, a negative AVERROR<br>
	 *         on error.<br>
	 * Original signature : <code>int av_get_channel_layout_channel_index(uint64_t, uint64_t)</code><br>
	 * <i>native declaration : ./libavutil/channel_layout.h:70</i>
	 */
	public static native int av_get_channel_layout_channel_index(long channel_layout, long channel);
	/**
	 * Get the channel with the given index in channel_layout.<br>
	 * Original signature : <code>uint64_t av_channel_layout_extract_channel(uint64_t, int)</code><br>
	 * <i>native declaration : ./libavutil/channel_layout.h:75</i>
	 */
	public static native long av_channel_layout_extract_channel(long channel_layout, int index);
	/**
	 * Get the name of a given channel.<br>
	 * * @return channel name on success, NULL on error.<br>
	 * Original signature : <code>char* av_get_channel_name(uint64_t)</code><br>
	 * <i>native declaration : ./libavutil/channel_layout.h:81</i>
	 */
	public static Pointer<Byte > av__get_channel_name(long channel) {
		return Pointer.pointerToAddress(av_get_channel_name(channel), Byte.class);
	}
	@Ptr 
	protected native static long av_get_channel_name(long channel);
	/**
	 * Get the description of a given channel.<br>
	 * * @param channel  a channel layout with a single channel<br>
	 * @return  channel description on success, NULL on error<br>
	 * Original signature : <code>char* av_get_channel_description(uint64_t)</code><br>
	 * <i>native declaration : ./libavutil/channel_layout.h:88</i>
	 */
	public static Pointer<Byte > av__get_channel_description(long channel) {
		return Pointer.pointerToAddress(av_get_channel_description(channel), Byte.class);
	}
	@Ptr 
	protected native static long av_get_channel_description(long channel);
	/**
	 * Get the value and name of a standard channel layout.<br>
	 * * @param[in]  index   index in an internal list, starting at 0<br>
	 * @param[out] layout  channel layout mask<br>
	 * @param[out] name    name of the layout<br>
	 * @return  0  if the layout exists,<br>
	 *          <0 if index is beyond the limits<br>
	 * Original signature : <code>int av_get_standard_channel_layout(unsigned, uint64_t*, const char**)</code><br>
	 * <i>native declaration : ./libavutil/channel_layout.h:98</i>
	 */
	public static int av_get_standard_channel_layout(int index, Pointer<Long > layout, Pointer<Pointer<Byte > > name) {
		return av_get_standard_channel_layout(index, Pointer.getPeer(layout), Pointer.getPeer(name));
	}
	protected native static int av_get_standard_channel_layout(int index, @Ptr long layout, @Ptr long name);
	/** Undefined type */
	public static interface tm {
		
	};
}
