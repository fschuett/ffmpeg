package org.ffmpeg.avutil;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.ffmpeg.avutil.AvutilLibrary.AVHWDeviceType;
/**
 * <i>native declaration : ./libavutil/hwcontext.h:70</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("avutil") 
public class AVHWDeviceContext extends StructObject {
	static {
		BridJ.register();
	}
	/**
	 * A class for logging. Set by av_hwdevice_ctx_alloc().<br>
	 * C type : const AVClass*
	 */
	@Field(0) 
	public Pointer<AVClass > av_class() {
		return this.io.getPointerField(this, 0);
	}
	/**
	 * A class for logging. Set by av_hwdevice_ctx_alloc().<br>
	 * C type : const AVClass*
	 */
	@Field(0) 
	public AVHWDeviceContext av_class(Pointer<AVClass > av_class) {
		this.io.setPointerField(this, 0, av_class);
		return this;
	}
	/**
	 * Private data used internally by libavutil. Must not be accessed in any<br>
	 * way by the caller.<br>
	 * C type : AVHWDeviceInternal*
	 */
	@Field(1) 
	public Pointer<AVHWDeviceInternal > internal() {
		return this.io.getPointerField(this, 1);
	}
	/**
	 * Private data used internally by libavutil. Must not be accessed in any<br>
	 * way by the caller.<br>
	 * C type : AVHWDeviceInternal*
	 */
	@Field(1) 
	public AVHWDeviceContext internal(Pointer<AVHWDeviceInternal > internal) {
		this.io.setPointerField(this, 1, internal);
		return this;
	}
	/**
	 * This field identifies the underlying API used for hardware access.<br>
	 * * This field is set when this struct is allocated and never changed<br>
	 * afterwards.<br>
	 * C type : AVHWDeviceType
	 */
	@Field(2) 
	public IntValuedEnum<AVHWDeviceType > type() {
		return this.io.getEnumField(this, 2);
	}
	/**
	 * This field identifies the underlying API used for hardware access.<br>
	 * * This field is set when this struct is allocated and never changed<br>
	 * afterwards.<br>
	 * C type : AVHWDeviceType
	 */
	@Field(2) 
	public AVHWDeviceContext type(IntValuedEnum<AVHWDeviceType > type) {
		this.io.setEnumField(this, 2, type);
		return this;
	}
	/**
	 * The format-specific data, allocated and freed by libavutil along with<br>
	 * this context.<br>
	 * * Should be cast by the user to the format-specific context defined in the<br>
	 * corresponding header (hwcontext_*.h) and filled as described in the<br>
	 * documentation before calling av_hwdevice_ctx_init().<br>
	 * * After calling av_hwdevice_ctx_init() this struct should not be modified<br>
	 * by the caller.<br>
	 * C type : void*
	 */
	@Field(3) 
	public Pointer<? > hwctx() {
		return this.io.getPointerField(this, 3);
	}
	/**
	 * The format-specific data, allocated and freed by libavutil along with<br>
	 * this context.<br>
	 * * Should be cast by the user to the format-specific context defined in the<br>
	 * corresponding header (hwcontext_*.h) and filled as described in the<br>
	 * documentation before calling av_hwdevice_ctx_init().<br>
	 * * After calling av_hwdevice_ctx_init() this struct should not be modified<br>
	 * by the caller.<br>
	 * C type : void*
	 */
	@Field(3) 
	public AVHWDeviceContext hwctx(Pointer<? > hwctx) {
		this.io.setPointerField(this, 3, hwctx);
		return this;
	}
	/**
	 * This field may be set by the caller before calling av_hwdevice_ctx_init().<br>
	 * * If non-NULL, this callback will be called when the last reference to<br>
	 * this context is unreferenced, immediately before it is freed.<br>
	 * * @note when other objects (e.g an AVHWFramesContext) are derived from this<br>
	 *       struct, this callback will be invoked after all such child objects<br>
	 *       are fully uninitialized and their respective destructors invoked.<br>
	 * C type : free_callback*
	 */
	@Field(4) 
	public Pointer<org.ffmpeg.avutil.AVHWFramesContext.free_callback > free() {
		return this.io.getPointerField(this, 4);
	}
	/**
	 * This field may be set by the caller before calling av_hwdevice_ctx_init().<br>
	 * * If non-NULL, this callback will be called when the last reference to<br>
	 * this context is unreferenced, immediately before it is freed.<br>
	 * * @note when other objects (e.g an AVHWFramesContext) are derived from this<br>
	 *       struct, this callback will be invoked after all such child objects<br>
	 *       are fully uninitialized and their respective destructors invoked.<br>
	 * C type : free_callback*
	 */
	@Field(4) 
	public AVHWDeviceContext free(Pointer<org.ffmpeg.avutil.AVHWFramesContext.free_callback > free) {
		this.io.setPointerField(this, 4, free);
		return this;
	}
	/**
	 * Arbitrary user data, to be used e.g. by the free() callback.<br>
	 * C type : void*
	 */
	@Field(5) 
	public Pointer<? > user_opaque() {
		return this.io.getPointerField(this, 5);
	}
	/**
	 * Arbitrary user data, to be used e.g. by the free() callback.<br>
	 * C type : void*
	 */
	@Field(5) 
	public AVHWDeviceContext user_opaque(Pointer<? > user_opaque) {
		this.io.setPointerField(this, 5, user_opaque);
		return this;
	}
	/** <i>native declaration : ./libavutil/hwcontext.h:69</i> */
	public static abstract class free_callback extends Callback<free_callback > {
		public void apply(Pointer<AVHWDeviceContext > ctx) {
			apply(Pointer.getPeer(ctx));
		}
		public void apply(@Ptr long ctx) {
			apply(Pointer.pointerToAddress(ctx, AVHWDeviceContext.class));
		}
	};
	public AVHWDeviceContext() {
		super();
	}
	public AVHWDeviceContext(Pointer pointer) {
		super(pointer);
	}
}
