package org.ffmpeg.avutil;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.util.DefaultParameterizedType;
import org.ffmpeg.avutil.AvutilLibrary.AVClassCategory;
/**
 * <i>native declaration : libavutil/log.h:94</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("avutil") 
public class AVClass extends StructObject {
	static {
		BridJ.register();
	}
	/**
	 * The name of the class; usually it is the same name as the<br>
	 * context structure type to which the AVClass is associated.<br>
	 * C type : const char*
	 */
	@Field(0) 
	public Pointer<Byte > class_name() {
		return this.io.getPointerField(this, 0);
	}
	/**
	 * The name of the class; usually it is the same name as the<br>
	 * context structure type to which the AVClass is associated.<br>
	 * C type : const char*
	 */
	@Field(0) 
	public AVClass class_name(Pointer<Byte > class_name) {
		this.io.setPointerField(this, 0, class_name);
		return this;
	}
	/**
	 * A pointer to a function which returns the name of a context<br>
	 * instance ctx associated with the class.<br>
	 * C type : item_name_callback*
	 */
	@Field(1) 
	public Pointer<AVClass.item_name_callback > item_name() {
		return this.io.getPointerField(this, 1);
	}
	/**
	 * A pointer to a function which returns the name of a context<br>
	 * instance ctx associated with the class.<br>
	 * C type : item_name_callback*
	 */
	@Field(1) 
	public AVClass item_name(Pointer<AVClass.item_name_callback > item_name) {
		this.io.setPointerField(this, 1, item_name);
		return this;
	}
	/**
	 * a pointer to the first option specified in the class if any or NULL<br>
	 * * @see av_set_default_options()<br>
	 * C type : AVOption*
	 */
	@Field(2) 
	public Pointer<AVOption > option() {
		return this.io.getPointerField(this, 2);
	}
	/**
	 * a pointer to the first option specified in the class if any or NULL<br>
	 * * @see av_set_default_options()<br>
	 * C type : AVOption*
	 */
	@Field(2) 
	public AVClass option(Pointer<AVOption > option) {
		this.io.setPointerField(this, 2, option);
		return this;
	}
	@Field(3) 
	public int version() {
		return this.io.getIntField(this, 3);
	}
	@Field(3) 
	public AVClass version(int version) {
		this.io.setIntField(this, 3, version);
		return this;
	}
	/**
	 * Offset in the structure where log_level_offset is stored.<br>
	 * 0 means there is no such variable
	 */
	@Field(4) 
	public int log_level_offset_offset() {
		return this.io.getIntField(this, 4);
	}
	/**
	 * Offset in the structure where log_level_offset is stored.<br>
	 * 0 means there is no such variable
	 */
	@Field(4) 
	public AVClass log_level_offset_offset(int log_level_offset_offset) {
		this.io.setIntField(this, 4, log_level_offset_offset);
		return this;
	}
	/**
	 * Offset in the structure where a pointer to the parent context for<br>
	 * logging is stored. For example a decoder could pass its AVCodecContext<br>
	 * to eval as such a parent context, which an av_log() implementation<br>
	 * could then leverage to display the parent context.<br>
	 * The offset can be NULL.
	 */
	@Field(5) 
	public int parent_log_context_offset() {
		return this.io.getIntField(this, 5);
	}
	/**
	 * Offset in the structure where a pointer to the parent context for<br>
	 * logging is stored. For example a decoder could pass its AVCodecContext<br>
	 * to eval as such a parent context, which an av_log() implementation<br>
	 * could then leverage to display the parent context.<br>
	 * The offset can be NULL.
	 */
	@Field(5) 
	public AVClass parent_log_context_offset(int parent_log_context_offset) {
		this.io.setIntField(this, 5, parent_log_context_offset);
		return this;
	}
	/**
	 * Return next AVOptions-enabled child or NULL<br>
	 * C type : child_next_callback*
	 */
	@Field(6) 
	public Pointer<AVClass.child_next_callback > child_next() {
		return this.io.getPointerField(this, 6);
	}
	/**
	 * Return next AVOptions-enabled child or NULL<br>
	 * C type : child_next_callback*
	 */
	@Field(6) 
	public AVClass child_next(Pointer<AVClass.child_next_callback > child_next) {
		this.io.setPointerField(this, 6, child_next);
		return this;
	}
	/** C type : child_class_next_callback* */
	@Field(7) 
	public Pointer<AVClass.child_class_next_callback > child_class_next() {
		return this.io.getPointerField(this, 7);
	}
	/** C type : child_class_next_callback* */
	@Field(7) 
	public AVClass child_class_next(Pointer<AVClass.child_class_next_callback > child_class_next) {
		this.io.setPointerField(this, 7, child_class_next);
		return this;
	}
	/**
	 * Category used for visualization (like color)<br>
	 * This is only set if the category is equal for all objects using this class.<br>
	 * available since version (51 << 16 | 56 << 8 | 100)<br>
	 * C type : AVClassCategory
	 */
	@Field(8) 
	public IntValuedEnum<AVClassCategory > category() {
		return this.io.getEnumField(this, 8);
	}
	/**
	 * Category used for visualization (like color)<br>
	 * This is only set if the category is equal for all objects using this class.<br>
	 * available since version (51 << 16 | 56 << 8 | 100)<br>
	 * C type : AVClassCategory
	 */
	@Field(8) 
	public AVClass category(IntValuedEnum<AVClassCategory > category) {
		this.io.setEnumField(this, 8, category);
		return this;
	}
	/**
	 * Callback to return the category.<br>
	 * available since version (51 << 16 | 59 << 8 | 100)<br>
	 * C type : get_category_callback*
	 */
	@Field(9) 
	public Pointer<AVClass.get_category_callback > get_category() {
		return this.io.getPointerField(this, 9);
	}
	/**
	 * Callback to return the category.<br>
	 * available since version (51 << 16 | 59 << 8 | 100)<br>
	 * C type : get_category_callback*
	 */
	@Field(9) 
	public AVClass get_category(Pointer<AVClass.get_category_callback > get_category) {
		this.io.setPointerField(this, 9, get_category);
		return this;
	}
	/**
	 * Callback to return the supported/allowed ranges.<br>
	 * available since version (52.12)<br>
	 * C type : query_ranges_callback*
	 */
	@Field(10) 
	public Pointer<AVClass.query_ranges_callback > query_ranges() {
		return this.io.getPointerField(this, 10);
	}
	/**
	 * Callback to return the supported/allowed ranges.<br>
	 * available since version (52.12)<br>
	 * C type : query_ranges_callback*
	 */
	@Field(10) 
	public AVClass query_ranges(Pointer<AVClass.query_ranges_callback > query_ranges) {
		this.io.setPointerField(this, 10, query_ranges);
		return this;
	}
	/**
	 * Iterate over the AVClasses corresponding to potential AVOptions-enabled<br>
	 * children.<br>
	 * * @param iter pointer to opaque iteration state. The caller must initialize<br>
	 *             *iter to NULL before the first call.<br>
	 * @return AVClass for the next AVOptions-enabled child or NULL if there are<br>
	 *         no more such children.<br>
	 * * @note The difference between child_next and this is that child_next<br>
	 *       iterates over _already existing_ objects, while child_class_iterate<br>
	 *       iterates over _all possible_ children.<br>
	 * C type : child_class_iterate_callback*
	 */
	@Field(11) 
	public Pointer<AVClass.child_class_iterate_callback > child_class_iterate() {
		return this.io.getPointerField(this, 11);
	}
	/**
	 * Iterate over the AVClasses corresponding to potential AVOptions-enabled<br>
	 * children.<br>
	 * * @param iter pointer to opaque iteration state. The caller must initialize<br>
	 *             *iter to NULL before the first call.<br>
	 * @return AVClass for the next AVOptions-enabled child or NULL if there are<br>
	 *         no more such children.<br>
	 * * @note The difference between child_next and this is that child_next<br>
	 *       iterates over _already existing_ objects, while child_class_iterate<br>
	 *       iterates over _all possible_ children.<br>
	 * C type : child_class_iterate_callback*
	 */
	@Field(11) 
	public AVClass child_class_iterate(Pointer<AVClass.child_class_iterate_callback > child_class_iterate) {
		this.io.setPointerField(this, 11, child_class_iterate);
		return this;
	}
	/** <i>native declaration : libavutil/log.h:88</i> */
	public static abstract class item_name_callback extends Callback<item_name_callback > {
		public Pointer<Byte > apply(Pointer<? > ctx) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(ctx)), Byte.class);
		}
		@Ptr 
		public long apply(@Ptr long ctx) {
			return Pointer.getPeer(apply(Pointer.pointerToAddress(ctx)));
		}
	};
	/** <i>native declaration : libavutil/log.h:89</i> */
	public static abstract class child_next_callback extends Callback<child_next_callback > {
		public Pointer<? > apply(Pointer<? > obj, Pointer<? > prev) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(obj), Pointer.getPeer(prev)));
		}
		@Ptr 
		public long apply(@Ptr long obj, @Ptr long prev) {
			return Pointer.getPeer(apply(Pointer.pointerToAddress(obj), Pointer.pointerToAddress(prev)));
		}
	};
	/** <i>native declaration : libavutil/log.h:90</i> */
	public static abstract class child_class_next_callback extends Callback<child_class_next_callback > {
		public Pointer<AVClass > apply(Pointer<AVClass > prev) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(prev)), AVClass.class);
		}
		@Ptr 
		public long apply(@Ptr long prev) {
			return Pointer.getPeer(apply(Pointer.pointerToAddress(prev, AVClass.class)));
		}
	};
	/** <i>native declaration : libavutil/log.h:91</i> */
	public static abstract class get_category_callback extends Callback<get_category_callback > {
		public IntValuedEnum<AVClassCategory > apply(Pointer<? > ctx) {
			return FlagSet.fromValue(apply(Pointer.getPeer(ctx)), AVClassCategory.class);
		}
		public int apply(@Ptr long ctx) {
			return (int)apply(Pointer.pointerToAddress(ctx)).value();
		}
	};
	/** <i>native declaration : libavutil/log.h:92</i> */
	public static abstract class query_ranges_callback extends Callback<query_ranges_callback > {
		public int apply(Pointer<Pointer > AVOptionRangesPtrPtr1, Pointer<? > obj, Pointer<Byte > key, int flags) {
			return apply(Pointer.getPeer(AVOptionRangesPtrPtr1), Pointer.getPeer(obj), Pointer.getPeer(key), flags);
		}
		public int apply(@Ptr long AVOptionRangesPtrPtr1, @Ptr long obj, @Ptr long key, int flags) {
			return apply(Pointer.pointerToAddress(AVOptionRangesPtrPtr1, Pointer.class), Pointer.pointerToAddress(obj), Pointer.pointerToAddress(key, Byte.class), flags);
		}
	};
	/** <i>native declaration : libavutil/log.h:93</i> */
	public static abstract class child_class_iterate_callback extends Callback<child_class_iterate_callback > {
		public Pointer<AVClass > apply(Pointer<Pointer<? > > iter) {
			return Pointer.pointerToAddress(apply(Pointer.getPeer(iter)), AVClass.class);
		}
		@Ptr 
		public long apply(@Ptr long iter) {
			return Pointer.getPeer(apply(Pointer.pointerToAddress(iter, DefaultParameterizedType.paramType(Pointer.class, null))));
		}
	};
	public AVClass() {
		super();
	}
	public AVClass(Pointer pointer) {
		super(pointer);
	}
}
