package org.ffmpeg.avfilter;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.ffmpeg.avutil.AVBufferRef;
import org.ffmpeg.avutil.AVRational;
/**
 * <i>native declaration : libavfilter/buffersrc.h:56</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("avfilter") 
public class AVBufferSrcParameters extends StructObject {
	static {
		BridJ.register();
	}
	/**
	 * video: the pixel format, value corresponds to enum AVPixelFormat<br>
	 * audio: the sample format, value corresponds to enum AVSampleFormat
	 */
	@Field(0) 
	public int format() {
		return this.io.getIntField(this, 0);
	}
	/**
	 * video: the pixel format, value corresponds to enum AVPixelFormat<br>
	 * audio: the sample format, value corresponds to enum AVSampleFormat
	 */
	@Field(0) 
	public AVBufferSrcParameters format(int format) {
		this.io.setIntField(this, 0, format);
		return this;
	}
	/**
	 * The timebase to be used for the timestamps on the input frames.<br>
	 * C type : AVRational
	 */
	@Field(1) 
	public AVRational time_base() {
		return this.io.getNativeObjectField(this, 1);
	}
	/**
	 * The timebase to be used for the timestamps on the input frames.<br>
	 * C type : AVRational
	 */
	@Field(1) 
	public AVBufferSrcParameters time_base(AVRational time_base) {
		this.io.setNativeObjectField(this, 1, time_base);
		return this;
	}
	/** Video only, the display dimensions of the input frames. */
	@Field(2) 
	public int width() {
		return this.io.getIntField(this, 2);
	}
	/** Video only, the display dimensions of the input frames. */
	@Field(2) 
	public AVBufferSrcParameters width(int width) {
		this.io.setIntField(this, 2, width);
		return this;
	}
	/** Video only, the display dimensions of the input frames. */
	@Field(3) 
	public int height() {
		return this.io.getIntField(this, 3);
	}
	/** Video only, the display dimensions of the input frames. */
	@Field(3) 
	public AVBufferSrcParameters height(int height) {
		this.io.setIntField(this, 3, height);
		return this;
	}
	/**
	 * Video only, the sample (pixel) aspect ratio.<br>
	 * C type : AVRational
	 */
	@Field(4) 
	public AVRational sample_aspect_ratio() {
		return this.io.getNativeObjectField(this, 4);
	}
	/**
	 * Video only, the sample (pixel) aspect ratio.<br>
	 * C type : AVRational
	 */
	@Field(4) 
	public AVBufferSrcParameters sample_aspect_ratio(AVRational sample_aspect_ratio) {
		this.io.setNativeObjectField(this, 4, sample_aspect_ratio);
		return this;
	}
	/**
	 * Video only, the frame rate of the input video. This field must only be<br>
	 * set to a non-zero value if input stream has a known constant framerate<br>
	 * and should be left at its initial value if the framerate is variable or<br>
	 * unknown.<br>
	 * C type : AVRational
	 */
	@Field(5) 
	public AVRational frame_rate() {
		return this.io.getNativeObjectField(this, 5);
	}
	/**
	 * Video only, the frame rate of the input video. This field must only be<br>
	 * set to a non-zero value if input stream has a known constant framerate<br>
	 * and should be left at its initial value if the framerate is variable or<br>
	 * unknown.<br>
	 * C type : AVRational
	 */
	@Field(5) 
	public AVBufferSrcParameters frame_rate(AVRational frame_rate) {
		this.io.setNativeObjectField(this, 5, frame_rate);
		return this;
	}
	/**
	 * Video with a hwaccel pixel format only. This should be a reference to an<br>
	 * AVHWFramesContext instance describing the input frames.<br>
	 * C type : AVBufferRef*
	 */
	@Field(6) 
	public Pointer<AVBufferRef > hw_frames_ctx() {
		return this.io.getPointerField(this, 6);
	}
	/**
	 * Video with a hwaccel pixel format only. This should be a reference to an<br>
	 * AVHWFramesContext instance describing the input frames.<br>
	 * C type : AVBufferRef*
	 */
	@Field(6) 
	public AVBufferSrcParameters hw_frames_ctx(Pointer<AVBufferRef > hw_frames_ctx) {
		this.io.setPointerField(this, 6, hw_frames_ctx);
		return this;
	}
	/** Audio only, the audio sampling rate in samples per second. */
	@Field(7) 
	public int sample_rate() {
		return this.io.getIntField(this, 7);
	}
	/** Audio only, the audio sampling rate in samples per second. */
	@Field(7) 
	public AVBufferSrcParameters sample_rate(int sample_rate) {
		this.io.setIntField(this, 7, sample_rate);
		return this;
	}
	/** Audio only, the audio channel layout */
	@Field(8) 
	public long channel_layout() {
		return this.io.getLongField(this, 8);
	}
	/** Audio only, the audio channel layout */
	@Field(8) 
	public AVBufferSrcParameters channel_layout(long channel_layout) {
		this.io.setLongField(this, 8, channel_layout);
		return this;
	}
	public AVBufferSrcParameters() {
		super();
	}
	public AVBufferSrcParameters(Pointer pointer) {
		super(pointer);
	}
}
